2023-08-15 04:48:00 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-15 04:48:00 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-15 04:48:00 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-15 04:48:00 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math80/kgenprog-80.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math80 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.linear.EigenDecompositionImplTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/research
version = 1.8.2
================================================================
2023-08-15 04:48:18 [main] [INFO]  KGenProgMain - initial failed tests (1/18)
org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02: null

2023-08-15 04:48:19 [main] [INFO]  KGenProgMain - GA started
2023-08-15 04:48:19 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-15 04:48:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 50, build-succeeded 14, build-failed 29, syntax-invalid 1, redundant 6
Fitness: max 0.944(13), min 0.5(1), ave 0.913
Test execution time: sum 7128 ms, max 753 ms, min 362 ms
----------------------------------------------------------------

2023-08-15 04:48:33 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-15 04:48:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 seconds
Variants: generated 50, build-succeeded 15, build-failed 29, syntax-invalid 3, redundant 3
Fitness: max 1(1), min 0.5(1), ave 0.911
Test execution time: sum 6031 ms, max 554 ms, min 290 ms
----------------------------------------------------------------

2023-08-15 04:48:46 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-15 04:49:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 seconds
Variants: generated 100, build-succeeded 35, build-failed 32, syntax-invalid 3, redundant 30
Fitness: max 1(1), min 0.944(34), ave 0.946
Test execution time: sum 11400 ms, max 593 ms, min 249 ms
----------------------------------------------------------------

2023-08-15 04:49:06 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-15 04:49:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 0 seconds
Variants: generated 100, build-succeeded 20, build-failed 43, syntax-invalid 2, redundant 35
Fitness: max 0.944(20), min 0.944(20), ave 0.944
Test execution time: sum 6673 ms, max 471 ms, min 253 ms
----------------------------------------------------------------

2023-08-15 04:49:19 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-15 04:49:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 100, build-succeeded 35, build-failed 37, syntax-invalid 6, redundant 22
Fitness: max 0.944(35), min 0.944(35), ave 0.944
Test execution time: sum 11059 ms, max 411 ms, min 250 ms
----------------------------------------------------------------

2023-08-15 04:49:38 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-15 04:49:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 37 seconds
Variants: generated 100, build-succeeded 39, build-failed 33, syntax-invalid 4, redundant 24
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 12062 ms, max 577 ms, min 240 ms
----------------------------------------------------------------

2023-08-15 04:49:57 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-15 04:56:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 59 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 5, redundant 17
Fitness: max 0.944(44), min 0.611(1), ave 0.936
Test execution time: sum 374409 ms, max 360332 ms, min 226 ms
----------------------------------------------------------------

2023-08-15 04:56:19 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-15 04:56:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 22 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 6, redundant 16
Fitness: max 1(1), min 0.944(47), ave 0.946
Test execution time: sum 14814 ms, max 612 ms, min 234 ms
----------------------------------------------------------------

2023-08-15 04:56:41 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-15 04:57:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 46 seconds
Variants: generated 100, build-succeeded 42, build-failed 39, syntax-invalid 9, redundant 10
Fitness: max 0.944(41), min 0(1), ave 0.922
Test execution time: sum 14540 ms, max 777 ms, min 157 ms
----------------------------------------------------------------

2023-08-15 04:57:06 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-15 05:00:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 12 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 4, redundant 14
Fitness: max 0.944(46), min 0.556(1), ave 0.922
Test execution time: sum 196292 ms, max 180291 ms, min 229 ms
----------------------------------------------------------------

2023-08-15 05:00:31 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-15 05:00:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 31 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 8, redundant 16
Fitness: max 0.944(36), min 0.556(1), ave 0.925
Test execution time: sum 11986 ms, max 492 ms, min 243 ms
----------------------------------------------------------------

2023-08-15 05:00:51 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-15 05:01:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 53 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 10, redundant 15
Fitness: max 0.944(42), min 0.889(1), ave 0.943
Test execution time: sum 13932 ms, max 530 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 05:01:13 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-15 05:01:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 15 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 14, redundant 5
Fitness: max 1(1), min 0(1), ave 0.924
Test execution time: sum 14540 ms, max 500 ms, min 90 ms
----------------------------------------------------------------

2023-08-15 05:01:35 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-15 05:01:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 38 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 7, redundant 9
Fitness: max 0.944(47), min 0.944(47), ave 0.944
Test execution time: sum 14127 ms, max 472 ms, min 235 ms
----------------------------------------------------------------

2023-08-15 05:01:57 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-15 05:05:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 1 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 11, redundant 11
Fitness: max 0.944(45), min 0.611(1), ave 0.936
Test execution time: sum 194591 ms, max 180382 ms, min 243 ms
----------------------------------------------------------------

2023-08-15 05:05:20 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-15 05:11:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 25 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 6, redundant 4
Fitness: max 1(2), min 0.722(1), ave 0.942
Test execution time: sum 376365 ms, max 180370 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 05:11:45 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-15 05:15:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 47 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 13, redundant 9
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 193584 ms, max 180384 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 05:15:07 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-15 05:18:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 1(1), min 0.833(3), ave 0.939
Test execution time: sum 197078 ms, max 180299 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 05:18:33 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-15 05:27:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 35 seconds
Variants: generated 100, build-succeeded 48, build-failed 35, syntax-invalid 9, redundant 8
Fitness: max 1(1), min 0.5(2), ave 0.927
Test execution time: sum 553388 ms, max 180302 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 05:27:54 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-15 06:04:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 56 seconds
Variants: generated 100, build-succeeded 46, build-failed 38, syntax-invalid 11, redundant 5
Fitness: max 1(4), min 0.444(2), ave 0.928
Test execution time: sum 2172446 ms, max 1800215 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 06:04:15 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-15 06:07:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 17 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 18, redundant 2
Fitness: max 1(2), min 0.722(1), ave 0.942
Test execution time: sum 192581 ms, max 180303 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 06:07:36 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-15 06:11:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 41 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 14, redundant 4
Fitness: max 0.944(54), min 0.833(1), ave 0.942
Test execution time: sum 195987 ms, max 180458 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 06:11:00 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-15 06:14:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 3 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 13, redundant 1
Fitness: max 0.944(44), min 0.167(1), ave 0.924
Test execution time: sum 192985 ms, max 180266 ms, min 206 ms
----------------------------------------------------------------

2023-08-15 06:14:22 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-15 06:20:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 26 seconds
Variants: generated 100, build-succeeded 49, build-failed 38, syntax-invalid 12, redundant 1
Fitness: max 0.944(46), min 0.5(1), ave 0.932
Test execution time: sum 373609 ms, max 360205 ms, min 222 ms
----------------------------------------------------------------

2023-08-15 06:20:46 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-15 06:21:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 54 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 13, redundant 3
Fitness: max 1(2), min 0.611(1), ave 0.937
Test execution time: sum 14402 ms, max 534 ms, min 220 ms
----------------------------------------------------------------

2023-08-15 06:21:13 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-15 06:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 16 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 16, redundant 4
Fitness: max 0.944(46), min 0.5(1), ave 0.933
Test execution time: sum 13524 ms, max 444 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 06:21:36 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-15 06:24:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 38 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 19, redundant 3
Fitness: max 0.944(43), min 0.833(1), ave 0.942
Test execution time: sum 192488 ms, max 180223 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 06:24:57 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-15 06:28:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 1 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 19, redundant 1
Fitness: max 0.944(49), min 0.944(49), ave 0.944
Test execution time: sum 193551 ms, max 180237 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 06:28:20 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-15 06:37:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 23 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 17, redundant 0
Fitness: max 1(2), min 0.5(1), ave 0.937
Test execution time: sum 553114 ms, max 360239 ms, min 223 ms
----------------------------------------------------------------

2023-08-15 06:37:42 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-15 06:38:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 48 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 14, redundant 2
Fitness: max 0.944(55), min 0.667(1), ave 0.939
Test execution time: sum 15335 ms, max 412 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 06:38:08 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-15 06:38:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 12 seconds
Variants: generated 100, build-succeeded 46, build-failed 41, syntax-invalid 10, redundant 3
Fitness: max 0.944(45), min 0.5(1), ave 0.935
Test execution time: sum 13952 ms, max 503 ms, min 223 ms
----------------------------------------------------------------

2023-08-15 06:38:32 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-15 06:38:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 34 seconds
Variants: generated 100, build-succeeded 41, build-failed 36, syntax-invalid 16, redundant 7
Fitness: max 0.944(39), min 0.833(1), ave 0.94
Test execution time: sum 11386 ms, max 414 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 06:38:53 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-15 06:39:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 57 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 8, redundant 9
Fitness: max 1(1), min 0.944(49), ave 0.946
Test execution time: sum 13881 ms, max 571 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 06:39:17 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-15 06:39:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 23 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 11, redundant 3
Fitness: max 0.944(47), min 0.778(1), ave 0.941
Test execution time: sum 14836 ms, max 741 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 06:39:42 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-15 06:40:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 50 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 9, redundant 1
Fitness: max 0.944(54), min 0.5(1), ave 0.936
Test execution time: sum 15815 ms, max 515 ms, min 231 ms
----------------------------------------------------------------

2023-08-15 06:40:09 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-15 06:40:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 12 seconds
Variants: generated 100, build-succeeded 40, build-failed 39, syntax-invalid 13, redundant 8
Fitness: max 0.944(39), min 0.833(1), ave 0.942
Test execution time: sum 11780 ms, max 588 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 06:40:31 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-15 06:43:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 38 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 9, redundant 2
Fitness: max 1(3), min 0.611(1), ave 0.938
Test execution time: sum 194912 ms, max 180241 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 06:43:57 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-15 06:47:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 3 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.5(1), ave 0.935
Test execution time: sum 194694 ms, max 180286 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 06:47:23 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-15 06:47:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 28 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 18, redundant 2
Fitness: max 0.944(50), min 0.833(1), ave 0.942
Test execution time: sum 14212 ms, max 444 ms, min 229 ms
----------------------------------------------------------------

2023-08-15 06:47:48 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-15 06:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 53 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 12, redundant 2
Fitness: max 0.944(51), min 0.944(51), ave 0.944
Test execution time: sum 194036 ms, max 180475 ms, min 212 ms
----------------------------------------------------------------

2023-08-15 06:51:13 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-15 06:54:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 21 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 8, redundant 1
Fitness: max 1(1), min 0.833(2), ave 0.942
Test execution time: sum 196218 ms, max 180228 ms, min 212 ms
----------------------------------------------------------------

2023-08-15 06:54:40 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-15 06:58:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 50 seconds
Variants: generated 100, build-succeeded 54, build-failed 37, syntax-invalid 8, redundant 1
Fitness: max 0.944(53), min 0(1), ave 0.927
Test execution time: sum 195728 ms, max 180233 ms, min 98 ms
----------------------------------------------------------------

2023-08-15 06:58:10 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-15 07:13:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 16 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 14, redundant 2
Fitness: max 0.944(53), min 0.5(1), ave 0.936
Test execution time: sum 914554 ms, max 360164 ms, min 222 ms
----------------------------------------------------------------

2023-08-15 07:13:35 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-15 07:25:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 37 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 21, redundant 1
Fitness: max 1(1), min 0.944(41), ave 0.946
Test execution time: sum 731082 ms, max 180464 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 07:25:57 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-15 07:41:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 3 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 12, redundant 2
Fitness: max 0.944(53), min 0.944(53), ave 0.944
Test execution time: sum 914482 ms, max 180300 ms, min 215 ms
----------------------------------------------------------------

2023-08-15 07:41:22 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-15 08:20:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 27 seconds
Variants: generated 100, build-succeeded 49, build-failed 35, syntax-invalid 13, redundant 3
Fitness: max 0.944(47), min 0.444(1), ave 0.926
Test execution time: sum 2353865 ms, max 1800428 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 08:20:46 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-15 08:39:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 50 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 19, redundant 3
Fitness: max 0.944(46), min 0.889(1), ave 0.943
Test execution time: sum 1093464 ms, max 360173 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 08:39:10 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-15 08:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 seconds
Variants: generated 100, build-succeeded 42, build-failed 31, syntax-invalid 24, redundant 3
Fitness: max 0.944(42), min 0.944(42), ave 0.944
Test execution time: sum 551824 ms, max 180352 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 08:48:32 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-15 08:57:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 34 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 19, redundant 1
Fitness: max 1(1), min 0.944(46), ave 0.946
Test execution time: sum 552757 ms, max 180311 ms, min 206 ms
----------------------------------------------------------------

2023-08-15 08:57:54 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-15 09:01:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 56 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 14, redundant 3
Fitness: max 0.944(44), min 0.833(1), ave 0.942
Test execution time: sum 191939 ms, max 180212 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 09:01:16 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-15 09:01:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 23 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 13, redundant 2
Fitness: max 0.944(54), min 0.722(1), ave 0.938
Test execution time: sum 15166 ms, max 436 ms, min 208 ms
----------------------------------------------------------------

2023-08-15 09:01:43 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-15 09:08:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 48 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 11, redundant 4
Fitness: max 0.944(50), min 0.833(1), ave 0.942
Test execution time: sum 373420 ms, max 180275 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 09:08:08 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-15 09:08:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 15 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 6, redundant 3
Fitness: max 1(1), min 0.778(1), ave 0.942
Test execution time: sum 14507 ms, max 412 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 09:08:35 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-15 09:14:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 26 minutes 40 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 16, redundant 3
Fitness: max 0.944(48), min 0.5(1), ave 0.935
Test execution time: sum 373243 ms, max 180443 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 09:14:59 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-15 09:15:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 27 minutes 4 seconds
Variants: generated 100, build-succeeded 45, build-failed 34, syntax-invalid 17, redundant 4
Fitness: max 1(3), min 0.833(1), ave 0.946
Test execution time: sum 12610 ms, max 510 ms, min 223 ms
----------------------------------------------------------------

2023-08-15 09:15:24 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-15 09:18:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 30 minutes 29 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 10, redundant 4
Fitness: max 0.944(48), min 0.944(48), ave 0.944
Test execution time: sum 193422 ms, max 180227 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 09:18:49 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-15 09:22:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 33 minutes 52 seconds
Variants: generated 100, build-succeeded 39, build-failed 41, syntax-invalid 18, redundant 2
Fitness: max 0.944(38), min 0.889(1), ave 0.943
Test execution time: sum 191032 ms, max 180326 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 09:22:12 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-15 09:25:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 18 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 14, redundant 5
Fitness: max 1(1), min 0.611(1), ave 0.939
Test execution time: sum 194042 ms, max 180246 ms, min 230 ms
----------------------------------------------------------------

2023-08-15 09:25:38 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-15 09:26:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 42 seconds
Variants: generated 100, build-succeeded 42, build-failed 40, syntax-invalid 16, redundant 2
Fitness: max 0.944(42), min 0.944(42), ave 0.944
Test execution time: sum 12583 ms, max 473 ms, min 230 ms
----------------------------------------------------------------

2023-08-15 09:26:02 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-15 09:26:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 8 seconds
Variants: generated 100, build-succeeded 44, build-failed 35, syntax-invalid 18, redundant 3
Fitness: max 0.944(42), min 0.778(1), ave 0.938
Test execution time: sum 13034 ms, max 452 ms, min 241 ms
----------------------------------------------------------------

2023-08-15 09:26:28 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-15 09:26:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 31 seconds
Variants: generated 100, build-succeeded 41, build-failed 32, syntax-invalid 23, redundant 4
Fitness: max 0.944(39), min 0.889(2), ave 0.942
Test execution time: sum 11567 ms, max 400 ms, min 226 ms
----------------------------------------------------------------

2023-08-15 09:26:51 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-15 09:27:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 56 seconds
Variants: generated 100, build-succeeded 45, build-failed 33, syntax-invalid 17, redundant 5
Fitness: max 1(1), min 0.833(2), ave 0.941
Test execution time: sum 12686 ms, max 582 ms, min 233 ms
----------------------------------------------------------------

2023-08-15 09:27:16 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-15 09:27:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 39 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 41, syntax-invalid 8, redundant 1
Fitness: max 0.944(48), min 0.556(1), ave 0.936
Test execution time: sum 15222 ms, max 665 ms, min 227 ms
----------------------------------------------------------------

2023-08-15 09:27:44 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-15 09:28:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 39 minutes 52 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 8, redundant 6
Fitness: max 0.944(46), min 0.778(1), ave 0.941
Test execution time: sum 14316 ms, max 471 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 09:28:11 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-15 09:28:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 40 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 10, redundant 5
Fitness: max 0.944(54), min 0.667(1), ave 0.939
Test execution time: sum 15889 ms, max 567 ms, min 233 ms
----------------------------------------------------------------

2023-08-15 09:28:40 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-15 09:29:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 40 minutes 47 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 10, redundant 5
Fitness: max 0.944(45), min 0.5(2), ave 0.921
Test execution time: sum 13994 ms, max 564 ms, min 227 ms
----------------------------------------------------------------

2023-08-15 09:29:06 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-15 09:29:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 14 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 11, redundant 4
Fitness: max 0.944(53), min 0.833(1), ave 0.942
Test execution time: sum 15078 ms, max 447 ms, min 231 ms
----------------------------------------------------------------

2023-08-15 09:29:34 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-15 09:30:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 41 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 9, redundant 6
Fitness: max 0.944(46), min 0.5(1), ave 0.928
Test execution time: sum 14299 ms, max 555 ms, min 235 ms
----------------------------------------------------------------

2023-08-15 09:30:01 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-15 09:30:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 6 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 13, redundant 4
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 13003 ms, max 655 ms, min 234 ms
----------------------------------------------------------------

2023-08-15 09:30:26 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-15 09:30:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 31 seconds
Variants: generated 100, build-succeeded 43, build-failed 39, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 12781 ms, max 510 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 09:30:51 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-15 09:31:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 57 seconds
Variants: generated 100, build-succeeded 43, build-failed 37, syntax-invalid 14, redundant 6
Fitness: max 0.944(42), min 0.833(1), ave 0.942
Test execution time: sum 12622 ms, max 455 ms, min 237 ms
----------------------------------------------------------------

2023-08-15 09:31:17 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-15 09:34:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 46 minutes 25 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 195300 ms, max 180378 ms, min 229 ms
----------------------------------------------------------------

2023-08-15 09:34:45 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-15 09:35:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 46 minutes 54 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 14, redundant 3
Fitness: max 0.944(50), min 0.833(1), ave 0.941
Test execution time: sum 15595 ms, max 603 ms, min 230 ms
----------------------------------------------------------------

2023-08-15 09:35:13 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-15 09:35:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 19 seconds
Variants: generated 100, build-succeeded 45, build-failed 37, syntax-invalid 14, redundant 4
Fitness: max 0.944(42), min 0.611(1), ave 0.932
Test execution time: sum 13071 ms, max 510 ms, min 229 ms
----------------------------------------------------------------

2023-08-15 09:35:39 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-15 09:36:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 49 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 10, redundant 2
Fitness: max 0.944(53), min 0.833(2), ave 0.94
Test execution time: sum 16046 ms, max 601 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 09:36:09 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-15 09:39:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 51 minutes 19 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.937
Test execution time: sum 196011 ms, max 180274 ms, min 210 ms
----------------------------------------------------------------

2023-08-15 09:39:38 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-15 09:40:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 51 minutes 46 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 16, redundant 3
Fitness: max 0.944(45), min 0.833(1), ave 0.942
Test execution time: sum 12807 ms, max 385 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 09:40:05 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-15 09:40:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 52 minutes 11 seconds
Variants: generated 100, build-succeeded 37, build-failed 45, syntax-invalid 18, redundant 0
Fitness: max 0.944(36), min 0.167(1), ave 0.923
Test execution time: sum 10751 ms, max 741 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 09:40:31 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-15 09:40:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 52 minutes 38 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 21, redundant 0
Fitness: max 1(1), min 0.5(1), ave 0.929
Test execution time: sum 13414 ms, max 610 ms, min 237 ms
----------------------------------------------------------------

2023-08-15 09:40:58 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-15 09:41:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 53 minutes 3 seconds
Variants: generated 100, build-succeeded 42, build-failed 39, syntax-invalid 17, redundant 2
Fitness: max 0.944(42), min 0.944(42), ave 0.944
Test execution time: sum 11971 ms, max 448 ms, min 238 ms
----------------------------------------------------------------

2023-08-15 09:41:23 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-15 09:41:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 53 minutes 28 seconds
Variants: generated 100, build-succeeded 36, build-failed 40, syntax-invalid 23, redundant 1
Fitness: max 0.944(34), min 0.5(2), ave 0.92
Test execution time: sum 10505 ms, max 439 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 09:41:47 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-15 09:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 53 minutes 54 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 15, redundant 2
Fitness: max 0.944(44), min 0.5(1), ave 0.935
Test execution time: sum 12957 ms, max 490 ms, min 238 ms
----------------------------------------------------------------

2023-08-15 09:42:14 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-15 09:42:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 54 minutes 24 seconds
Variants: generated 100, build-succeeded 52, build-failed 37, syntax-invalid 8, redundant 3
Fitness: max 0.944(52), min 0.944(52), ave 0.944
Test execution time: sum 15414 ms, max 511 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 09:42:44 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-15 09:58:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 9 minutes 51 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 10, redundant 0
Fitness: max 1(1), min 0.889(2), ave 0.943
Test execution time: sum 914621 ms, max 360197 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 09:58:11 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-15 10:04:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 16 minutes 16 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 20, redundant 2
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 372689 ms, max 180410 ms, min 208 ms
----------------------------------------------------------------

2023-08-15 10:04:35 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-15 10:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 19 minutes 44 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 13, redundant 2
Fitness: max 0.944(53), min 0.556(1), ave 0.937
Test execution time: sum 194862 ms, max 180230 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 10:08:03 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-15 10:20:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 32 minutes 13 seconds
Variants: generated 100, build-succeeded 61, build-failed 33, syntax-invalid 6, redundant 0
Fitness: max 1(1), min 0.778(1), ave 0.943
Test execution time: sum 736600 ms, max 180256 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 10:20:33 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-15 10:26:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 38 minutes 39 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.944(50), ave 0.946
Test execution time: sum 373891 ms, max 180414 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 10:26:59 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-15 10:33:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 45 minutes 6 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 13, redundant 4
Fitness: max 0.944(46), min 0.889(1), ave 0.943
Test execution time: sum 373234 ms, max 180532 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 10:33:26 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-15 10:39:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 51 minutes 33 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 10, redundant 4
Fitness: max 0.944(50), min 0.833(1), ave 0.942
Test execution time: sum 374435 ms, max 180344 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 10:39:52 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-15 10:46:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 57 minutes 59 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 15, redundant 5
Fitness: max 0.944(48), min 0.5(1), ave 0.935
Test execution time: sum 373161 ms, max 180308 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 10:46:19 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-15 10:46:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 58 minutes 27 seconds
Variants: generated 100, build-succeeded 46, build-failed 36, syntax-invalid 15, redundant 3
Fitness: max 1(1), min 0.944(45), ave 0.946
Test execution time: sum 13678 ms, max 618 ms, min 233 ms
----------------------------------------------------------------

2023-08-15 10:46:47 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-15 10:50:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 2 minutes 0 seconds
Variants: generated 100, build-succeeded 61, build-failed 33, syntax-invalid 4, redundant 2
Fitness: max 0.944(60), min 0.889(1), ave 0.944
Test execution time: sum 197429 ms, max 180266 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 10:50:20 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-15 10:56:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 8 minutes 29 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 13, redundant 6
Fitness: max 0.944(51), min 0.5(1), ave 0.929
Test execution time: sum 375229 ms, max 180245 ms, min 235 ms
----------------------------------------------------------------

2023-08-15 10:56:49 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-15 10:57:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 8 minutes 57 seconds
Variants: generated 100, build-succeeded 46, build-failed 41, syntax-invalid 11, redundant 2
Fitness: max 0.944(46), min 0.944(46), ave 0.944
Test execution time: sum 13454 ms, max 430 ms, min 237 ms
----------------------------------------------------------------

2023-08-15 10:57:17 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-15 11:06:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 18 minutes 25 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 19, redundant 1
Fitness: max 1(1), min 0.944(45), ave 0.946
Test execution time: sum 553152 ms, max 180292 ms, min 208 ms
----------------------------------------------------------------

2023-08-15 11:06:45 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-15 11:07:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 18 minutes 53 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 11, redundant 3
Fitness: max 0.944(44), min 0.5(1), ave 0.921
Test execution time: sum 13451 ms, max 490 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 11:07:12 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-15 11:07:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 19 minutes 21 seconds
Variants: generated 100, build-succeeded 45, build-failed 34, syntax-invalid 20, redundant 1
Fitness: max 0.944(44), min 0.833(1), ave 0.942
Test execution time: sum 13722 ms, max 500 ms, min 233 ms
----------------------------------------------------------------

2023-08-15 11:07:40 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-15 11:14:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 25 minutes 50 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 13, redundant 2
Fitness: max 0.944(48), min 0.611(1), ave 0.938
Test execution time: sum 373889 ms, max 180309 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 11:14:09 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-15 11:20:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 32 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 15, redundant 1
Fitness: max 1(1), min 0.889(3), ave 0.942
Test execution time: sum 375576 ms, max 180302 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 11:20:40 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-15 11:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 8 minutes 51 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 17, redundant 1
Fitness: max 0.944(53), min 0.444(1), ave 0.935
Test execution time: sum 2176094 ms, max 1800230 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 11:57:11 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-15 12:03:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 15 minutes 19 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 18, redundant 1
Fitness: max 0.944(42), min 0.833(3), ave 0.937
Test execution time: sum 372938 ms, max 180284 ms, min 217 ms
----------------------------------------------------------------

2023-08-15 12:03:38 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-15 12:07:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 18 minutes 47 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 15, redundant 4
Fitness: max 1(2), min 0.5(3), ave 0.917
Test execution time: sum 193508 ms, max 180403 ms, min 225 ms
----------------------------------------------------------------

2023-08-15 12:07:06 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-15 12:31:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 43 minutes 16 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 18, redundant 1
Fitness: max 0.944(49), min 0.833(1), ave 0.942
Test execution time: sum 1453466 ms, max 180338 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 12:31:36 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-15 12:53:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 4 minutes 41 seconds
Variants: generated 100, build-succeeded 35, build-failed 39, syntax-invalid 23, redundant 3
Fitness: max 0.944(33), min 0.833(1), ave 0.94
Test execution time: sum 1269615 ms, max 180301 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 12:53:01 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-15 13:05:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 17 minutes 4 seconds
Variants: generated 100, build-succeeded 36, build-failed 36, syntax-invalid 28, redundant 0
Fitness: max 0.944(33), min 0.833(1), ave 0.938
Test execution time: sum 729133 ms, max 180234 ms, min 205 ms
----------------------------------------------------------------

2023-08-15 13:05:23 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-15 13:14:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 26 minutes 27 seconds
Variants: generated 100, build-succeeded 38, build-failed 43, syntax-invalid 18, redundant 1
Fitness: max 1(1), min 0.944(37), ave 0.946
Test execution time: sum 549701 ms, max 180359 ms, min 210 ms
----------------------------------------------------------------

2023-08-15 13:14:47 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-15 13:18:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 29 minutes 50 seconds
Variants: generated 100, build-succeeded 28, build-failed 50, syntax-invalid 20, redundant 2
Fitness: max 0.944(27), min 0.889(1), ave 0.942
Test execution time: sum 187886 ms, max 180442 ms, min 225 ms
----------------------------------------------------------------

2023-08-15 13:18:10 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-15 13:36:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 48 minutes 19 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 15, redundant 4
Fitness: max 0.944(44), min 0.889(2), ave 0.942
Test execution time: sum 1093130 ms, max 360281 ms, min 215 ms
----------------------------------------------------------------

2023-08-15 13:36:39 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-15 13:46:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 46 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 20, redundant 2
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 551865 ms, max 180613 ms, min 207 ms
----------------------------------------------------------------

2023-08-15 13:46:06 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-15 14:25:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 11 seconds
Variants: generated 100, build-succeeded 42, build-failed 39, syntax-invalid 16, redundant 3
Fitness: max 0.944(39), min 0.444(1), ave 0.927
Test execution time: sum 2350982 ms, max 1800176 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 14:25:31 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-15 14:25:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 36 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 21, redundant 3
Fitness: max 0.944(38), min 0.944(38), ave 0.944
Test execution time: sum 10744 ms, max 452 ms, min 226 ms
----------------------------------------------------------------

2023-08-15 14:25:56 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-15 14:26:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 3 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 18, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 12089 ms, max 381 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 14:26:23 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-15 14:26:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 31 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 22, redundant 0
Fitness: max 0.944(43), min 0.444(1), ave 0.933
Test execution time: sum 12617 ms, max 622 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 14:26:51 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-15 14:27:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 39 minutes 2 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 13, redundant 2
Fitness: max 1(1), min 0.056(1), ave 0.921
Test execution time: sum 15189 ms, max 492 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 14:27:22 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-15 14:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 42 minutes 29 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 19, redundant 1
Fitness: max 0.944(44), min 0.833(2), ave 0.94
Test execution time: sum 192542 ms, max 180229 ms, min 220 ms
----------------------------------------------------------------

2023-08-15 14:30:49 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-15 14:43:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 54 minutes 56 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 22, redundant 3
Fitness: max 0.944(44), min 0.889(1), ave 0.943
Test execution time: sum 731812 ms, max 360187 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 14:43:16 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-15 14:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 55 minutes 26 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 11, redundant 4
Fitness: max 0.944(50), min 0.444(1), ave 0.933
Test execution time: sum 14326 ms, max 590 ms, min 227 ms
----------------------------------------------------------------

2023-08-15 14:43:46 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-15 14:44:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 55 minutes 53 seconds
Variants: generated 100, build-succeeded 43, build-failed 35, syntax-invalid 18, redundant 4
Fitness: max 0.944(42), min 0.833(1), ave 0.942
Test execution time: sum 12202 ms, max 541 ms, min 223 ms
----------------------------------------------------------------

2023-08-15 14:44:12 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-15 14:44:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 56 minutes 19 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 20, redundant 5
Fitness: max 1(1), min 0.833(1), ave 0.942
Test execution time: sum 11344 ms, max 418 ms, min 222 ms
----------------------------------------------------------------

2023-08-15 14:44:39 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-15 14:45:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 56 minutes 48 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 16, redundant 3
Fitness: max 0.944(44), min 0.222(1), ave 0.926
Test execution time: sum 12630 ms, max 472 ms, min 223 ms
----------------------------------------------------------------

2023-08-15 14:45:08 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-15 14:48:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 16 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 15, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 192394 ms, max 180247 ms, min 223 ms
----------------------------------------------------------------

2023-08-15 14:48:35 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-15 14:55:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 6 minutes 43 seconds
Variants: generated 100, build-succeeded 48, build-failed 35, syntax-invalid 16, redundant 1
Fitness: max 0.944(48), min 0.944(48), ave 0.944
Test execution time: sum 372527 ms, max 180294 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 14:55:03 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-15 15:01:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 13 minutes 17 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 14, redundant 3
Fitness: max 0.944(47), min 0.833(2), ave 0.939
Test execution time: sum 375726 ms, max 360442 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 15:01:37 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-15 15:14:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 25 minutes 50 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 14, redundant 1
Fitness: max 0.944(52), min 0.944(52), ave 0.944
Test execution time: sum 734669 ms, max 180403 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 15:14:10 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-15 15:29:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 41 minutes 19 seconds
Variants: generated 100, build-succeeded 54, build-failed 23, syntax-invalid 20, redundant 3
Fitness: max 1(1), min 0.778(1), ave 0.938
Test execution time: sum 914294 ms, max 720308 ms, min 208 ms
----------------------------------------------------------------

2023-08-15 15:29:39 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-15 15:30:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 41 minutes 50 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0.944(51), ave 0.946
Test execution time: sum 14961 ms, max 571 ms, min 215 ms
----------------------------------------------------------------

2023-08-15 15:30:10 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-15 15:33:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 45 minutes 21 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 18, redundant 1
Fitness: max 0.944(44), min 0.889(2), ave 0.942
Test execution time: sum 193258 ms, max 180293 ms, min 210 ms
----------------------------------------------------------------

2023-08-15 15:33:41 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-15 15:40:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 51 minutes 49 seconds
Variants: generated 100, build-succeeded 51, build-failed 37, syntax-invalid 10, redundant 2
Fitness: max 0.944(51), min 0.944(51), ave 0.944
Test execution time: sum 373650 ms, max 180462 ms, min 207 ms
----------------------------------------------------------------

2023-08-15 15:40:09 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-15 15:46:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 58 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 24, syntax-invalid 16, redundant 5
Fitness: max 1(1), min 0.722(1), ave 0.941
Test execution time: sum 375350 ms, max 180438 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 15:46:40 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-15 15:59:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 10 minutes 48 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 19, redundant 4
Fitness: max 0.944(40), min 0.667(1), ave 0.935
Test execution time: sum 731698 ms, max 180420 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 15:59:08 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-15 16:17:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 29 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 9, redundant 3
Fitness: max 0.944(54), min 0.889(1), ave 0.943
Test execution time: sum 1095280 ms, max 180437 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 16:17:40 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-15 16:21:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 32 minutes 52 seconds
Variants: generated 100, build-succeeded 50, build-failed 36, syntax-invalid 12, redundant 2
Fitness: max 0.944(50), min 0.944(50), ave 0.944
Test execution time: sum 194041 ms, max 180251 ms, min 210 ms
----------------------------------------------------------------

2023-08-15 16:21:12 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-15 16:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 39 minutes 19 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 13, redundant 3
Fitness: max 0.944(44), min 0.5(1), ave 0.931
Test execution time: sum 372001 ms, max 180297 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 16:27:39 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-15 16:34:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 45 minutes 52 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 374874 ms, max 180276 ms, min 207 ms
----------------------------------------------------------------

2023-08-15 16:34:12 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-15 16:46:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 58 minutes 22 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 15, redundant 3
Fitness: max 0.944(54), min 0.833(1), ave 0.942
Test execution time: sum 734113 ms, max 180286 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 16:46:42 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-15 16:59:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 10 minutes 52 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0(1), ave 0.927
Test execution time: sum 733858 ms, max 180352 ms, min 201 ms
----------------------------------------------------------------

2023-08-15 16:59:12 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-15 17:08:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 20 minutes 30 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 12, redundant 7
Fitness: max 1(2), min 0.889(2), ave 0.944
Test execution time: sum 555949 ms, max 360143 ms, min 245 ms
----------------------------------------------------------------

2023-08-15 17:08:50 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-15 17:18:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 30 minutes 7 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 9, redundant 5
Fitness: max 1(1), min 0.444(1), ave 0.926
Test execution time: sum 555702 ms, max 180461 ms, min 248 ms
----------------------------------------------------------------

2023-08-15 17:18:27 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-15 17:31:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 42 minutes 43 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 18, redundant 3
Fitness: max 0.944(46), min 0.444(1), ave 0.916
Test execution time: sum 735274 ms, max 180322 ms, min 225 ms
----------------------------------------------------------------

2023-08-15 17:31:03 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-15 17:31:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 43 minutes 9 seconds
Variants: generated 100, build-succeeded 45, build-failed 37, syntax-invalid 12, redundant 6
Fitness: max 1(1), min 0.944(44), ave 0.946
Test execution time: sum 11329 ms, max 446 ms, min 208 ms
----------------------------------------------------------------

2023-08-15 17:31:29 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-15 17:34:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 46 minutes 36 seconds
Variants: generated 100, build-succeeded 45, build-failed 35, syntax-invalid 16, redundant 4
Fitness: max 1(2), min 0.5(1), ave 0.935
Test execution time: sum 191620 ms, max 180218 ms, min 206 ms
----------------------------------------------------------------

2023-08-15 17:34:56 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-15 17:35:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 47 minutes 3 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 19, redundant 5
Fitness: max 0.944(42), min 0.5(1), ave 0.932
Test execution time: sum 11129 ms, max 406 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 17:35:23 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-15 17:35:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 47 minutes 29 seconds
Variants: generated 100, build-succeeded 40, build-failed 32, syntax-invalid 19, redundant 9
Fitness: max 1(1), min 0.944(39), ave 0.946
Test execution time: sum 10457 ms, max 388 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 17:35:49 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-15 17:39:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 50 minutes 56 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 12, redundant 8
Fitness: max 1(2), min 0(1), ave 0.927
Test execution time: sum 192371 ms, max 180309 ms, min 87 ms
----------------------------------------------------------------

2023-08-15 17:39:16 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-15 17:39:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 51 minutes 24 seconds
Variants: generated 100, build-succeeded 45, build-failed 32, syntax-invalid 15, redundant 8
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 11488 ms, max 446 ms, min 207 ms
----------------------------------------------------------------

2023-08-15 17:39:44 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-15 17:40:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 51 minutes 52 seconds
Variants: generated 100, build-succeeded 44, build-failed 39, syntax-invalid 11, redundant 6
Fitness: max 1(1), min 0.944(43), ave 0.946
Test execution time: sum 12014 ms, max 439 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 17:40:12 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-15 17:40:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 52 minutes 21 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 12, redundant 6
Fitness: max 0.944(47), min 0.944(47), ave 0.944
Test execution time: sum 12646 ms, max 549 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 17:40:41 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-15 17:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 52 minutes 51 seconds
Variants: generated 100, build-succeeded 50, build-failed 35, syntax-invalid 11, redundant 4
Fitness: max 1(2), min 0.833(2), ave 0.942
Test execution time: sum 13134 ms, max 417 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 17:41:11 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-15 17:41:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 53 minutes 20 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 12, redundant 7
Fitness: max 0.944(47), min 0.611(1), ave 0.938
Test execution time: sum 12428 ms, max 447 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 17:41:40 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-15 17:54:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 6 minutes 0 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 9, redundant 7
Fitness: max 0.944(51), min 0.778(1), ave 0.937
Test execution time: sum 737370 ms, max 720201 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 17:54:20 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-15 17:54:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 6 minutes 32 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 14, redundant 3
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 12120 ms, max 413 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 17:54:52 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-15 18:25:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 4 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 12, redundant 7
Fitness: max 0.944(48), min 0.444(1), ave 0.932
Test execution time: sum 1813839 ms, max 1800226 ms, min 220 ms
----------------------------------------------------------------

2023-08-15 18:25:24 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-15 18:25:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 35 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 12, redundant 5
Fitness: max 0.944(50), min 0.944(50), ave 0.944
Test execution time: sum 14022 ms, max 447 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 18:25:55 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-15 18:26:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 38 minutes 8 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 6, redundant 9
Fitness: max 1(1), min 0.833(1), ave 0.942
Test execution time: sum 14755 ms, max 494 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 18:26:28 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-15 18:27:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 38 minutes 43 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 13, redundant 11
Fitness: max 0.944(45), min 0.5(1), ave 0.931
Test execution time: sum 14899 ms, max 515 ms, min 234 ms
----------------------------------------------------------------

2023-08-15 18:27:03 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-15 18:57:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 9 minutes 15 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 7, redundant 7
Fitness: max 0.944(48), min 0.444(1), ave 0.93
Test execution time: sum 1814103 ms, max 1800205 ms, min 227 ms
----------------------------------------------------------------

2023-08-15 18:57:35 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-15 18:58:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 9 minutes 48 seconds
Variants: generated 100, build-succeeded 48, build-failed 35, syntax-invalid 5, redundant 12
Fitness: max 0.944(47), min 0.5(1), ave 0.935
Test execution time: sum 14141 ms, max 612 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 18:58:08 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-15 19:01:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 13 minutes 21 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 8, redundant 10
Fitness: max 0.944(48), min 0.5(2), ave 0.922
Test execution time: sum 194403 ms, max 180195 ms, min 220 ms
----------------------------------------------------------------

2023-08-15 19:01:41 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-15 19:02:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 13 minutes 50 seconds
Variants: generated 100, build-succeeded 44, build-failed 36, syntax-invalid 11, redundant 9
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 12068 ms, max 437 ms, min 226 ms
----------------------------------------------------------------

2023-08-15 19:02:11 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-15 19:02:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 14 minutes 24 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 7, redundant 7
Fitness: max 0.944(52), min 0.944(52), ave 0.944
Test execution time: sum 14485 ms, max 609 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 19:02:44 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-15 19:03:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 14 minutes 54 seconds
Variants: generated 100, build-succeeded 44, build-failed 36, syntax-invalid 16, redundant 4
Fitness: max 0.944(43), min 0.833(1), ave 0.942
Test execution time: sum 12441 ms, max 542 ms, min 225 ms
----------------------------------------------------------------

2023-08-15 19:03:14 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-15 19:03:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 15 minutes 24 seconds
Variants: generated 100, build-succeeded 43, build-failed 35, syntax-invalid 15, redundant 7
Fitness: max 1(1), min 0.5(2), ave 0.922
Test execution time: sum 12242 ms, max 446 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 19:03:44 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-15 19:04:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 15 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 8, redundant 5
Fitness: max 1(3), min 0.944(54), ave 0.947
Test execution time: sum 15858 ms, max 434 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 19:04:19 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-15 19:04:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 16 minutes 33 seconds
Variants: generated 100, build-succeeded 43, build-failed 39, syntax-invalid 14, redundant 4
Fitness: max 0.944(41), min 0.5(1), ave 0.932
Test execution time: sum 12197 ms, max 443 ms, min 231 ms
----------------------------------------------------------------

2023-08-15 19:04:53 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-15 19:05:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 17 minutes 5 seconds
Variants: generated 100, build-succeeded 44, build-failed 39, syntax-invalid 11, redundant 6
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 11914 ms, max 408 ms, min 227 ms
----------------------------------------------------------------

2023-08-15 19:05:25 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-15 19:05:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 17 minutes 37 seconds
Variants: generated 100, build-succeeded 48, build-failed 35, syntax-invalid 9, redundant 8
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 13269 ms, max 454 ms, min 231 ms
----------------------------------------------------------------

2023-08-15 19:05:57 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-15 19:06:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 18 minutes 13 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 9, redundant 3
Fitness: max 0.944(55), min 0.944(55), ave 0.944
Test execution time: sum 15041 ms, max 451 ms, min 228 ms
----------------------------------------------------------------

2023-08-15 19:06:33 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-15 19:13:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 24 minutes 52 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 13, redundant 1
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 376687 ms, max 360231 ms, min 235 ms
----------------------------------------------------------------

2023-08-15 19:13:13 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-15 19:16:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 28 minutes 34 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 5, redundant 2
Fitness: max 0.944(62), min 0.611(1), ave 0.938
Test execution time: sum 198693 ms, max 180301 ms, min 210 ms
----------------------------------------------------------------

2023-08-15 19:16:54 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-15 19:47:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 59 minutes 7 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 13, redundant 1
Fitness: max 1(2), min 0.444(1), ave 0.937
Test execution time: sum 1813699 ms, max 1800236 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 19:47:27 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-15 19:48:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 59 minutes 43 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 5, redundant 3
Fitness: max 1(1), min 0.944(59), ave 0.945
Test execution time: sum 16329 ms, max 442 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 19:48:03 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-15 19:48:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 15 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 11, redundant 3
Fitness: max 0.944(47), min 0.556(1), ave 0.936
Test execution time: sum 12670 ms, max 396 ms, min 221 ms
----------------------------------------------------------------

2023-08-15 19:48:35 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-15 19:49:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 48 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 13, redundant 8
Fitness: max 0.944(50), min 0.944(50), ave 0.944
Test execution time: sum 13930 ms, max 499 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 19:49:08 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-15 19:58:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 10 minutes 18 seconds
Variants: generated 100, build-succeeded 46, build-failed 36, syntax-invalid 14, redundant 4
Fitness: max 0.944(44), min 0.722(1), ave 0.938
Test execution time: sum 552027 ms, max 360157 ms, min 206 ms
----------------------------------------------------------------

2023-08-15 19:58:38 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-15 19:59:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 10 minutes 53 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 10, redundant 1
Fitness: max 0.944(57), min 0.833(1), ave 0.942
Test execution time: sum 15668 ms, max 476 ms, min 212 ms
----------------------------------------------------------------

2023-08-15 19:59:13 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-15 19:59:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 11 minutes 23 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 17, redundant 3
Fitness: max 1(2), min 0.944(44), ave 0.947
Test execution time: sum 12166 ms, max 534 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 19:59:43 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-15 20:00:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 11 minutes 55 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 7, redundant 8
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 13277 ms, max 348 ms, min 212 ms
----------------------------------------------------------------

2023-08-15 20:00:15 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-15 20:00:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 12 minutes 28 seconds
Variants: generated 100, build-succeeded 52, build-failed 37, syntax-invalid 9, redundant 2
Fitness: max 0.944(52), min 0.944(52), ave 0.944
Test execution time: sum 13303 ms, max 346 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 20:00:48 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-15 20:01:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 13 minutes 5 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 7, redundant 5
Fitness: max 0.944(60), min 0.944(60), ave 0.944
Test execution time: sum 16938 ms, max 547 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 20:01:25 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-15 20:01:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 13 minutes 36 seconds
Variants: generated 100, build-succeeded 47, build-failed 40, syntax-invalid 10, redundant 3
Fitness: max 0.944(46), min 0.5(1), ave 0.935
Test execution time: sum 12511 ms, max 497 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 20:01:56 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-15 20:02:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 14 minutes 13 seconds
Variants: generated 100, build-succeeded 63, build-failed 32, syntax-invalid 1, redundant 4
Fitness: max 0.944(61), min 0.444(2), ave 0.929
Test execution time: sum 16403 ms, max 398 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 20:02:33 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-15 20:03:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 14 minutes 47 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 8, redundant 8
Fitness: max 0.944(52), min 0.778(1), ave 0.941
Test execution time: sum 14157 ms, max 388 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 20:03:07 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-15 20:03:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 15 minutes 22 seconds
Variants: generated 100, build-succeeded 54, build-failed 37, syntax-invalid 4, redundant 5
Fitness: max 1(1), min 0.611(1), ave 0.939
Test execution time: sum 14525 ms, max 487 ms, min 215 ms
----------------------------------------------------------------

2023-08-15 20:03:42 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-15 20:10:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 21 minutes 55 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 6, redundant 6
Fitness: max 0.944(51), min 0.889(1), ave 0.943
Test execution time: sum 373531 ms, max 360140 ms, min 213 ms
----------------------------------------------------------------

2023-08-15 20:10:15 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-15 20:10:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 22 minutes 32 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 6, redundant 4
Fitness: max 1(1), min 0.944(61), ave 0.945
Test execution time: sum 16741 ms, max 416 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 20:10:52 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-15 20:14:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 26 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 35, syntax-invalid 5, redundant 4
Fitness: max 0.944(55), min 0.833(1), ave 0.942
Test execution time: sum 194612 ms, max 180269 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 20:14:26 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-15 20:21:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 32 minutes 40 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 8, redundant 2
Fitness: max 0.944(54), min 0.889(1), ave 0.943
Test execution time: sum 374541 ms, max 360167 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 20:21:01 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-15 20:24:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 36 minutes 16 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 7, redundant 2
Fitness: max 1(1), min 0.833(3), ave 0.94
Test execution time: sum 195995 ms, max 180322 ms, min 212 ms
----------------------------------------------------------------

2023-08-15 20:24:36 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-15 20:25:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 36 minutes 50 seconds
Variants: generated 100, build-succeeded 53, build-failed 34, syntax-invalid 7, redundant 6
Fitness: max 0.944(53), min 0.944(53), ave 0.944
Test execution time: sum 13781 ms, max 386 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 20:25:10 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-15 20:25:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 37 minutes 23 seconds
Variants: generated 100, build-succeeded 46, build-failed 38, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0.944(45), ave 0.946
Test execution time: sum 12460 ms, max 475 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 20:25:43 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-15 20:26:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 37 minutes 59 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 8, redundant 5
Fitness: max 1(1), min 0.944(54), ave 0.945
Test execution time: sum 15296 ms, max 474 ms, min 215 ms
----------------------------------------------------------------

2023-08-15 20:26:19 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-15 20:26:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 38 minutes 36 seconds
Variants: generated 100, build-succeeded 50, build-failed 39, syntax-invalid 9, redundant 2
Fitness: max 0.944(50), min 0.944(50), ave 0.944
Test execution time: sum 14792 ms, max 538 ms, min 222 ms
----------------------------------------------------------------

2023-08-15 20:26:56 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-15 20:51:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 3 minutes 14 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 7, redundant 4
Fitness: max 1(2), min 0.833(2), ave 0.942
Test execution time: sum 1455944 ms, max 360185 ms, min 219 ms
----------------------------------------------------------------

2023-08-15 20:51:34 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-15 21:01:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 12 minutes 48 seconds
Variants: generated 100, build-succeeded 49, build-failed 38, syntax-invalid 12, redundant 1
Fitness: max 0.944(47), min 0.833(1), ave 0.941
Test execution time: sum 553276 ms, max 180379 ms, min 217 ms
----------------------------------------------------------------

2023-08-15 21:01:09 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-15 21:07:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 19 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 11, redundant 6
Fitness: max 0.944(49), min 0.833(1), ave 0.942
Test execution time: sum 374019 ms, max 180308 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 21:07:45 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-15 21:14:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 26 minutes 0 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 12, redundant 3
Fitness: max 0.944(51), min 0.889(1), ave 0.943
Test execution time: sum 373882 ms, max 180295 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 21:14:20 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-15 21:35:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 47 minutes 35 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 12, redundant 5
Fitness: max 1(1), min 0.611(1), ave 0.939
Test execution time: sum 1274388 ms, max 180394 ms, min 216 ms
----------------------------------------------------------------

2023-08-15 21:35:56 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-15 21:48:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 10 seconds
Variants: generated 100, build-succeeded 54, build-failed 38, syntax-invalid 6, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.935
Test execution time: sum 734137 ms, max 180319 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 21:48:30 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-15 22:27:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 21 minutes 46 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 12, redundant 1
Fitness: max 0.944(54), min 0.833(2), ave 0.94
Test execution time: sum 1275311 ms, max 360327 ms, min 217 ms
----------------------------------------------------------------

2023-08-15 22:27:08 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-15 22:36:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 31 minutes 21 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 12, redundant 2
Fitness: max 0.944(49), min 0.833(2), ave 0.939
Test execution time: sum 554048 ms, max 180270 ms, min 214 ms
----------------------------------------------------------------

2023-08-15 22:36:43 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-15 22:46:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 40 minutes 57 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 1(2), min 0.556(1), ave 0.939
Test execution time: sum 554490 ms, max 180275 ms, min 215 ms
----------------------------------------------------------------

2023-08-15 22:46:18 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-15 22:58:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 53 minutes 35 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 9, redundant 1
Fitness: max 1(1), min 0.444(1), ave 0.919
Test execution time: sum 735392 ms, max 180368 ms, min 205 ms
----------------------------------------------------------------

2023-08-15 22:58:56 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-15 23:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 3 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.938
Test execution time: sum 553356 ms, max 180228 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 23:08:27 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-15 23:14:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 9 minutes 34 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 21, redundant 1
Fitness: max 0.944(46), min 0.944(46), ave 0.944
Test execution time: sum 371169 ms, max 180229 ms, min 204 ms
----------------------------------------------------------------

2023-08-15 23:14:56 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-15 23:27:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 22 minutes 6 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 10, redundant 1
Fitness: max 0.944(55), min 0.5(1), ave 0.933
Test execution time: sum 733404 ms, max 360135 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 23:27:27 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-15 23:36:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 31 minutes 36 seconds
Variants: generated 100, build-succeeded 50, build-failed 35, syntax-invalid 15, redundant 0
Fitness: max 0.944(50), min 0.944(50), ave 0.944
Test execution time: sum 552260 ms, max 180393 ms, min 211 ms
----------------------------------------------------------------

2023-08-15 23:36:58 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-15 23:37:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 32 minutes 5 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 15, redundant 4
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 10761 ms, max 327 ms, min 207 ms
----------------------------------------------------------------

2023-08-15 23:37:26 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-15 23:46:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 41 minutes 35 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 14, redundant 0
Fitness: max 0.944(50), min 0.833(2), ave 0.94
Test execution time: sum 552364 ms, max 180274 ms, min 209 ms
----------------------------------------------------------------

2023-08-15 23:46:56 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-15 23:50:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 45 minutes 7 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 10, redundant 3
Fitness: max 1(1), min 0.944(55), ave 0.945
Test execution time: sum 193555 ms, max 180234 ms, min 207 ms
----------------------------------------------------------------

2023-08-15 23:50:28 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-15 23:50:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 45 minutes 37 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 14, redundant 1
Fitness: max 0.944(54), min 0.944(54), ave 0.944
Test execution time: sum 12453 ms, max 332 ms, min 204 ms
----------------------------------------------------------------

2023-08-15 23:50:58 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-15 23:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 49 minutes 9 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 9, redundant 2
Fitness: max 0.944(58), min 0.889(1), ave 0.944
Test execution time: sum 194033 ms, max 180237 ms, min 206 ms
----------------------------------------------------------------

2023-08-15 23:54:31 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-16 00:25:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 19 minutes 42 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 7, redundant 1
Fitness: max 0.944(57), min 0.444(1), ave 0.922
Test execution time: sum 1814336 ms, max 1800185 ms, min 208 ms
----------------------------------------------------------------

2023-08-16 00:25:04 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-16 00:25:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 20 minutes 14 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 6, redundant 3
Fitness: max 0.944(54), min 0.556(1), ave 0.937
Test execution time: sum 12958 ms, max 374 ms, min 209 ms
----------------------------------------------------------------

2023-08-16 00:25:35 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-16 00:29:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 23 minutes 46 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 8, redundant 2
Fitness: max 0.944(54), min 0.5(1), ave 0.935
Test execution time: sum 194144 ms, max 180229 ms, min 208 ms
----------------------------------------------------------------

2023-08-16 00:29:08 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-16 00:29:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 24 minutes 18 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 7, redundant 2
Fitness: max 0.944(54), min 0.833(1), ave 0.942
Test execution time: sum 13215 ms, max 375 ms, min 206 ms
----------------------------------------------------------------

2023-08-16 00:29:40 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-16 00:30:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 24 minutes 50 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 7, redundant 3
Fitness: max 0.944(56), min 0.944(56), ave 0.944
Test execution time: sum 13461 ms, max 402 ms, min 206 ms
----------------------------------------------------------------

2023-08-16 00:30:12 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-16 00:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 25 minutes 23 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 7, redundant 5
Fitness: max 0.944(58), min 0.889(1), ave 0.944
Test execution time: sum 14067 ms, max 333 ms, min 208 ms
----------------------------------------------------------------

2023-08-16 00:30:44 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-16 00:40:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 34 minutes 58 seconds
Variants: generated 100, build-succeeded 60, build-failed 35, syntax-invalid 4, redundant 1
Fitness: max 1(1), min 0.556(1), ave 0.938
Test execution time: sum 554614 ms, max 360138 ms, min 206 ms
----------------------------------------------------------------

2023-08-16 00:40:19 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-16 00:40:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 35 minutes 10 seconds
Variants: generated 49, build-succeeded 10, build-failed 36, syntax-invalid 3, redundant 0
Fitness: max 1(1), min 0.944(9), ave 0.95
Test execution time: sum 2506 ms, max 327 ms, min 214 ms
----------------------------------------------------------------

2023-08-16 00:40:32 [main] [INFO]  KGenProgMain - GA stopped
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v56)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v56)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v56)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v56)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v408)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v408)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v408)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v408)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v1109)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v1109)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,7 +1052,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1086,9 +1085,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1134,11 +1131,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
                 j -= 4;
             }
             return true;
@@ -1412,7 +1406,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v1109)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v1109)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:36 [main] [INFO]  PatchLogExporter - patch (v1109)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1271,7 +1269,6 @@
      */
     private void dqds(final int start, final int end) {
 
-        eMin = work[4 * start + pingPong + 4];
         double d = work[4 * start + pingPong] - tau;
         dMin = d;
         dMin1 = -work[4 * start + pingPong];
@@ -1412,7 +1409,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1431)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1431)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,7 +955,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    int blockIndex = 0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1383,7 +1381,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1431)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1431)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1431)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1686)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,12 +1136,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1380,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1686)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1686)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1686)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1786)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1786)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,7 +1381,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1410,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1786)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1786)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1786)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,8 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1383,7 +1381,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1409,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1858)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,7 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1858)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1412,7 +1410,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1858)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1858)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1858)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,8 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1870)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1888)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1888)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1271,7 +1270,6 @@
      */
     private void dqds(final int start, final int end) {
 
-        eMin = work[4 * start + pingPong + 4];
         double d = work[4 * start + pingPong] - tau;
         dMin = d;
         dMin1 = -work[4 * start + pingPong];
@@ -1358,7 +1356,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1408,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1888)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1888)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1888)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1963)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,8 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1963)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1086,9 +1085,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1380,7 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            findEigenVectors();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1963)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1963)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1963)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1975)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,8 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1975)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,8 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1975)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1975)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v1975)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2368)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2368)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,9 +1380,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1392,6 +1388,7 @@
             dN1 = dN2 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+			int k = 0;
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2368)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2368)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2368)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2395)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2395)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,10 +1136,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,7 +1380,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1409,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2395)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2395)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2395)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2733)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,12 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2733)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2733)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2733)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2733)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2778)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2778)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,9 +1381,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1408,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2778)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2778)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v2778)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3167)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3167)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1408,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3167)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3167)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3167)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,10 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1059,7 +1058,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,9 +1378,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1392,6 +1387,7 @@
             dN1 = dN2 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+			int k = 0;
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3594)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3594)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1337,7 +1334,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1358,7 +1354,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3594)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3594)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3594)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3596)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3596)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1358,7 +1356,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,8 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1386,7 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+            int k = 0;
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3596)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3596)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3596)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3612)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,9 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3612)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,10 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    double z = 1;
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1408,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3612)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3941)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,10 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3941)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1019,7 +1018,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1136,10 +1134,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,9 +1377,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1401,7 +1395,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3941)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3941)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v3941)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4248)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,10 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4248)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1337,7 +1331,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,7 +1374,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4248)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4248)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4248)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4729)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,12 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4729)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
+                    findEigenVectors();
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1133,7 +1133,7 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            for (int i = 0; i > 0; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
@@ -1381,7 +1381,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1392,6 +1391,7 @@
             dN1 = dN2 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+			int k = 0;
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,8 +1401,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4729)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4729)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v4729)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5197)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,13 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5197)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,10 +1136,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1357,7 +1355,6 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1383,7 +1380,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5197)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5197)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5197)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,12 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1392,6 +1388,7 @@
             dN1 = dN2 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+			int k = 0;
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1400,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5341)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,12 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5341)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    int outIndex = 0;
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,10 +1381,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1402,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5341)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5341)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5341)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,11 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1060,7 +1060,6 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,9 +1379,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,11 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1053,9 +1052,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,10 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,10 +1375,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1403,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v5630)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6010)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,15 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6010)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1135,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    double max = 0;
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1380,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6010)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6010)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6010)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6839)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,13 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6839)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -957,7 +956,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,9 +1378,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6839)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6839)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v6839)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7040)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,13 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7040)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,7 +1132,7 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
+                for (int k = 0; j < n; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
@@ -1337,7 +1335,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,7 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7040)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7040)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7040)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7448)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,12 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7448)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1133,15 +1132,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
-            return true;
+            for (int i = 0; i < j; i += 4)
+				Arrays.sort(realEigenvalues);
         }
         return false;
     }
@@ -1381,17 +1373,14 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,7 +1393,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7448)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7448)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7448)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7743)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,8 +243,13 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
+        double trace = 0;
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7743)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,8 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1381,10 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1397,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7743)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7743)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v7743)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8225)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,16 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8225)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1339,7 +1338,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8225)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8322)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,16 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8322)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,10 +1378,9 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
+			throw new SingularMatrixException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1399,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8322)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8322)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8322)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8501)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,14 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8501)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,8 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1019,7 +1016,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1134,11 +1130,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					break;
                 j -= 4;
             }
             return true;
@@ -1382,7 +1375,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1383,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8501)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8501)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8501)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,15 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -965,7 +963,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1019,7 +1016,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1339,7 +1334,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1382,7 +1376,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:37 [main] [INFO]  PatchLogExporter - patch (v8647)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9038)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,16 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9038)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1389,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1408,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9038)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9038)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9038)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9416)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,8 +243,17 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
+        double trace = 0;
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9416)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,14 +1382,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9416)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9416)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9416)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9810)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,15 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9810)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1019,7 +1018,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1136,10 +1134,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1359,7 +1355,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,7 +1376,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9810)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9810)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v9810)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10189)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,15 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10189)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1019,7 +1018,7 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
+                    tType = 0;
                     work[k - 7] = tmp;
                 }
 
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1358,8 +1355,7 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
-                    eMin = 0.0;
+                    cachedV = null;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,7 +1377,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1386,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10189)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10189)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10189)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10199)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,15 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10199)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1338,7 +1335,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1359,7 +1355,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,7 +1376,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10199)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10199)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10199)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10502)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,16 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10502)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1134,14 +1132,10 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+                for (int k = 0; k < 4; k += step)
+					return false;
             }
-            return true;
+            double gamma = 0;
         }
         return false;
     }
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10502)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10502)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10502)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10808)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,8 +243,20 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
+        double trace = 0;
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10808)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,9 +955,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1359,7 +1356,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,7 +1377,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1386,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10808)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10827)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,8 +243,14 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
+        double trace = 0;
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10827)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -956,8 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1132,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
+            double gamma = 0;
         }
         return false;
     }
@@ -1339,7 +1333,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1358,7 +1351,7 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
+                    cachedV = null;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10827)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10827)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v10827)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,18 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,10 +1378,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1399,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,18 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,9 +955,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1020,6 +1018,7 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
+					work[4 * deflatedEnd - 8] = sigma + work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1359,7 +1357,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,17 +1378,14 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1405,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11847)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,20 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11847)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1134,11 +1133,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					return true;
                 j -= 4;
             }
             return true;
@@ -1383,7 +1379,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11847)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11847)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v11847)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,22 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12434)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,19 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12434)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,11 +1135,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1338,7 +1337,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1381,8 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12434)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12434)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12434)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12504)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,17 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12504)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,8 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1056,6 +1053,7 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
+				int mIndex = 0;
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1339,7 +1336,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1382,16 +1378,13 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12504)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12504)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12504)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12830)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,21 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12830)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -957,7 +956,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,11 +1133,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12830)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12830)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v12830)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13333)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,22 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13333)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,9 +955,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1406,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13333)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13333)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13333)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13506)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,26 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13506)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1278,7 +1276,8 @@
 
         if (pingPong == 0) {
             for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {
-                work[j4 - 2] = d + work[j4 - 1];
+                int outIndex = 0;
+				work[j4 - 2] = d + work[j4 - 1];
                 final double tmp = work[j4 + 1] / work[j4 - 2];
                 d = d * tmp - tau;
                 dMin = Math.min(dMin, d);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13506)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13506)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13506)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13615)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,23 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13615)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,11 +1134,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,7 +1380,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13615)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13644)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,19 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13644)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,13 +1133,13 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1338,7 +1336,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13644)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13723)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,22 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13723)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1134,12 +1133,12 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
+                for (int k = 0; j < n; k += step) {
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1409,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13723)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13940)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,23 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13940)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1339,7 +1336,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1358,7 +1354,7 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
+                    cachedV = null;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13940)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13940)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v13940)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,24 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -910,7 +910,6 @@
                             work[i + 2]  = -sigma;
                             split        = i / 4;
                             diagMax      = 0;
-                            offDiagMin   = work[i + 6];
                             previousEMin = work[i + 7];
                         } else {
                             diagMax      = Math.max(diagMax, work[i + 4]);
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1052,7 +1050,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,8 +1132,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14009)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14039)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,20 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14039)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -957,7 +956,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1059,7 +1058,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1135,11 +1133,11 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1339,7 +1337,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1358,7 +1355,7 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
+                    cachedV = null;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1382,9 +1379,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14039)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14039)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14039)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14247)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14247)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1338,7 +1335,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14339)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,22 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14339)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1059,7 +1059,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1135,11 +1134,11 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1339,7 +1338,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1358,7 +1356,7 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
+                    cachedV = null;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1382,7 +1380,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14339)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14339)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14339)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14344)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,24 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14344)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1052,7 +1052,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14344)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14344)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14344)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14530)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,21 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14530)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,9 +954,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,8 +1132,9 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14530)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,21 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,9 +954,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,8 +1132,9 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1389,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14741)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14741)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1383,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14741)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14741)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:38 [main] [INFO]  PatchLogExporter - patch (v14741)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v15334)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v15334)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1133,14 +1132,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            for (int i = 0; i < j; i += 4)
+				eMin = 0.0;
             return true;
         }
         return false;
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v15334)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v15334)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v15334)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16142)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,28 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16142)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1059,7 +1059,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1135,8 +1134,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16142)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16142)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16142)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,27 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -957,7 +956,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,8 +1134,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16204)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16222)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16222)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,10 +953,9 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,8 +1133,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    double gam;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1562,7 +1560,6 @@
                 }
 
                 if (a2 < cnst1) {
-                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
                 }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16222)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16222)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16222)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16243)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,24 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16243)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,10 +954,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1056,7 +1054,8 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
+                this.main = main.clone();
+				work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,12 +1135,11 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1339,7 +1337,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1562,7 +1559,6 @@
                 }
 
                 if (a2 < cnst1) {
-                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
                 }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16243)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16243)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16243)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16506)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,24 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16506)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,13 +1133,14 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16506)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16506)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16506)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,28 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,7 +1052,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,11 +1133,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					Arrays.sort(realEigenvalues);
                 j -= 4;
             }
             return true;
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16518)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16706)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,24 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16706)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,7 +1052,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,8 +1134,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1335,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1384,7 +1382,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16706)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16706)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16706)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16906)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,23 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16906)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -957,7 +956,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    final double tmp = work[i + 2] / work[j];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,11 +1132,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					break;
                 j -= 4;
             }
             return true;
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16906)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16906)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16906)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16929)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16929)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,8 +1135,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,14 +1386,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,14 +1404,12 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16929)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16929)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v16929)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17035)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,28 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17035)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1135,8 +1134,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17035)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17035)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17035)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,26 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,13 +1133,12 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,14 +1381,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17527)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17545)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,24 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17545)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1135,8 +1134,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1385,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17545)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17545)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17545)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17612)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -244,7 +244,28 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17612)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v17612)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18225)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,26 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18225)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,13 +1133,15 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18225)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1135,8 +1134,11 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1393,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18738)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,29 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18738)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -963,10 +963,7 @@
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
-                } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
-               }
+                }
             }
             work[4 * n - 3 - pingPong] = d;
 
@@ -1136,7 +1133,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,14 +1381,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18738)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18738)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18738)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18931)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,27 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18931)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,13 +1135,14 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1403,7 +1404,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18931)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18931)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v18931)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19008)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,27 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19008)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1135,8 +1134,13 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1388,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,7 +1405,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19008)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19008)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19008)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19224)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,30 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+        checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19224)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,13 +1135,13 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,9 +1382,9 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
+			double res = 0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19224)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19245)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19245)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,11 +1135,11 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1384,7 +1384,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1402,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1410,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19245)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19245)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19245)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19612)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,23 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19612)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1135,11 +1134,12 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+                    boolean infiniteFound = false;
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1391,7 +1391,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1402,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1411,7 +1409,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19612)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,26 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1019,7 +1019,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1135,13 +1134,11 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,8 +1407,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20033)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20033)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1019,7 +1018,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1133,15 +1131,16 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            for (int i = 0; i > 0; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,7 +1380,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
+            int index = 0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20033)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20033)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20033)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20035)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,23 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20035)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1019,7 +1018,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1052,7 +1050,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1135,8 +1132,13 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1393,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20035)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20035)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20035)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20124)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,25 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20124)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -847,7 +847,6 @@
         dMin1 = 0;
         dMin2 = 0;
         dN    = 0;
-        dN1   = 0;
         dN2   = 0;
         tau   = 0;
 
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1053,6 +1051,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
+				double delta;
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1133,14 +1132,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            for (int i = 0; i < j; i += 4)
+				cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
             return true;
         }
         return false;
@@ -1381,8 +1374,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            int index = 0;
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1383,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20124)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20242)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,22 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20242)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,8 +1135,12 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1385,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
+            int index = 0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1395,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20837)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,19 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20837)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,8 +1135,12 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					tau = 0.0;
+					final double tmp = work[i + k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1395,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1414,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20837)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20837)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v20837)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21721)
--- org.apache.commons.math.linear.AbstractRealMatrix
+++ org.apache.commons.math.linear.AbstractRealMatrix
@@ -41,7 +41,6 @@
      * Creates a matrix with no data
      */
     protected AbstractRealMatrix() {
-        lu = null;
     }
 
     /**
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21721)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,30 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21721)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1391,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21721)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.math.linear.AbstractRealMatrix
+++ org.apache.commons.math.linear.AbstractRealMatrix
@@ -41,7 +41,6 @@
      * Creates a matrix with no data
      */
     protected AbstractRealMatrix() {
-        lu = null;
     }
 
     /**
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -244,7 +244,30 @@
     public RealVector add(double[] v)
     throws IllegalArgumentException {
         checkVectorDimensions(v.length);
-        double[] out = new double[data.length];
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		checkVectorDimensions(v.length);
+		double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
         }
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1135,11 +1135,11 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tau = 0.0;
+					final double tmp = work[i + k];
+					++k;
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1391,7 +1391,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1402,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-16 00:40:39 [main] [INFO]  PatchLogExporter - patch (v21849)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-16 00:40:39 [main] [INFO]  KGenProgMain - Summary
Reached generation = 220
Generated variants = 21849
Syntax valid variants = 19139
Build succeeded variants = 10692
Time elapsed = 19 hours 35 minutes 18 seconds
Exit status = SUCCESS
