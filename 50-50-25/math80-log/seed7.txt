2023-08-14 04:37:06 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-14 04:37:06 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-14 04:37:06 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-14 04:37:07 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math80/kgenprog-80.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math80 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.linear.EigenDecompositionImplTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 7 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/research
version = 1.8.2
================================================================
2023-08-14 04:37:21 [main] [INFO]  KGenProgMain - initial failed tests (1/18)
org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02: null

2023-08-14 04:37:21 [main] [INFO]  KGenProgMain - GA started
2023-08-14 04:37:21 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-14 04:37:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 50, build-succeeded 12, build-failed 28, syntax-invalid 4, redundant 6
Fitness: max 1(1), min 0.5(1), ave 0.912
Test execution time: sum 4507 ms, max 428 ms, min 325 ms
----------------------------------------------------------------

2023-08-14 04:37:30 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-14 04:37:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 50, build-succeeded 14, build-failed 29, syntax-invalid 4, redundant 3
Fitness: max 0.944(14), min 0.944(14), ave 0.944
Test execution time: sum 4359 ms, max 408 ms, min 253 ms
----------------------------------------------------------------

2023-08-14 04:37:39 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-14 04:43:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 32 seconds
Variants: generated 100, build-succeeded 32, build-failed 34, syntax-invalid 5, redundant 29
Fitness: max 1(1), min 0.5(1), ave 0.932
Test execution time: sum 368833 ms, max 360266 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 04:43:54 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-14 04:44:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 45 seconds
Variants: generated 100, build-succeeded 32, build-failed 39, syntax-invalid 5, redundant 24
Fitness: max 0.944(32), min 0.944(32), ave 0.944
Test execution time: sum 7708 ms, max 270 ms, min 216 ms
----------------------------------------------------------------

2023-08-14 04:44:06 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-14 04:47:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 0 seconds
Variants: generated 100, build-succeeded 37, build-failed 38, syntax-invalid 4, redundant 21
Fitness: max 0.944(37), min 0.944(37), ave 0.944
Test execution time: sum 190165 ms, max 180300 ms, min 213 ms
----------------------------------------------------------------

2023-08-14 04:47:22 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-14 04:50:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 18 seconds
Variants: generated 100, build-succeeded 40, build-failed 38, syntax-invalid 4, redundant 18
Fitness: max 0.944(39), min 0.611(1), ave 0.936
Test execution time: sum 190389 ms, max 180257 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 04:50:39 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-14 04:50:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 37 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 5, redundant 14
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 12983 ms, max 369 ms, min 212 ms
----------------------------------------------------------------

2023-08-14 04:50:59 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-14 04:51:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 53 seconds
Variants: generated 100, build-succeeded 40, build-failed 33, syntax-invalid 7, redundant 20
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 9898 ms, max 443 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 04:51:15 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-14 04:51:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 11 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 11, redundant 14
Fitness: max 1(1), min 0.833(2), ave 0.941
Test execution time: sum 11694 ms, max 342 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 04:51:33 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-14 04:51:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 6, redundant 11
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 12520 ms, max 357 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 04:51:53 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-14 04:55:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 49 seconds
Variants: generated 100, build-succeeded 42, build-failed 39, syntax-invalid 6, redundant 13
Fitness: max 0.944(42), min 0.944(42), ave 0.944
Test execution time: sum 190315 ms, max 180223 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 04:55:10 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-14 05:04:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 5 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 13, redundant 9
Fitness: max 0.944(41), min 0.944(41), ave 0.944
Test execution time: sum 549935 ms, max 180230 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 05:04:27 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-14 05:16:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 23 seconds
Variants: generated 100, build-succeeded 44, build-failed 33, syntax-invalid 13, redundant 10
Fitness: max 0.944(43), min 0.833(1), ave 0.942
Test execution time: sum 730542 ms, max 180238 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 05:16:44 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-14 05:23:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 40 seconds
Variants: generated 100, build-succeeded 43, build-failed 39, syntax-invalid 11, redundant 7
Fitness: max 0.944(43), min 0.944(43), ave 0.944
Test execution time: sum 370217 ms, max 180232 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 05:23:01 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-14 05:29:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 58 seconds
Variants: generated 100, build-succeeded 49, build-failed 37, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.444(1), ave 0.933
Test execution time: sum 371427 ms, max 180262 ms, min 199 ms
----------------------------------------------------------------

2023-08-14 05:29:20 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-14 05:35:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 17 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 15, redundant 5
Fitness: max 0.944(48), min 0.944(48), ave 0.944
Test execution time: sum 371385 ms, max 180226 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 05:35:38 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-14 05:35:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 34 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 14, redundant 5
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 10672 ms, max 379 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 05:35:56 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-14 05:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 53 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 10, redundant 5
Fitness: max 0.944(48), min 0.5(1), ave 0.935
Test execution time: sum 371746 ms, max 180239 ms, min 202 ms
----------------------------------------------------------------

2023-08-14 05:42:14 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-14 05:42:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 12 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 10, redundant 8
Fitness: max 1(1), min 0.5(2), ave 0.929
Test execution time: sum 12654 ms, max 423 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 05:42:34 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-14 05:54:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 31 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 7, redundant 7
Fitness: max 0.944(50), min 0.5(1), ave 0.936
Test execution time: sum 732270 ms, max 180225 ms, min 201 ms
----------------------------------------------------------------

2023-08-14 05:54:53 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-14 05:58:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 50 seconds
Variants: generated 100, build-succeeded 50, build-failed 37, syntax-invalid 9, redundant 4
Fitness: max 1(1), min 0.944(49), ave 0.946
Test execution time: sum 191978 ms, max 180272 ms, min 202 ms
----------------------------------------------------------------

2023-08-14 05:58:12 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-14 06:01:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 7 seconds
Variants: generated 100, build-succeeded 43, build-failed 31, syntax-invalid 20, redundant 6
Fitness: max 1(2), min 0.889(1), ave 0.946
Test execution time: sum 189799 ms, max 180213 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 06:01:29 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-14 06:04:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 26 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 17, redundant 4
Fitness: max 0.944(49), min 0.444(1), ave 0.934
Test execution time: sum 191588 ms, max 180225 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 06:04:48 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-14 06:14:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 43 seconds
Variants: generated 100, build-succeeded 41, build-failed 35, syntax-invalid 20, redundant 4
Fitness: max 1(1), min 0.611(1), ave 0.938
Test execution time: sum 549520 ms, max 180227 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 06:14:05 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-14 06:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 0 seconds
Variants: generated 100, build-succeeded 41, build-failed 40, syntax-invalid 15, redundant 4
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 369529 ms, max 180220 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 06:20:22 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-14 06:20:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 18 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 17, redundant 2
Fitness: max 1(1), min 0.944(47), ave 0.946
Test execution time: sum 11050 ms, max 471 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 06:20:40 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-14 06:29:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 38 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 13, redundant 4
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 552041 ms, max 180223 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 06:29:59 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-14 06:36:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 54 seconds
Variants: generated 100, build-succeeded 39, build-failed 38, syntax-invalid 19, redundant 4
Fitness: max 0.944(38), min 0.5(1), ave 0.933
Test execution time: sum 369384 ms, max 180226 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 06:36:16 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-14 06:39:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 12 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 16, redundant 3
Fitness: max 1(1), min 0.5(2), ave 0.928
Test execution time: sum 191490 ms, max 180256 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 06:39:34 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-14 06:42:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 30 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 18, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 191032 ms, max 180224 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 06:42:52 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-14 06:52:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 49 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 13, redundant 2
Fitness: max 0.944(49), min 0.944(49), ave 0.944
Test execution time: sum 551413 ms, max 180267 ms, min 203 ms
----------------------------------------------------------------

2023-08-14 06:52:11 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-14 07:13:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 9 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 12, redundant 2
Fitness: max 0.944(52), min 0.833(1), ave 0.942
Test execution time: sum 1272557 ms, max 180244 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 07:13:30 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-14 07:25:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 28 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 11, redundant 5
Fitness: max 0.944(52), min 0.944(52), ave 0.944
Test execution time: sum 732296 ms, max 180385 ms, min 203 ms
----------------------------------------------------------------

2023-08-14 07:25:50 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-14 07:38:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 46 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 13, redundant 4
Fitness: max 1(2), min 0.944(43), ave 0.947
Test execution time: sum 731030 ms, max 180486 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 07:38:08 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-14 07:47:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 4 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 22, redundant 2
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 550544 ms, max 180227 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 07:47:26 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-14 08:02:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 22 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.5(1), ave 0.934
Test execution time: sum 910752 ms, max 180423 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 08:02:44 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-14 08:24:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 46 minutes 42 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 16, redundant 1
Fitness: max 1(2), min 0.944(49), ave 0.947
Test execution time: sum 1272292 ms, max 180243 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 08:24:04 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-14 08:39:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 0 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 12, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.931
Test execution time: sum 911179 ms, max 180270 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 08:39:22 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-14 08:54:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 20 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 13, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.937
Test execution time: sum 911656 ms, max 180232 ms, min 203 ms
----------------------------------------------------------------

2023-08-14 08:54:42 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-14 09:00:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 37 seconds
Variants: generated 100, build-succeeded 44, build-failed 37, syntax-invalid 19, redundant 0
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 370102 ms, max 180264 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 09:00:59 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-14 09:28:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 50 minutes 58 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 12, redundant 5
Fitness: max 1(2), min 0.944(52), ave 0.947
Test execution time: sum 1632733 ms, max 180361 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 09:28:20 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-14 09:52:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 19 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 13, redundant 1
Fitness: max 1(1), min 0.5(1), ave 0.936
Test execution time: sum 1453377 ms, max 360231 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 09:52:41 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-14 10:17:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 39 minutes 38 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 15, redundant 2
Fitness: max 0.944(47), min 0.944(47), ave 0.944
Test execution time: sum 1451158 ms, max 180443 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 10:17:00 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-14 10:38:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 58 seconds
Variants: generated 100, build-succeeded 50, build-failed 36, syntax-invalid 12, redundant 2
Fitness: max 1(1), min 0.944(49), ave 0.946
Test execution time: sum 1271707 ms, max 180226 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 10:38:20 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-14 10:50:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 13 minutes 17 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 20, redundant 2
Fitness: max 0.944(46), min 0.5(1), ave 0.934
Test execution time: sum 730968 ms, max 180356 ms, min 202 ms
----------------------------------------------------------------

2023-08-14 10:50:39 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-14 10:56:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 19 minutes 36 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 14, redundant 1
Fitness: max 1(1), min 0.944(47), ave 0.946
Test execution time: sum 371111 ms, max 180227 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 10:56:58 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-14 11:00:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 54 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 20, redundant 2
Fitness: max 0.944(37), min 0.5(1), ave 0.925
Test execution time: sum 189845 ms, max 180138 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 11:00:16 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-14 11:06:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 29 minutes 15 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 14, redundant 0
Fitness: max 0.944(53), min 0.944(53), ave 0.944
Test execution time: sum 372569 ms, max 180225 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 11:06:37 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-14 11:06:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 29 minutes 34 seconds
Variants: generated 100, build-succeeded 44, build-failed 39, syntax-invalid 16, redundant 1
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 10397 ms, max 454 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 11:06:56 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-14 11:07:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 29 minutes 54 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 15, redundant 0
Fitness: max 1(3), min 0.944(46), ave 0.948
Test execution time: sum 11368 ms, max 381 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 11:07:16 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-14 11:07:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 30 minutes 12 seconds
Variants: generated 100, build-succeeded 43, build-failed 36, syntax-invalid 21, redundant 0
Fitness: max 0.944(42), min 0.833(1), ave 0.942
Test execution time: sum 10174 ms, max 427 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 11:07:34 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-14 11:10:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 33 minutes 30 seconds
Variants: generated 100, build-succeeded 40, build-failed 40, syntax-invalid 19, redundant 1
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 189237 ms, max 180217 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 11:10:52 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-14 11:11:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 33 minutes 49 seconds
Variants: generated 100, build-succeeded 44, build-failed 39, syntax-invalid 15, redundant 2
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 10436 ms, max 409 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 11:11:11 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-14 11:20:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 43 minutes 10 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 11, redundant 1
Fitness: max 0.944(51), min 0.556(1), ave 0.937
Test execution time: sum 551933 ms, max 180225 ms, min 200 ms
----------------------------------------------------------------

2023-08-14 11:20:32 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-14 11:29:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 52 minutes 31 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 13, redundant 4
Fitness: max 0.944(50), min 0.833(2), ave 0.94
Test execution time: sum 551823 ms, max 180220 ms, min 202 ms
----------------------------------------------------------------

2023-08-14 11:29:53 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-14 11:54:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 16 minutes 51 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 14, redundant 3
Fitness: max 0.944(51), min 0.944(51), ave 0.944
Test execution time: sum 1452082 ms, max 180242 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 11:54:14 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-14 11:57:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 20 minutes 13 seconds
Variants: generated 100, build-succeeded 54, build-failed 38, syntax-invalid 6, redundant 2
Fitness: max 0.944(54), min 0.944(54), ave 0.944
Test execution time: sum 192224 ms, max 180218 ms, min 199 ms
----------------------------------------------------------------

2023-08-14 11:57:35 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-14 12:00:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 23 minutes 34 seconds
Variants: generated 100, build-succeeded 49, build-failed 39, syntax-invalid 9, redundant 3
Fitness: max 1(2), min 0.944(47), ave 0.947
Test execution time: sum 191705 ms, max 180217 ms, min 203 ms
----------------------------------------------------------------

2023-08-14 12:00:56 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-14 12:07:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 29 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 8, redundant 2
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 372975 ms, max 180228 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 12:07:18 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-14 12:37:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 10, redundant 2
Fitness: max 0.944(52), min 0.444(1), ave 0.927
Test execution time: sum 1812649 ms, max 1800183 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 12:37:40 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-14 12:41:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 3 minutes 39 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 16, redundant 5
Fitness: max 1(1), min 0.944(46), ave 0.946
Test execution time: sum 191578 ms, max 180231 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 12:41:01 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-14 13:17:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 40 minutes 0 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 13, redundant 0
Fitness: max 0.944(51), min 0.444(1), ave 0.935
Test execution time: sum 2172645 ms, max 1800198 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 13:17:23 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-14 13:23:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 46 minutes 23 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 14, redundant 2
Fitness: max 0.944(53), min 0.889(1), ave 0.943
Test execution time: sum 373320 ms, max 180229 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 13:23:45 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-14 13:27:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 49 minutes 45 seconds
Variants: generated 100, build-succeeded 52, build-failed 39, syntax-invalid 8, redundant 1
Fitness: max 0.944(52), min 0.944(52), ave 0.944
Test execution time: sum 192403 ms, max 180363 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 13:27:07 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-14 13:30:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 53 minutes 6 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 14, redundant 4
Fitness: max 0.944(49), min 0.944(49), ave 0.944
Test execution time: sum 191916 ms, max 180430 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 13:30:28 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-14 13:30:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 53 minutes 28 seconds
Variants: generated 100, build-succeeded 49, build-failed 38, syntax-invalid 13, redundant 0
Fitness: max 0.944(48), min 0.833(1), ave 0.942
Test execution time: sum 12226 ms, max 429 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 13:30:50 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-14 14:01:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 23 minutes 49 seconds
Variants: generated 100, build-succeeded 47, build-failed 38, syntax-invalid 13, redundant 2
Fitness: max 0.944(46), min 0.5(1), ave 0.935
Test execution time: sum 1811842 ms, max 1620220 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 14:01:12 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-14 14:01:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 10 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 11, redundant 3
Fitness: max 1(2), min 0.944(45), ave 0.947
Test execution time: sum 11179 ms, max 372 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 14:01:32 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-14 14:04:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 27 minutes 32 seconds
Variants: generated 100, build-succeeded 50, build-failed 40, syntax-invalid 7, redundant 3
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 192235 ms, max 180227 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 14:04:54 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-14 14:08:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 30 minutes 52 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 21, redundant 2
Fitness: max 0.944(42), min 0.944(42), ave 0.944
Test execution time: sum 190532 ms, max 180214 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 14:08:14 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-14 14:08:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 31 minutes 12 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 17, redundant 2
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 10556 ms, max 302 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 14:08:34 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-14 14:08:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 31 minutes 32 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 18, redundant 2
Fitness: max 0.944(48), min 0.889(1), ave 0.943
Test execution time: sum 11553 ms, max 523 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 14:08:55 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-14 14:18:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 40 minutes 52 seconds
Variants: generated 100, build-succeeded 41, build-failed 40, syntax-invalid 16, redundant 3
Fitness: max 0.944(39), min 0.833(2), ave 0.939
Test execution time: sum 550193 ms, max 180232 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 14:18:14 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-14 14:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 59 minutes 14 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 12, redundant 4
Fitness: max 1(2), min 0.889(1), ave 0.945
Test execution time: sum 1092638 ms, max 360137 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 14:36:36 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-14 14:39:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 2 minutes 32 seconds
Variants: generated 100, build-succeeded 37, build-failed 32, syntax-invalid 28, redundant 3
Fitness: max 0.944(37), min 0.944(37), ave 0.944
Test execution time: sum 188887 ms, max 180226 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 14:39:54 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-14 14:43:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 5 minutes 51 seconds
Variants: generated 100, build-succeeded 40, build-failed 38, syntax-invalid 19, redundant 3
Fitness: max 0.944(39), min 0.889(1), ave 0.943
Test execution time: sum 189504 ms, max 180261 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 14:43:13 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-14 14:43:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 6 minutes 11 seconds
Variants: generated 100, build-succeeded 45, build-failed 35, syntax-invalid 17, redundant 3
Fitness: max 0.944(43), min 0.722(1), ave 0.937
Test execution time: sum 10526 ms, max 354 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 14:43:33 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-14 14:46:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 9 minutes 33 seconds
Variants: generated 100, build-succeeded 48, build-failed 41, syntax-invalid 10, redundant 1
Fitness: max 1(1), min 0.944(47), ave 0.946
Test execution time: sum 191727 ms, max 180214 ms, min 211 ms
----------------------------------------------------------------

2023-08-14 14:46:55 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-14 14:47:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 9 minutes 53 seconds
Variants: generated 100, build-succeeded 42, build-failed 38, syntax-invalid 20, redundant 0
Fitness: max 0.944(41), min 0.833(1), ave 0.942
Test execution time: sum 10235 ms, max 517 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 14:47:15 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-14 14:47:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 10 minutes 12 seconds
Variants: generated 100, build-succeeded 40, build-failed 38, syntax-invalid 21, redundant 1
Fitness: max 0.944(39), min 0.833(1), ave 0.942
Test execution time: sum 10063 ms, max 580 ms, min 211 ms
----------------------------------------------------------------

2023-08-14 14:47:34 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-14 14:47:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 10 minutes 32 seconds
Variants: generated 100, build-succeeded 44, build-failed 39, syntax-invalid 17, redundant 0
Fitness: max 0.944(43), min 0.833(1), ave 0.942
Test execution time: sum 10787 ms, max 489 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 14:47:55 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-14 14:57:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 19 minutes 56 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0.833(2), ave 0.942
Test execution time: sum 553975 ms, max 180230 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 14:57:19 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-14 14:57:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 20 minutes 17 seconds
Variants: generated 100, build-succeeded 45, build-failed 32, syntax-invalid 23, redundant 0
Fitness: max 0.944(44), min 0.833(1), ave 0.942
Test execution time: sum 11035 ms, max 447 ms, min 212 ms
----------------------------------------------------------------

2023-08-14 14:57:39 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-14 15:07:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 29 minutes 41 seconds
Variants: generated 100, build-succeeded 55, build-failed 34, syntax-invalid 10, redundant 1
Fitness: max 0.944(54), min 0.833(1), ave 0.942
Test execution time: sum 553694 ms, max 180228 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 15:07:03 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-14 15:10:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 33 minutes 4 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 11, redundant 2
Fitness: max 0.944(53), min 0.833(1), ave 0.942
Test execution time: sum 192734 ms, max 180221 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 15:10:26 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-14 15:10:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 33 minutes 25 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 12, redundant 2
Fitness: max 0.944(45), min 0.444(1), ave 0.927
Test execution time: sum 11122 ms, max 369 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 15:10:48 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-14 15:14:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 47 seconds
Variants: generated 100, build-succeeded 46, build-failed 36, syntax-invalid 17, redundant 1
Fitness: max 0.944(44), min 0.5(1), ave 0.932
Test execution time: sum 191126 ms, max 180226 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 15:14:09 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-14 15:20:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 43 minutes 8 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 16, redundant 0
Fitness: max 0.944(47), min 0.944(47), ave 0.944
Test execution time: sum 371347 ms, max 180221 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 15:20:31 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-14 15:26:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 49 minutes 31 seconds
Variants: generated 100, build-succeeded 47, build-failed 38, syntax-invalid 11, redundant 4
Fitness: max 0.944(46), min 0.5(1), ave 0.935
Test execution time: sum 371477 ms, max 180231 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 15:26:53 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-14 15:36:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 58 minutes 53 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 17, redundant 3
Fitness: max 0.944(50), min 0.5(1), ave 0.936
Test execution time: sum 551905 ms, max 180246 ms, min 204 ms
----------------------------------------------------------------

2023-08-14 15:36:15 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-14 15:39:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 2 minutes 14 seconds
Variants: generated 100, build-succeeded 46, build-failed 44, syntax-invalid 9, redundant 1
Fitness: max 0.944(45), min 0.833(1), ave 0.942
Test execution time: sum 190855 ms, max 180223 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 15:39:37 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-14 15:42:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 5 minutes 36 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 14, redundant 3
Fitness: max 0.944(46), min 0.5(1), ave 0.935
Test execution time: sum 191263 ms, max 180220 ms, min 208 ms
----------------------------------------------------------------

2023-08-14 15:42:58 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-14 15:49:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 11 minutes 58 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 13, redundant 3
Fitness: max 0.944(46), min 0.833(2), ave 0.94
Test execution time: sum 371856 ms, max 180219 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 15:49:20 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-14 16:04:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 27 minutes 19 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 18, redundant 3
Fitness: max 0.944(48), min 0.833(1), ave 0.942
Test execution time: sum 911539 ms, max 180292 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 16:04:41 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-14 16:14:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 36 minutes 40 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 13, redundant 4
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 550911 ms, max 180330 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 16:14:03 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-14 16:17:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 40 minutes 3 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 10, redundant 4
Fitness: max 0.944(49), min 0.5(1), ave 0.935
Test execution time: sum 192014 ms, max 180223 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 16:17:25 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-14 16:23:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 46 minutes 24 seconds
Variants: generated 100, build-succeeded 45, build-failed 33, syntax-invalid 19, redundant 3
Fitness: max 1(1), min 0.778(1), ave 0.941
Test execution time: sum 370804 ms, max 180254 ms, min 212 ms
----------------------------------------------------------------

2023-08-14 16:23:46 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-14 16:39:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 1 minutes 46 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 18, redundant 2
Fitness: max 1(1), min 0.611(1), ave 0.939
Test execution time: sum 911526 ms, max 180465 ms, min 211 ms
----------------------------------------------------------------

2023-08-14 16:39:08 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-14 16:45:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 8 minutes 7 seconds
Variants: generated 100, build-succeeded 46, build-failed 41, syntax-invalid 12, redundant 1
Fitness: max 0.944(45), min 0.556(1), ave 0.936
Test execution time: sum 370720 ms, max 180377 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 16:45:30 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-14 17:03:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 26 minutes 31 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0.944(52), min 0.833(2), ave 0.94
Test execution time: sum 1093104 ms, max 180414 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 17:03:53 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-14 17:16:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 38 minutes 52 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 18, redundant 3
Fitness: max 0.944(43), min 0.5(2), ave 0.923
Test execution time: sum 731432 ms, max 180228 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 17:16:15 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-14 17:46:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 9 minutes 16 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 11, redundant 1
Fitness: max 0.944(51), min 0.778(1), ave 0.937
Test execution time: sum 1812806 ms, max 720160 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 17:46:39 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-14 17:59:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 21 minutes 39 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 17, redundant 2
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 732688 ms, max 180309 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 17:59:02 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-14 18:05:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 28 minutes 1 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 16, redundant 5
Fitness: max 0.944(45), min 0.833(2), ave 0.94
Test execution time: sum 371034 ms, max 180245 ms, min 207 ms
----------------------------------------------------------------

2023-08-14 18:05:23 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-14 18:08:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 31 minutes 19 seconds
Variants: generated 100, build-succeeded 34, build-failed 39, syntax-invalid 26, redundant 1
Fitness: max 1(1), min 0.5(1), ave 0.908
Test execution time: sum 187958 ms, max 180219 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 18:08:41 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-14 18:15:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 37 minutes 41 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 14, redundant 4
Fitness: max 0.944(46), min 0.833(1), ave 0.942
Test execution time: sum 371177 ms, max 180235 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 18:15:03 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-14 18:33:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 56 minutes 2 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 17, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.937
Test execution time: sum 1091226 ms, max 180318 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 18:33:25 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-14 18:42:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 5 minutes 22 seconds
Variants: generated 100, build-succeeded 39, build-failed 40, syntax-invalid 21, redundant 0
Fitness: max 1(1), min 0.944(38), ave 0.946
Test execution time: sum 549460 ms, max 180273 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 18:42:45 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-14 18:52:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 14 minutes 43 seconds
Variants: generated 100, build-succeeded 43, build-failed 41, syntax-invalid 16, redundant 0
Fitness: max 1(1), min 0.556(1), ave 0.937
Test execution time: sum 550578 ms, max 180229 ms, min 211 ms
----------------------------------------------------------------

2023-08-14 18:52:06 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-14 18:58:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 21 minutes 3 seconds
Variants: generated 100, build-succeeded 36, build-failed 41, syntax-invalid 21, redundant 2
Fitness: max 0.944(36), min 0.944(36), ave 0.944
Test execution time: sum 368877 ms, max 180235 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 18:58:26 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-14 19:16:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 39 minutes 24 seconds
Variants: generated 100, build-succeeded 44, build-failed 35, syntax-invalid 19, redundant 2
Fitness: max 1(2), min 0.944(42), ave 0.947
Test execution time: sum 1090179 ms, max 180252 ms, min 212 ms
----------------------------------------------------------------

2023-08-14 19:16:47 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-14 19:41:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 3 minutes 46 seconds
Variants: generated 100, build-succeeded 46, build-failed 31, syntax-invalid 21, redundant 2
Fitness: max 1(1), min 0.833(1), ave 0.942
Test execution time: sum 1450795 ms, max 180420 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 19:41:08 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-14 20:02:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 25 minutes 7 seconds
Variants: generated 100, build-succeeded 43, build-failed 36, syntax-invalid 18, redundant 3
Fitness: max 0.944(42), min 0.833(1), ave 0.942
Test execution time: sum 1270348 ms, max 180554 ms, min 212 ms
----------------------------------------------------------------

2023-08-14 20:02:30 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-14 20:17:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 40 minutes 29 seconds
Variants: generated 100, build-succeeded 42, build-failed 27, syntax-invalid 27, redundant 4
Fitness: max 0.944(39), min 0.5(1), ave 0.929
Test execution time: sum 910549 ms, max 180297 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 20:17:51 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-14 20:42:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 4 minutes 49 seconds
Variants: generated 100, build-succeeded 40, build-failed 28, syntax-invalid 29, redundant 3
Fitness: max 1(1), min 0.944(39), ave 0.946
Test execution time: sum 1449696 ms, max 180248 ms, min 209 ms
----------------------------------------------------------------

2023-08-14 20:42:12 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-14 20:48:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 11 minutes 11 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 25, redundant 1
Fitness: max 0.944(45), min 0.5(1), ave 0.935
Test execution time: sum 370637 ms, max 180231 ms, min 205 ms
----------------------------------------------------------------

2023-08-14 20:48:34 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-14 21:36:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 59 minutes 33 seconds
Variants: generated 100, build-succeeded 41, build-failed 35, syntax-invalid 24, redundant 0
Fitness: max 0.944(40), min 0.444(1), ave 0.932
Test execution time: sum 2889984 ms, max 1800211 ms, min 210 ms
----------------------------------------------------------------

2023-08-14 21:36:56 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-14 22:28:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 50 minutes 54 seconds
Variants: generated 100, build-succeeded 38, build-failed 35, syntax-invalid 27, redundant 0
Fitness: max 0.944(37), min 0.444(1), ave 0.931
Test execution time: sum 3068747 ms, max 1800178 ms, min 206 ms
----------------------------------------------------------------

2023-08-14 22:28:16 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-14 22:58:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 21 minutes 35 seconds
Variants: generated 100, build-succeeded 38, build-failed 31, syntax-invalid 29, redundant 2
Fitness: max 1(4), min 0.944(34), ave 0.95
Test execution time: sum 1814432 ms, max 180349 ms, min 221 ms
----------------------------------------------------------------

2023-08-14 22:58:57 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-14 23:32:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 54 minutes 57 seconds
Variants: generated 100, build-succeeded 36, build-failed 37, syntax-invalid 26, redundant 1
Fitness: max 0.944(35), min 0.833(1), ave 0.941
Test execution time: sum 1989914 ms, max 180460 ms, min 219 ms
----------------------------------------------------------------

2023-08-14 23:32:19 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-14 23:38:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 1 minutes 25 seconds
Variants: generated 100, build-succeeded 40, build-failed 38, syntax-invalid 19, redundant 3
Fitness: max 1(1), min 0.944(39), ave 0.946
Test execution time: sum 373182 ms, max 180343 ms, min 233 ms
----------------------------------------------------------------

2023-08-14 23:38:48 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-14 23:54:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 16 minutes 59 seconds
Variants: generated 100, build-succeeded 41, build-failed 34, syntax-invalid 22, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 913968 ms, max 180400 ms, min 253 ms
----------------------------------------------------------------

2023-08-14 23:54:21 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-15 00:03:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 26 minutes 28 seconds
Variants: generated 100, build-succeeded 38, build-failed 30, syntax-invalid 29, redundant 3
Fitness: max 1(1), min 0.444(1), ave 0.924
Test execution time: sum 551694 ms, max 180326 ms, min 220 ms
----------------------------------------------------------------

2023-08-15 00:03:51 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-15 00:13:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 35 minutes 56 seconds
Variants: generated 100, build-succeeded 42, build-failed 33, syntax-invalid 25, redundant 0
Fitness: max 0.944(39), min 0.833(3), ave 0.937
Test execution time: sum 552221 ms, max 180262 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 00:13:19 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-15 00:19:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 42 minutes 26 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 15, redundant 0
Fitness: max 0.944(47), min 0.889(2), ave 0.942
Test execution time: sum 374065 ms, max 180320 ms, min 222 ms
----------------------------------------------------------------

2023-08-15 00:19:49 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-15 00:35:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 57 minutes 54 seconds
Variants: generated 100, build-succeeded 43, build-failed 33, syntax-invalid 22, redundant 2
Fitness: max 0.944(42), min 0.889(1), ave 0.943
Test execution time: sum 912306 ms, max 180299 ms, min 230 ms
----------------------------------------------------------------

2023-08-15 00:35:17 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-15 00:41:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 4 minutes 26 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 16, redundant 2
Fitness: max 0.944(50), min 0.889(1), ave 0.943
Test execution time: sum 375196 ms, max 180381 ms, min 225 ms
----------------------------------------------------------------

2023-08-15 00:41:49 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-15 00:48:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 10 minutes 56 seconds
Variants: generated 100, build-succeeded 45, build-failed 33, syntax-invalid 22, redundant 0
Fitness: max 0.944(43), min 0.5(1), ave 0.932
Test execution time: sum 373219 ms, max 180333 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 00:48:19 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-15 00:48:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 11 minutes 28 seconds
Variants: generated 100, build-succeeded 43, build-failed 34, syntax-invalid 23, redundant 0
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 13105 ms, max 548 ms, min 242 ms
----------------------------------------------------------------

2023-08-15 00:48:51 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-15 00:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 12 minutes 1 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 16, redundant 0
Fitness: max 1(2), min 0.722(1), ave 0.94
Test execution time: sum 14338 ms, max 527 ms, min 237 ms
----------------------------------------------------------------

2023-08-15 00:49:23 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-15 00:49:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 12 minutes 35 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 18, redundant 1
Fitness: max 0.944(49), min 0.944(49), ave 0.944
Test execution time: sum 15260 ms, max 533 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 00:49:58 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-15 00:50:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 13 minutes 6 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 24, redundant 2
Fitness: max 1(1), min 0.833(2), ave 0.941
Test execution time: sum 13378 ms, max 424 ms, min 246 ms
----------------------------------------------------------------

2023-08-15 00:50:29 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-15 01:02:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 25 minutes 36 seconds
Variants: generated 100, build-succeeded 42, build-failed 33, syntax-invalid 23, redundant 2
Fitness: max 0.944(41), min 0(1), ave 0.922
Test execution time: sum 732025 ms, max 180335 ms, min 98 ms
----------------------------------------------------------------

2023-08-15 01:02:59 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-15 01:12:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 35 minutes 12 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 14, redundant 0
Fitness: max 0.944(51), min 0.5(3), ave 0.918
Test execution time: sum 556261 ms, max 180375 ms, min 229 ms
----------------------------------------------------------------

2023-08-15 01:12:34 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-15 01:22:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 44 minutes 47 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 18, redundant 2
Fitness: max 0.944(52), min 0.833(1), ave 0.942
Test execution time: sum 556056 ms, max 180416 ms, min 235 ms
----------------------------------------------------------------

2023-08-15 01:22:09 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-15 01:28:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 51 minutes 18 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 21, redundant 3
Fitness: max 0.944(45), min 0.889(1), ave 0.943
Test execution time: sum 373333 ms, max 180370 ms, min 239 ms
----------------------------------------------------------------

2023-08-15 01:28:41 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-15 01:35:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 57 minutes 48 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 29, redundant 2
Fitness: max 0.944(37), min 0.444(1), ave 0.929
Test execution time: sum 371682 ms, max 180305 ms, min 224 ms
----------------------------------------------------------------

2023-08-15 01:35:11 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-15 02:11:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 34 minutes 21 seconds
Variants: generated 100, build-succeeded 50, build-failed 24, syntax-invalid 24, redundant 2
Fitness: max 1(1), min 0.444(1), ave 0.932
Test execution time: sum 2174113 ms, max 1800267 ms, min 222 ms
----------------------------------------------------------------

2023-08-15 02:11:44 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-15 02:12:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 34 minutes 55 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 21, redundant 1
Fitness: max 0.944(51), min 0.833(1), ave 0.942
Test execution time: sum 15426 ms, max 435 ms, min 231 ms
----------------------------------------------------------------

2023-08-15 02:12:18 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-15 02:12:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 35 minutes 26 seconds
Variants: generated 100, build-succeeded 36, build-failed 38, syntax-invalid 25, redundant 1
Fitness: max 0.944(36), min 0.944(36), ave 0.944
Test execution time: sum 11426 ms, max 487 ms, min 241 ms
----------------------------------------------------------------

2023-08-15 02:12:49 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-15 02:22:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 44 minutes 56 seconds
Variants: generated 100, build-succeeded 38, build-failed 32, syntax-invalid 25, redundant 5
Fitness: max 0.944(37), min 0.889(1), ave 0.943
Test execution time: sum 550512 ms, max 360211 ms, min 218 ms
----------------------------------------------------------------

2023-08-15 02:22:19 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-15 02:58:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 21 minutes 31 seconds
Variants: generated 100, build-succeeded 45, build-failed 27, syntax-invalid 25, redundant 3
Fitness: max 1(1), min 0.444(1), ave 0.922
Test execution time: sum 2174347 ms, max 1800278 ms, min 234 ms
----------------------------------------------------------------

2023-08-15 02:58:54 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-15 03:05:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 28 minutes 8 seconds
Variants: generated 100, build-succeeded 40, build-failed 34, syntax-invalid 24, redundant 2
Fitness: max 0.944(37), min 0.5(1), ave 0.928
Test execution time: sum 373525 ms, max 180263 ms, min 251 ms
----------------------------------------------------------------

2023-08-15 03:05:31 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-15 03:15:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 37 minutes 43 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 21, redundant 0
Fitness: max 0.944(45), min 0.833(1), ave 0.942
Test execution time: sum 554107 ms, max 180334 ms, min 236 ms
----------------------------------------------------------------

2023-08-15 03:15:05 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-15 03:18:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 41 minutes 17 seconds
Variants: generated 100, build-succeeded 44, build-failed 38, syntax-invalid 17, redundant 1
Fitness: max 0.944(39), min 0.5(1), ave 0.919
Test execution time: sum 193414 ms, max 180379 ms, min 243 ms
----------------------------------------------------------------

2023-08-15 03:18:40 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-15 03:25:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 47 minutes 50 seconds
Variants: generated 100, build-succeeded 42, build-failed 38, syntax-invalid 20, redundant 0
Fitness: max 0.944(41), min 0.5(1), ave 0.934
Test execution time: sum 372666 ms, max 180357 ms, min 238 ms
----------------------------------------------------------------

2023-08-15 03:25:13 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-15 03:28:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 51 minutes 22 seconds
Variants: generated 100, build-succeeded 43, build-failed 31, syntax-invalid 25, redundant 1
Fitness: max 0.944(40), min 0.611(2), ave 0.926
Test execution time: sum 192558 ms, max 180318 ms, min 239 ms
----------------------------------------------------------------

2023-08-15 03:28:45 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-15 03:38:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 57 seconds
Variants: generated 100, build-succeeded 50, build-failed 26, syntax-invalid 19, redundant 5
Fitness: max 0.944(50), min 0.944(50), ave 0.944
Test execution time: sum 554591 ms, max 180293 ms, min 234 ms
----------------------------------------------------------------

2023-08-15 03:38:20 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-15 03:41:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 4 minutes 28 seconds
Variants: generated 100, build-succeeded 39, build-failed 37, syntax-invalid 24, redundant 0
Fitness: max 0.944(36), min 0(1), ave 0.906
Test execution time: sum 191637 ms, max 180399 ms, min 86 ms
----------------------------------------------------------------

2023-08-15 03:41:51 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-15 03:48:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 11 minutes 0 seconds
Variants: generated 100, build-succeeded 38, build-failed 36, syntax-invalid 26, redundant 0
Fitness: max 0.944(37), min 0.444(1), ave 0.931
Test execution time: sum 371346 ms, max 180336 ms, min 237 ms
----------------------------------------------------------------

2023-08-15 03:48:23 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-15 04:01:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 23 minutes 39 seconds
Variants: generated 100, build-succeeded 41, build-failed 32, syntax-invalid 25, redundant 2
Fitness: max 1(1), min 0.722(1), ave 0.94
Test execution time: sum 733089 ms, max 180412 ms, min 233 ms
----------------------------------------------------------------

2023-08-15 04:01:02 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-15 04:25:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 48 minutes 15 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 17, redundant 2
Fitness: max 0.944(44), min 0.611(3), ave 0.92
Test execution time: sum 1454482 ms, max 180298 ms, min 232 ms
----------------------------------------------------------------

2023-08-15 04:25:38 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-15 04:32:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 54 minutes 52 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 19, redundant 2
Fitness: max 0.944(46), min 0.611(2), ave 0.931
Test execution time: sum 375625 ms, max 180290 ms, min 240 ms
----------------------------------------------------------------

2023-08-15 04:32:15 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-15 04:47:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 hours 10 minutes 27 seconds
Variants: generated 100, build-succeeded 39, build-failed 38, syntax-invalid 22, redundant 1
Fitness: max 0.944(39), min 0.944(39), ave 0.944
Test execution time: sum 912635 ms, max 180306 ms, min 230 ms
----------------------------------------------------------------

2023-08-15 04:47:50 [main] [INFO]  KGenProgMain - GA stopped
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v5)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v5)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v5)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v5)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v111)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -872,7 +872,6 @@
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
-                    diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
                 diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v111)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v111)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v111)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,8 +955,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v522)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v648)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v648)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    double z = 1;
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,7 +1382,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1402,7 +1401,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v648)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v648)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v648)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v735)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1383,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v735)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v735)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v735)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v803)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v803)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,7 +1381,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v803)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v803)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v803)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v845)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -957,7 +956,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1134,11 +1133,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					break;
                 j -= 4;
             }
             return true;
@@ -1338,7 +1334,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v845)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1301)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,8 +955,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -965,7 +963,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1061,6 +1058,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
             }
         }
 
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1403,7 +1400,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1301)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -965,7 +965,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1403,7 +1401,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1409,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1728)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,10 +954,9 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1382,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,9 +1399,7 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1728)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1728)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1728)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1938)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -965,7 +964,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1399,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1406,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1938)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1938)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v1938)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,12 +1136,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1400,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2047)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,9 +954,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -965,7 +963,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1134,11 +1131,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					dMin = Math.min(dMin, dN);
                 j -= 4;
             }
             return true;
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1404,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2047)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2047)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2047)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -941,7 +939,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,7 +953,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -965,7 +961,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2301)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2301)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,12 +1136,11 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int mBlockIndex = 0;
+					work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1338,7 +1337,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1384,7 +1382,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1409,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:55 [main] [INFO]  PatchLogExporter - patch (v2301)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2406)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2406)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,10 +954,9 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    cachedVt = null;
+                    double sumOffDiag = 0;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2406)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2406)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2406)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2542)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2542)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    cachedVt = null;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1383,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,9 +1400,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2542)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2542)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2542)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2726)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -965,7 +964,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1400,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2726)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2726)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2726)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2843)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    cachedVt = null;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1133,7 +1133,7 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            for (int i = 0; tType < -22; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
@@ -1384,7 +1384,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,8 +1402,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2843)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2843)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v2843)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -965,7 +965,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,8 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1384,14 +1378,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1404,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3236)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,9 +954,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    cachedVt = null;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -965,7 +964,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3236)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3236)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3236)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1101,8 +1100,6 @@
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
                     } else {
-                        // early failure. Divide by 4.
-                        tau *= 0.25;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1399,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1406,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3319)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3327)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    cachedVt = null;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1101,8 +1101,6 @@
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
                     } else {
-                        // early failure. Divide by 4.
-                        tau *= 0.25;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,10 +1134,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int mBlockIndex = 0;
+					work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1403,7 +1399,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3327)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3327)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3327)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -965,7 +964,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1019,8 +1017,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,8 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1405,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3515)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1101,8 +1098,6 @@
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
                     } else {
-                        // early failure. Divide by 4.
-                        tau *= 0.25;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,10 +1131,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int mBlockIndex = 0;
+					work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1368,6 +1362,7 @@
                 } else {
                     work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);
                     d *= work[j4 + 2] / work[j4 - 3];
+					throw new SingularMatrixException();
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4 - 1]);
@@ -1384,7 +1379,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3515)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3515)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3515)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3539)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3539)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,12 +1136,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1378,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3539)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3539)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3539)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3623)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3623)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,7 +955,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    cachedVt = null;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,9 +1380,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3623)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3623)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3623)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    cachedVt = null;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1020,7 +1020,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1101,8 +1100,6 @@
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
                     } else {
-                        // early failure. Divide by 4.
-                        tau *= 0.25;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1377,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:56 [main] [INFO]  PatchLogExporter - patch (v3717)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,7 +1398,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3942)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,9 +954,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,8 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1359,7 +1355,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1382,9 +1377,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3942)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3942)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v3942)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4019)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4019)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -965,7 +963,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1020,7 +1017,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1133,14 +1129,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            for (int i = 0; i < j; i += 4)
+				return false;
             return true;
         }
         return false;
@@ -1391,7 +1381,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1401,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4019)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4019)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4019)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4238)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1135,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    final int upperStart = 5 * main.length;
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,14 +1383,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,15 +1401,12 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4238)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4238)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4238)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4425)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4425)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,8 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1384,14 +1379,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4425)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4425)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4425)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4825)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4825)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,7 +939,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -957,7 +954,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1132,11 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int mBlockIndex = 0;
+					work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4825)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4831)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4831)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1020,7 +1019,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1135,9 +1133,9 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int dimension = 0;
+					final double tmp = work[i + k];
+                    int mBlockIndex = 0;
                 }
                 j -= 4;
             }
@@ -1346,7 +1344,6 @@
                     work[j4] = work[j4 - 1] * tmp;
                     d *= tmp;
                 } else {
-                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4831)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4831)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4831)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4837)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4837)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,10 +1377,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4837)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4837)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v4837)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5006)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5006)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1059,7 +1058,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    ++k;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1359,7 +1355,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5006)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5006)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5006)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1020,7 +1020,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,10 +1135,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1347,7 +1343,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1381,7 +1376,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1401,7 +1395,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5622)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1056,9 +1056,7 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
+                double dot = 0;
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1134,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1346,7 +1341,6 @@
                     work[j4] = work[j4 - 1] * tmp;
                     d *= tmp;
                 } else {
-                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
@@ -1381,10 +1375,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:57 [main] [INFO]  PatchLogExporter - patch (v5645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1056,9 +1055,7 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
+                double dot = 0;
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,12 +1133,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5908)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5908)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -956,8 +955,7 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    cachedVt = null;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1056,9 +1054,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5908)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5908)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v5908)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6603)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6603)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,14 +957,12 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6603)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6603)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6603)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1099,7 +1098,6 @@
                     } else if (dMin1 > 0.0) {
                         // late failure. Gives excellent shift.
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
-                        tType -= 11;
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6646)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6717)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6717)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,17 +954,13 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1135,8 +1131,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    int dimension = 0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1377,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6717)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6717)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v6717)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7201)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7201)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,14 +957,12 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,7 +1377,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1386,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1397,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7201)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7201)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7201)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7218)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7218)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1059,7 +1059,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1135,8 +1134,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    int dimension = 0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1380,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1401,7 +1399,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7218)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7218)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7218)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7602)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7602)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -964,7 +963,6 @@
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1136,10 +1134,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,7 +1377,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7602)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7602)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v7602)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    double sum = 0;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -954,17 +955,13 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,9 +1377,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1403,7 +1397,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v8014)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9532)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9532)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    double sum = 0;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -956,7 +957,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1135,13 +1135,12 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    int dimension = 0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1339,7 +1338,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1402,7 +1400,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9532)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9645)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9645)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1059,7 +1058,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1133,14 +1131,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            for (int i = 0; i < j; i += 4)
+				return false;
             return true;
         }
         return false;
@@ -1382,7 +1374,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v9645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1135,13 +1133,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int dimension = 0;
+					final double tmp = work[i + k];
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1377,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10337)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10337)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    double sum = 0;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -954,10 +955,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1135,11 +1134,10 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    int dimension = 0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1383,7 +1381,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1408,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10337)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10337)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10337)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10547)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10547)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -957,7 +955,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10547)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10547)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10547)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10610)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10610)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -1060,7 +1058,6 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,10 +1133,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,7 +1393,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1411,8 +1402,8 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10610)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10610)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10707)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10707)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -1134,14 +1132,14 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
+                for (int k = 0; j < n; k += step) {
+                    int dimension = 0;
+					final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1412,7 +1409,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10930)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10930)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,8 +1380,11 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1393,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,9 +1402,7 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1411,9 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10940)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10940)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,12 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1407,9 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10940)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10940)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:58 [main] [INFO]  PatchLogExporter - patch (v10940)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,17 +954,14 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1136,10 +1133,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1404,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11342)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11342)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,7 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
+                    double dotProduct = 0;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1412,7 +1409,11 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11342)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11342)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11342)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11701)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11701)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1053,9 +1053,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
+                dMin2 = 0;
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,8 +1378,11 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1391,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,9 +1400,7 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1409,9 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11701)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11701)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11701)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,7 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
+                    double dotProduct = 0;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    String fullClassName = getClass().getName();
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1379,11 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1392,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,8 +1411,9 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11721)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11721)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,7 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
+                    double dotProduct = 0;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1053,9 +1052,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
+                dMin2 = 0;
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,12 +1133,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1376,11 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1389,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1400,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1411,8 +1407,9 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11721)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11722)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11722)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1359,7 +1356,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,8 +1377,11 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,7 +1399,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1411,8 +1408,10 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11722)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11923)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11923)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,8 +1377,11 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1411,11 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v11923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12004)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12004)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1053,9 +1052,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
+                dMin2 = 0;
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,8 +1377,11 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1390,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,9 +1399,7 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1408,9 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12004)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12004)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12004)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12106)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12106)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -955,9 +954,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1053,9 +1050,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
+                dMin2 = 0;
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1135,8 +1130,8 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    int dimension = 0;
+					final double tmp = work[i + k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1338,7 +1333,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1381,8 +1375,11 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            {
+				final double tmp = work[j4 + 1] / work[j4 - 2];
+				work[j4] = work[j4 - 1] * tmp;
+				d *= tmp;
+			}
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,7 +1397,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1412,7 +1407,10 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12106)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12713)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12713)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -201,7 +201,6 @@
             squaredSecondary[i] = s * s;
         }
 
-        this.splitTolerance = splitTolerance;
         decompose();
 
     }
@@ -869,7 +868,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -942,7 +940,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1356,7 +1352,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
-                    work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
@@ -1381,7 +1376,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1405,11 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12713)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12713)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12713)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12831)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12831)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,7 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
+                    double dotProduct = 0;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,8 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1338,7 +1335,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1356,7 +1352,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
-                    work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
@@ -1391,7 +1386,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1397,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1405,13 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12831)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12831)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12831)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12835)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12835)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1338,7 +1335,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1359,7 +1355,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1367,7 +1362,6 @@
                     d *= tmp;
                 } else {
                     work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);
-                    d *= work[j4 + 2] / work[j4 - 3];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4 - 1]);
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,8 +1403,10 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12835)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12835)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v12835)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13014)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13014)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -918,7 +917,6 @@
                             previousEMin = Math.min(previousEMin, work[i + 3]);
                         }
                     }
-                    work[4 * n0 - 2] = offDiagMin;
                     work[4 * n0 - 1] = previousEMin;
                     i0 = split + 1;
                 }
@@ -956,8 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,10 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1404,10 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13014)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13014)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13014)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13610)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13610)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1053,9 +1051,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1339,7 +1333,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1359,7 +1352,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,7 +1373,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1382,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1412,7 +1402,16 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13610)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v13610)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14044)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14044)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -964,7 +963,6 @@
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1052,13 +1050,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1130,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1374,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1412,7 +1404,15 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14044)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14044)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14044)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14911)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14911)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -964,7 +963,6 @@
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1052,10 +1050,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,10 +1130,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1412,7 +1404,16 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			this.realEigenvalues = realEigenvalues;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14911)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14911)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-15 04:47:59 [main] [INFO]  PatchLogExporter - patch (v14911)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-15 04:47:59 [main] [INFO]  KGenProgMain - Summary
Reached generation = 154
Generated variants = 15300
Syntax valid variants = 12798
Build succeeded variants = 7019
Time elapsed = 24 hours 10 minutes 36 seconds
Exit status = FAILURE (time limit)
