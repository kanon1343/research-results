2023-08-09 14:32:44 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-09 14:32:44 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-09 14:32:44 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-09 14:32:44 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math80/kgenprog-80.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math80 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.linear.EigenDecompositionImplTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 1 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/research
version = 1.8.2
================================================================
2023-08-09 14:33:05 [main] [INFO]  KGenProgMain - initial failed tests (1/18)
org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02: null

2023-08-09 14:33:05 [main] [INFO]  KGenProgMain - GA started
2023-08-09 14:33:05 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-09 14:33:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 50, build-succeeded 7, build-failed 39, syntax-invalid 2, redundant 2
Fitness: max 1(1), min 0.944(6), ave 0.952
Test execution time: sum 6159 ms, max 1302 ms, min 642 ms
----------------------------------------------------------------

2023-08-09 14:33:21 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-09 14:39:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 29 seconds
Variants: generated 50, build-succeeded 11, build-failed 36, syntax-invalid 3, redundant 0
Fitness: max 1(1), min 0.889(1), ave 0.944
Test execution time: sum 365080 ms, max 360310 ms, min 338 ms
----------------------------------------------------------------

2023-08-09 14:39:34 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-09 15:13:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 56 seconds
Variants: generated 100, build-succeeded 42, build-failed 26, syntax-invalid 4, redundant 28
Fitness: max 0.944(35), min 0.778(2), ave 0.929
Test execution time: sum 1995869 ms, max 720257 ms, min 275 ms
----------------------------------------------------------------

2023-08-09 15:13:01 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-09 15:13:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 15 seconds
Variants: generated 100, build-succeeded 30, build-failed 32, syntax-invalid 3, redundant 35
Fitness: max 0.944(27), min 0.833(2), ave 0.935
Test execution time: sum 10280 ms, max 442 ms, min 269 ms
----------------------------------------------------------------

2023-08-09 15:13:21 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-09 15:13:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 38 seconds
Variants: generated 100, build-succeeded 36, build-failed 35, syntax-invalid 3, redundant 26
Fitness: max 0.944(35), min 0.444(1), ave 0.931
Test execution time: sum 13007 ms, max 503 ms, min 278 ms
----------------------------------------------------------------

2023-08-09 15:13:44 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-09 15:14:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 0 seconds
Variants: generated 100, build-succeeded 36, build-failed 38, syntax-invalid 8, redundant 18
Fitness: max 1(1), min 0.944(35), ave 0.946
Test execution time: sum 12490 ms, max 575 ms, min 256 ms
----------------------------------------------------------------

2023-08-09 15:14:06 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-09 15:14:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 23 seconds
Variants: generated 100, build-succeeded 40, build-failed 37, syntax-invalid 5, redundant 18
Fitness: max 0.944(40), min 0.944(40), ave 0.944
Test execution time: sum 13138 ms, max 514 ms, min 244 ms
----------------------------------------------------------------

2023-08-09 15:14:28 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-09 15:14:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 49 seconds
Variants: generated 100, build-succeeded 39, build-failed 46, syntax-invalid 7, redundant 8
Fitness: max 0.944(39), min 0.944(39), ave 0.944
Test execution time: sum 14013 ms, max 560 ms, min 258 ms
----------------------------------------------------------------

2023-08-09 15:14:54 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-09 15:51:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 15 seconds
Variants: generated 100, build-succeeded 40, build-failed 37, syntax-invalid 9, redundant 14
Fitness: max 0.944(36), min 0.444(1), ave 0.925
Test execution time: sum 2174939 ms, max 1800309 ms, min 256 ms
----------------------------------------------------------------

2023-08-09 15:51:21 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-09 15:51:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 44 seconds
Variants: generated 100, build-succeeded 39, build-failed 38, syntax-invalid 12, redundant 11
Fitness: max 0.944(39), min 0.944(39), ave 0.944
Test execution time: sum 15623 ms, max 649 ms, min 290 ms
----------------------------------------------------------------

2023-08-09 15:51:50 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-09 15:52:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 16 seconds
Variants: generated 100, build-succeeded 49, build-failed 35, syntax-invalid 8, redundant 8
Fitness: max 0.944(48), min 0.5(1), ave 0.935
Test execution time: sum 19156 ms, max 764 ms, min 297 ms
----------------------------------------------------------------

2023-08-09 15:52:22 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-09 15:52:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 44 seconds
Variants: generated 100, build-succeeded 42, build-failed 38, syntax-invalid 11, redundant 9
Fitness: max 0.944(42), min 0.944(42), ave 0.944
Test execution time: sum 15545 ms, max 647 ms, min 244 ms
----------------------------------------------------------------

2023-08-09 15:52:49 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-09 15:59:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 15 seconds
Variants: generated 100, build-succeeded 46, build-failed 27, syntax-invalid 20, redundant 7
Fitness: max 0.944(42), min 0.667(1), ave 0.931
Test execution time: sum 376882 ms, max 360305 ms, min 264 ms
----------------------------------------------------------------

2023-08-09 15:59:21 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-09 16:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 57 seconds
Variants: generated 100, build-succeeded 51, build-failed 36, syntax-invalid 12, redundant 1
Fitness: max 0.944(50), min 0.833(1), ave 0.942
Test execution time: sum 203213 ms, max 180326 ms, min 256 ms
----------------------------------------------------------------

2023-08-09 16:03:02 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-09 16:03:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 30 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 10, redundant 4
Fitness: max 0.944(47), min 0.944(47), ave 0.944
Test execution time: sum 17813 ms, max 620 ms, min 243 ms
----------------------------------------------------------------

2023-08-09 16:03:36 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-09 16:04:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 57 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 11, redundant 6
Fitness: max 0.944(46), min 0.833(1), ave 0.942
Test execution time: sum 15873 ms, max 488 ms, min 249 ms
----------------------------------------------------------------

2023-08-09 16:04:03 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-09 16:04:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 23 seconds
Variants: generated 100, build-succeeded 45, build-failed 45, syntax-invalid 6, redundant 4
Fitness: max 0.944(45), min 0.944(45), ave 0.944
Test execution time: sum 14518 ms, max 552 ms, min 233 ms
----------------------------------------------------------------

2023-08-09 16:04:29 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-09 16:04:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 48 seconds
Variants: generated 100, build-succeeded 45, build-failed 37, syntax-invalid 9, redundant 9
Fitness: max 0.944(43), min 0.833(2), ave 0.94
Test execution time: sum 14340 ms, max 502 ms, min 245 ms
----------------------------------------------------------------

2023-08-09 16:04:54 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-09 16:11:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 18 seconds
Variants: generated 100, build-succeeded 45, build-failed 46, syntax-invalid 7, redundant 2
Fitness: max 0.944(44), min 0.889(1), ave 0.943
Test execution time: sum 376844 ms, max 360230 ms, min 237 ms
----------------------------------------------------------------

2023-08-09 16:11:24 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-09 16:17:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 45 seconds
Variants: generated 100, build-succeeded 41, build-failed 41, syntax-invalid 15, redundant 3
Fitness: max 0.944(40), min 0.889(1), ave 0.943
Test execution time: sum 373665 ms, max 360173 ms, min 244 ms
----------------------------------------------------------------

2023-08-09 16:17:50 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-09 16:18:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 11 seconds
Variants: generated 100, build-succeeded 45, build-failed 40, syntax-invalid 11, redundant 4
Fitness: max 0.944(42), min 0.5(1), ave 0.931
Test execution time: sum 14368 ms, max 552 ms, min 239 ms
----------------------------------------------------------------

2023-08-09 16:18:17 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-09 16:18:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 36 seconds
Variants: generated 100, build-succeeded 37, build-failed 48, syntax-invalid 13, redundant 2
Fitness: max 0.944(37), min 0.944(37), ave 0.944
Test execution time: sum 12771 ms, max 647 ms, min 235 ms
----------------------------------------------------------------

2023-08-09 16:18:42 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-09 16:22:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 4 seconds
Variants: generated 100, build-succeeded 40, build-failed 46, syntax-invalid 12, redundant 2
Fitness: max 1(2), min 0.944(38), ave 0.947
Test execution time: sum 193158 ms, max 180333 ms, min 245 ms
----------------------------------------------------------------

2023-08-09 16:22:10 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-09 16:22:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 29 seconds
Variants: generated 100, build-succeeded 45, build-failed 39, syntax-invalid 14, redundant 2
Fitness: max 1(1), min 0.833(2), ave 0.941
Test execution time: sum 13333 ms, max 580 ms, min 227 ms
----------------------------------------------------------------

2023-08-09 16:22:34 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-09 16:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 53 seconds
Variants: generated 100, build-succeeded 47, build-failed 43, syntax-invalid 9, redundant 1
Fitness: max 0.944(46), min 0.611(1), ave 0.937
Test execution time: sum 13174 ms, max 398 ms, min 241 ms
----------------------------------------------------------------

2023-08-09 16:22:59 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-09 16:23:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 17 seconds
Variants: generated 100, build-succeeded 40, build-failed 42, syntax-invalid 17, redundant 1
Fitness: max 1(3), min 0.944(37), ave 0.949
Test execution time: sum 11845 ms, max 477 ms, min 226 ms
----------------------------------------------------------------

2023-08-09 16:23:22 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-09 16:23:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 38 seconds
Variants: generated 100, build-succeeded 37, build-failed 43, syntax-invalid 18, redundant 2
Fitness: max 0.944(34), min 0.5(1), ave 0.928
Test execution time: sum 10467 ms, max 489 ms, min 243 ms
----------------------------------------------------------------

2023-08-09 16:23:44 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-09 16:24:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 58 seconds
Variants: generated 100, build-succeeded 33, build-failed 43, syntax-invalid 21, redundant 3
Fitness: max 0.944(33), min 0.944(33), ave 0.944
Test execution time: sum 9602 ms, max 495 ms, min 237 ms
----------------------------------------------------------------

2023-08-09 16:24:04 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-09 16:24:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 22 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 21, redundant 1
Fitness: max 0.944(41), min 0.833(1), ave 0.942
Test execution time: sum 12416 ms, max 437 ms, min 235 ms
----------------------------------------------------------------

2023-08-09 16:24:28 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-09 16:24:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 45 seconds
Variants: generated 100, build-succeeded 43, build-failed 39, syntax-invalid 17, redundant 1
Fitness: max 0.944(43), min 0.944(43), ave 0.944
Test execution time: sum 12601 ms, max 521 ms, min 240 ms
----------------------------------------------------------------

2023-08-09 16:24:51 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-09 16:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 11 seconds
Variants: generated 100, build-succeeded 44, build-failed 37, syntax-invalid 17, redundant 2
Fitness: max 1(1), min 0.833(2), ave 0.941
Test execution time: sum 553194 ms, max 540203 ms, min 234 ms
----------------------------------------------------------------

2023-08-09 16:34:17 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-09 16:37:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 39 seconds
Variants: generated 100, build-succeeded 42, build-failed 39, syntax-invalid 18, redundant 1
Fitness: max 1(2), min 0.944(40), ave 0.947
Test execution time: sum 193634 ms, max 180308 ms, min 234 ms
----------------------------------------------------------------

2023-08-09 16:37:45 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-09 16:38:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 5 seconds
Variants: generated 100, build-succeeded 34, build-failed 48, syntax-invalid 17, redundant 1
Fitness: max 0.944(34), min 0.944(34), ave 0.944
Test execution time: sum 12050 ms, max 598 ms, min 224 ms
----------------------------------------------------------------

2023-08-09 16:38:11 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-09 16:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 37 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 13, redundant 2
Fitness: max 0.944(46), min 0.833(1), ave 0.941
Test execution time: sum 16603 ms, max 576 ms, min 253 ms
----------------------------------------------------------------

2023-08-09 16:38:43 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-09 16:42:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 7 seconds
Variants: generated 100, build-succeeded 44, build-failed 38, syntax-invalid 17, redundant 1
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 194302 ms, max 180288 ms, min 244 ms
----------------------------------------------------------------

2023-08-09 16:42:12 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-09 16:45:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 34 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 14, redundant 2
Fitness: max 1(1), min 0.944(46), ave 0.946
Test execution time: sum 194351 ms, max 180298 ms, min 238 ms
----------------------------------------------------------------

2023-08-09 16:45:40 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-09 16:49:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 3 seconds
Variants: generated 100, build-succeeded 45, build-failed 34, syntax-invalid 19, redundant 2
Fitness: max 0.944(44), min 0.833(1), ave 0.942
Test execution time: sum 194905 ms, max 180262 ms, min 230 ms
----------------------------------------------------------------

2023-08-09 16:49:09 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-09 16:52:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 34 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 19, redundant 1
Fitness: max 0.944(45), min 0.889(1), ave 0.943
Test execution time: sum 195832 ms, max 180363 ms, min 259 ms
----------------------------------------------------------------

2023-08-09 16:52:40 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-09 17:26:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 53 minutes 4 seconds
Variants: generated 100, build-succeeded 39, build-failed 41, syntax-invalid 20, redundant 0
Fitness: max 1(1), min 0(1), ave 0.897
Test execution time: sum 1994271 ms, max 1800229 ms, min 184 ms
----------------------------------------------------------------

2023-08-09 17:26:10 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-09 17:35:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 34 seconds
Variants: generated 100, build-succeeded 40, build-failed 30, syntax-invalid 23, redundant 7
Fitness: max 1(1), min 0.944(39), ave 0.946
Test execution time: sum 554434 ms, max 180382 ms, min 242 ms
----------------------------------------------------------------

2023-08-09 17:35:40 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-09 17:36:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 6 seconds
Variants: generated 100, build-succeeded 41, build-failed 38, syntax-invalid 18, redundant 3
Fitness: max 0.944(41), min 0.944(41), ave 0.944
Test execution time: sum 14764 ms, max 517 ms, min 251 ms
----------------------------------------------------------------

2023-08-09 17:36:12 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-09 17:45:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 38 seconds
Variants: generated 100, build-succeeded 38, build-failed 35, syntax-invalid 25, redundant 2
Fitness: max 0.944(37), min 0.5(1), ave 0.933
Test execution time: sum 554716 ms, max 180342 ms, min 286 ms
----------------------------------------------------------------

2023-08-09 17:45:44 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-09 17:58:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 14 seconds
Variants: generated 100, build-succeeded 43, build-failed 30, syntax-invalid 25, redundant 2
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 737335 ms, max 180423 ms, min 332 ms
----------------------------------------------------------------

2023-08-09 17:58:20 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-09 18:16:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 49 seconds
Variants: generated 100, build-succeeded 39, build-failed 38, syntax-invalid 21, redundant 2
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 1094971 ms, max 180698 ms, min 236 ms
----------------------------------------------------------------

2023-08-09 18:16:55 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-09 18:29:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 56 minutes 14 seconds
Variants: generated 100, build-succeeded 28, build-failed 40, syntax-invalid 29, redundant 3
Fitness: max 1(1), min 0.556(1), ave 0.933
Test execution time: sum 730426 ms, max 180474 ms, min 261 ms
----------------------------------------------------------------

2023-08-09 18:29:20 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-09 18:41:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 41 seconds
Variants: generated 100, build-succeeded 25, build-failed 45, syntax-invalid 29, redundant 1
Fitness: max 0.944(22), min 0.5(1), ave 0.916
Test execution time: sum 729861 ms, max 180459 ms, min 326 ms
----------------------------------------------------------------

2023-08-09 18:41:47 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-09 18:48:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 15 minutes 10 seconds
Variants: generated 100, build-succeeded 33, build-failed 41, syntax-invalid 20, redundant 6
Fitness: max 1(2), min 0.944(31), ave 0.948
Test execution time: sum 371869 ms, max 180417 ms, min 280 ms
----------------------------------------------------------------

2023-08-09 18:48:16 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-09 19:00:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 27 minutes 36 seconds
Variants: generated 100, build-succeeded 31, build-failed 34, syntax-invalid 31, redundant 4
Fitness: max 0.944(30), min 0.667(1), ave 0.935
Test execution time: sum 730951 ms, max 180381 ms, min 266 ms
----------------------------------------------------------------

2023-08-09 19:00:42 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-09 19:22:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 49 minutes 4 seconds
Variants: generated 100, build-succeeded 36, build-failed 41, syntax-invalid 22, redundant 1
Fitness: max 0.944(31), min 0.667(1), ave 0.924
Test execution time: sum 1272777 ms, max 180458 ms, min 251 ms
----------------------------------------------------------------

2023-08-09 19:22:10 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-09 20:07:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 34 minutes 29 seconds
Variants: generated 100, build-succeeded 32, build-failed 42, syntax-invalid 22, redundant 4
Fitness: max 1(2), min 0.444(1), ave 0.918
Test execution time: sum 2711248 ms, max 1800208 ms, min 239 ms
----------------------------------------------------------------

2023-08-09 20:07:35 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-09 20:23:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 49 minutes 57 seconds
Variants: generated 100, build-succeeded 35, build-failed 39, syntax-invalid 21, redundant 5
Fitness: max 0.944(34), min 0.611(1), ave 0.935
Test execution time: sum 911982 ms, max 180455 ms, min 257 ms
----------------------------------------------------------------

2023-08-09 20:23:03 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-09 20:35:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 2 minutes 24 seconds
Variants: generated 100, build-succeeded 34, build-failed 37, syntax-invalid 25, redundant 4
Fitness: max 0.944(32), min 0.833(1), ave 0.94
Test execution time: sum 731812 ms, max 180360 ms, min 250 ms
----------------------------------------------------------------

2023-08-09 20:35:30 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-09 20:38:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 5 minutes 51 seconds
Variants: generated 100, build-succeeded 31, build-failed 33, syntax-invalid 31, redundant 5
Fitness: max 0.944(29), min 0.444(1), ave 0.916
Test execution time: sum 190899 ms, max 180347 ms, min 233 ms
----------------------------------------------------------------

2023-08-09 20:38:57 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-09 20:57:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 minutes 15 seconds
Variants: generated 100, build-succeeded 28, build-failed 37, syntax-invalid 33, redundant 2
Fitness: max 0.944(26), min 0.5(2), ave 0.913
Test execution time: sum 1090466 ms, max 180678 ms, min 266 ms
----------------------------------------------------------------

2023-08-09 20:57:21 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-09 21:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 51 minutes 44 seconds
Variants: generated 100, build-succeeded 37, build-failed 43, syntax-invalid 20, redundant 0
Fitness: max 0.944(36), min 0.833(1), ave 0.941
Test execution time: sum 1632153 ms, max 180451 ms, min 239 ms
----------------------------------------------------------------

2023-08-09 21:24:50 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-09 21:43:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 10 minutes 9 seconds
Variants: generated 100, build-succeeded 31, build-failed 35, syntax-invalid 32, redundant 2
Fitness: max 0.944(29), min 0.833(2), ave 0.937
Test execution time: sum 1090319 ms, max 180448 ms, min 257 ms
----------------------------------------------------------------

2023-08-09 21:43:15 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-09 21:58:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 25 minutes 40 seconds
Variants: generated 100, build-succeeded 41, build-failed 44, syntax-invalid 15, redundant 0
Fitness: max 0.944(39), min 0.444(1), ave 0.93
Test execution time: sum 913549 ms, max 180416 ms, min 243 ms
----------------------------------------------------------------

2023-08-09 21:58:46 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-09 22:44:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 11 minutes 12 seconds
Variants: generated 100, build-succeeded 37, build-failed 42, syntax-invalid 17, redundant 4
Fitness: max 0.944(36), min 0.444(1), ave 0.931
Test execution time: sum 2713606 ms, max 1800283 ms, min 253 ms
----------------------------------------------------------------

2023-08-09 22:44:18 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-09 23:05:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 32 minutes 44 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 23, redundant 2
Fitness: max 1(2), min 0.833(2), ave 0.942
Test execution time: sum 1275393 ms, max 180430 ms, min 271 ms
----------------------------------------------------------------

2023-08-09 23:05:50 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-09 23:21:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 48 minutes 14 seconds
Variants: generated 100, build-succeeded 37, build-failed 39, syntax-invalid 23, redundant 1
Fitness: max 1(1), min 0.556(1), ave 0.935
Test execution time: sum 913090 ms, max 180507 ms, min 249 ms
----------------------------------------------------------------

2023-08-09 23:21:20 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-09 23:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 42 seconds
Variants: generated 100, build-succeeded 33, build-failed 42, syntax-invalid 23, redundant 2
Fitness: max 1(2), min 0.833(3), ave 0.938
Test execution time: sum 553041 ms, max 180429 ms, min 240 ms
----------------------------------------------------------------

2023-08-09 23:30:49 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-09 23:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 16 minutes 17 seconds
Variants: generated 100, build-succeeded 39, build-failed 37, syntax-invalid 23, redundant 1
Fitness: max 1(2), min 0.944(37), ave 0.947
Test execution time: sum 1094569 ms, max 180345 ms, min 259 ms
----------------------------------------------------------------

2023-08-09 23:49:23 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-09 23:58:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 25 minutes 44 seconds
Variants: generated 100, build-succeeded 32, build-failed 34, syntax-invalid 32, redundant 2
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 550976 ms, max 180439 ms, min 206 ms
----------------------------------------------------------------

2023-08-09 23:58:50 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-10 00:11:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 2 seconds
Variants: generated 100, build-succeeded 36, build-failed 36, syntax-invalid 27, redundant 1
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 728535 ms, max 180264 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 00:11:08 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-10 00:32:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 59 minutes 22 seconds
Variants: generated 100, build-succeeded 42, build-failed 38, syntax-invalid 18, redundant 2
Fitness: max 0.944(41), min 0.444(1), ave 0.933
Test execution time: sum 1269547 ms, max 180228 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 00:32:28 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-10 01:02:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 29 minutes 41 seconds
Variants: generated 100, build-succeeded 38, build-failed 39, syntax-invalid 19, redundant 4
Fitness: max 1(1), min 0.833(3), ave 0.937
Test execution time: sum 1808768 ms, max 180283 ms, min 203 ms
----------------------------------------------------------------

2023-08-10 01:02:47 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-10 01:21:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 47 minutes 59 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 24, redundant 0
Fitness: max 0.944(37), min 0.722(1), ave 0.939
Test execution time: sum 1088767 ms, max 180262 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 01:21:06 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-10 01:30:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 57 minutes 19 seconds
Variants: generated 100, build-succeeded 43, build-failed 35, syntax-invalid 21, redundant 1
Fitness: max 0.944(41), min 0.833(2), ave 0.939
Test execution time: sum 549877 ms, max 180314 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 01:30:25 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-10 01:36:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 3 minutes 41 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 20, redundant 2
Fitness: max 1(1), min 0.778(1), ave 0.942
Test execution time: sum 372496 ms, max 180260 ms, min 197 ms
----------------------------------------------------------------

2023-08-10 01:36:48 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-10 01:55:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 22 minutes 1 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 23, redundant 3
Fitness: max 0.944(43), min 0.833(1), ave 0.942
Test execution time: sum 1090006 ms, max 180308 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 01:55:08 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-10 02:10:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 37 minutes 21 seconds
Variants: generated 100, build-succeeded 43, build-failed 31, syntax-invalid 22, redundant 4
Fitness: max 1(1), min 0.944(42), ave 0.946
Test execution time: sum 909470 ms, max 180243 ms, min 199 ms
----------------------------------------------------------------

2023-08-10 02:10:27 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-10 02:28:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 55 minutes 41 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 19, redundant 3
Fitness: max 0.944(44), min 0.944(44), ave 0.944
Test execution time: sum 1090128 ms, max 180263 ms, min 205 ms
----------------------------------------------------------------

2023-08-10 02:28:47 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-10 03:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 29 minutes 3 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 13, redundant 2
Fitness: max 0.944(48), min 0.5(1), ave 0.935
Test execution time: sum 1991478 ms, max 180387 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 03:02:09 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-10 03:14:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 41 minutes 22 seconds
Variants: generated 100, build-succeeded 36, build-failed 37, syntax-invalid 25, redundant 2
Fitness: max 0.944(35), min 0.833(1), ave 0.941
Test execution time: sum 728569 ms, max 180442 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 03:14:28 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-10 03:23:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 50 minutes 43 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 20, redundant 1
Fitness: max 0.944(46), min 0.556(1), ave 0.933
Test execution time: sum 550820 ms, max 180221 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 03:23:49 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-10 03:33:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 1 seconds
Variants: generated 100, build-succeeded 35, build-failed 40, syntax-invalid 24, redundant 1
Fitness: max 0.944(34), min 0.5(1), ave 0.932
Test execution time: sum 548168 ms, max 180277 ms, min 199 ms
----------------------------------------------------------------

2023-08-10 03:33:08 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-10 03:48:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 15 minutes 20 seconds
Variants: generated 100, build-succeeded 34, build-failed 34, syntax-invalid 29, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.941
Test execution time: sum 908046 ms, max 180347 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 03:48:26 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-10 04:00:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 27 minutes 39 seconds
Variants: generated 100, build-succeeded 37, build-failed 37, syntax-invalid 26, redundant 0
Fitness: max 0.944(36), min 0.611(1), ave 0.935
Test execution time: sum 728987 ms, max 180256 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 04:00:45 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-10 04:07:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 33 minutes 54 seconds
Variants: generated 100, build-succeeded 22, build-failed 46, syntax-invalid 31, redundant 1
Fitness: max 0.944(22), min 0.944(22), ave 0.944
Test execution time: sum 365374 ms, max 180218 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 04:07:01 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-10 04:19:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 46 minutes 13 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 31, redundant 1
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 728537 ms, max 360236 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 04:19:19 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-10 04:34:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 1 minutes 30 seconds
Variants: generated 100, build-succeeded 33, build-failed 33, syntax-invalid 31, redundant 3
Fitness: max 1(1), min 0.5(2), ave 0.919
Test execution time: sum 907504 ms, max 180223 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 04:34:37 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-10 04:52:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 19 minutes 48 seconds
Variants: generated 100, build-succeeded 33, build-failed 35, syntax-invalid 29, redundant 3
Fitness: max 0.944(31), min 0.5(1), ave 0.919
Test execution time: sum 1087232 ms, max 180242 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 04:52:55 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-10 05:20:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 47 minutes 7 seconds
Variants: generated 100, build-succeeded 35, build-failed 34, syntax-invalid 29, redundant 2
Fitness: max 0.944(33), min 0.833(2), ave 0.938
Test execution time: sum 1627936 ms, max 180326 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 05:20:13 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-10 05:32:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 59 minutes 23 seconds
Variants: generated 100, build-succeeded 30, build-failed 29, syntax-invalid 38, redundant 3
Fitness: max 1(1), min 0(1), ave 0.891
Test execution time: sum 726789 ms, max 180243 ms, min 76 ms
----------------------------------------------------------------

2023-08-10 05:32:30 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-10 05:41:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 8 minutes 39 seconds
Variants: generated 100, build-succeeded 26, build-failed 38, syntax-invalid 34, redundant 2
Fitness: max 0.944(26), min 0.944(26), ave 0.944
Test execution time: sum 545927 ms, max 180230 ms, min 203 ms
----------------------------------------------------------------

2023-08-10 05:41:45 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-10 06:00:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 26 minutes 58 seconds
Variants: generated 100, build-succeeded 38, build-failed 29, syntax-invalid 32, redundant 1
Fitness: max 1(2), min 0.444(1), ave 0.925
Test execution time: sum 1088478 ms, max 180243 ms, min 199 ms
----------------------------------------------------------------

2023-08-10 06:00:04 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-10 06:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 33 minutes 17 seconds
Variants: generated 100, build-succeeded 35, build-failed 43, syntax-invalid 20, redundant 2
Fitness: max 1(1), min 0.944(34), ave 0.946
Test execution time: sum 368451 ms, max 180233 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 06:06:24 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-10 06:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 39 minutes 35 seconds
Variants: generated 100, build-succeeded 35, build-failed 33, syntax-invalid 30, redundant 2
Fitness: max 1(1), min 0.444(1), ave 0.932
Test execution time: sum 367902 ms, max 180251 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 06:12:42 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-10 06:25:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 51 minutes 54 seconds
Variants: generated 100, build-succeeded 35, build-failed 35, syntax-invalid 26, redundant 4
Fitness: max 0.944(34), min 0.833(1), ave 0.941
Test execution time: sum 727857 ms, max 180289 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 06:25:01 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-10 06:31:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 58 minutes 15 seconds
Variants: generated 100, build-succeeded 41, build-failed 35, syntax-invalid 23, redundant 1
Fitness: max 0.944(40), min 0.833(1), ave 0.942
Test execution time: sum 369505 ms, max 180301 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 06:31:22 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-10 06:31:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 58 minutes 36 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 24, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.934
Test execution time: sum 9850 ms, max 502 ms, min 197 ms
----------------------------------------------------------------

2023-08-10 06:31:43 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-10 06:56:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 22 minutes 58 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 19, redundant 3
Fitness: max 0.944(40), min 0.5(2), ave 0.919
Test execution time: sum 1449942 ms, max 180260 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 06:56:05 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-10 07:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 35 minutes 18 seconds
Variants: generated 100, build-succeeded 39, build-failed 32, syntax-invalid 27, redundant 2
Fitness: max 0.944(36), min 0.5(1), ave 0.929
Test execution time: sum 728890 ms, max 360146 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 07:08:25 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-10 07:11:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 38 minutes 35 seconds
Variants: generated 100, build-succeeded 25, build-failed 38, syntax-invalid 35, redundant 2
Fitness: max 0.944(24), min 0.5(1), ave 0.927
Test execution time: sum 185742 ms, max 180285 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 07:11:42 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-10 07:48:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 14 minutes 55 seconds
Variants: generated 100, build-succeeded 34, build-failed 36, syntax-invalid 29, redundant 1
Fitness: max 0.944(33), min 0.444(1), ave 0.93
Test execution time: sum 2167833 ms, max 1800224 ms, min 197 ms
----------------------------------------------------------------

2023-08-10 07:48:02 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-10 07:54:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 21 minutes 13 seconds
Variants: generated 100, build-succeeded 32, build-failed 35, syntax-invalid 33, redundant 0
Fitness: max 1(1), min 0.944(31), ave 0.946
Test execution time: sum 367380 ms, max 180218 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 07:54:20 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-10 08:15:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 42 minutes 33 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 28, redundant 3
Fitness: max 0.944(37), min 0.5(1), ave 0.932
Test execution time: sum 1269075 ms, max 360469 ms, min 197 ms
----------------------------------------------------------------

2023-08-10 08:15:40 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-10 08:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 57 minutes 53 seconds
Variants: generated 100, build-succeeded 36, build-failed 31, syntax-invalid 30, redundant 3
Fitness: max 0.944(35), min 0.833(1), ave 0.941
Test execution time: sum 908159 ms, max 180227 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 08:30:59 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-10 08:40:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 7 minutes 13 seconds
Variants: generated 100, build-succeeded 40, build-failed 35, syntax-invalid 25, redundant 0
Fitness: max 1(1), min 0.5(1), ave 0.929
Test execution time: sum 549165 ms, max 180227 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 08:40:20 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-10 08:49:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 16 minutes 31 seconds
Variants: generated 100, build-succeeded 29, build-failed 39, syntax-invalid 32, redundant 0
Fitness: max 0.944(29), min 0.944(29), ave 0.944
Test execution time: sum 546949 ms, max 180220 ms, min 207 ms
----------------------------------------------------------------

2023-08-10 08:49:38 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-10 08:49:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 16 minutes 50 seconds
Variants: generated 100, build-succeeded 31, build-failed 38, syntax-invalid 29, redundant 2
Fitness: max 0.944(31), min 0.944(31), ave 0.944
Test execution time: sum 7161 ms, max 380 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 08:49:57 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-10 08:53:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 20 minutes 9 seconds
Variants: generated 100, build-succeeded 36, build-failed 29, syntax-invalid 32, redundant 3
Fitness: max 0.944(36), min 0.944(36), ave 0.944
Test execution time: sum 188375 ms, max 180221 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 08:53:16 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-10 08:59:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 26 minutes 27 seconds
Variants: generated 100, build-succeeded 28, build-failed 35, syntax-invalid 33, redundant 4
Fitness: max 0.944(28), min 0.944(28), ave 0.944
Test execution time: sum 366430 ms, max 180223 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 08:59:34 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-10 08:59:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 26 minutes 45 seconds
Variants: generated 100, build-succeeded 34, build-failed 31, syntax-invalid 32, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.943
Test execution time: sum 8000 ms, max 435 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 08:59:52 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-10 09:09:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 36 minutes 4 seconds
Variants: generated 100, build-succeeded 31, build-failed 36, syntax-invalid 30, redundant 3
Fitness: max 0.944(30), min 0.5(1), ave 0.93
Test execution time: sum 547142 ms, max 360134 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 09:09:10 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-10 09:12:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 39 minutes 24 seconds
Variants: generated 100, build-succeeded 40, build-failed 33, syntax-invalid 26, redundant 1
Fitness: max 0.944(39), min 0.833(1), ave 0.942
Test execution time: sum 188812 ms, max 180216 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 09:12:31 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-10 09:21:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 48 minutes 43 seconds
Variants: generated 100, build-succeeded 29, build-failed 39, syntax-invalid 31, redundant 1
Fitness: max 0.944(26), min 0.5(1), ave 0.921
Test execution time: sum 546681 ms, max 540133 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 09:21:50 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-10 09:52:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 19 minutes 3 seconds
Variants: generated 100, build-succeeded 35, build-failed 35, syntax-invalid 30, redundant 0
Fitness: max 0.944(34), min 0.444(1), ave 0.93
Test execution time: sum 1808042 ms, max 1800180 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 09:52:10 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-10 09:55:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 22 minutes 24 seconds
Variants: generated 100, build-succeeded 40, build-failed 30, syntax-invalid 27, redundant 3
Fitness: max 0.944(37), min 0.222(1), ave 0.901
Test execution time: sum 189252 ms, max 180220 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 09:55:31 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-10 10:01:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 28 minutes 44 seconds
Variants: generated 100, build-succeeded 37, build-failed 30, syntax-invalid 33, redundant 0
Fitness: max 0.944(34), min 0.5(1), ave 0.928
Test execution time: sum 368363 ms, max 360134 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 10:01:51 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-10 10:05:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 32 minutes 5 seconds
Variants: generated 100, build-succeeded 40, build-failed 27, syntax-invalid 31, redundant 2
Fitness: max 0.944(40), min 0.944(40), ave 0.944
Test execution time: sum 189280 ms, max 180221 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 10:05:12 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-10 10:08:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 35 minutes 24 seconds
Variants: generated 100, build-succeeded 32, build-failed 36, syntax-invalid 31, redundant 1
Fitness: max 0.944(31), min 0.444(1), ave 0.929
Test execution time: sum 186810 ms, max 180214 ms, min 198 ms
----------------------------------------------------------------

2023-08-10 10:08:31 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-10 10:11:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 38 minutes 45 seconds
Variants: generated 100, build-succeeded 35, build-failed 37, syntax-invalid 26, redundant 2
Fitness: max 0.944(33), min 0.722(1), ave 0.935
Test execution time: sum 188195 ms, max 180221 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 10:11:52 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-10 10:12:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 39 minutes 6 seconds
Variants: generated 100, build-succeeded 39, build-failed 27, syntax-invalid 33, redundant 1
Fitness: max 0.944(36), min 0.5(1), ave 0.929
Test execution time: sum 9178 ms, max 447 ms, min 199 ms
----------------------------------------------------------------

2023-08-10 10:12:13 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-10 10:12:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 39 minutes 27 seconds
Variants: generated 100, build-succeeded 34, build-failed 37, syntax-invalid 29, redundant 0
Fitness: max 0.944(31), min 0.833(2), ave 0.936
Test execution time: sum 7641 ms, max 337 ms, min 203 ms
----------------------------------------------------------------

2023-08-10 10:12:34 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-10 10:15:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 42 minutes 47 seconds
Variants: generated 100, build-succeeded 33, build-failed 33, syntax-invalid 34, redundant 0
Fitness: max 0.944(30), min 0.5(2), ave 0.906
Test execution time: sum 187315 ms, max 180120 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 10:15:54 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-10 10:16:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 43 minutes 6 seconds
Variants: generated 100, build-succeeded 29, build-failed 37, syntax-invalid 34, redundant 0
Fitness: max 0.944(27), min 0(1), ave 0.91
Test execution time: sum 6877 ms, max 545 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 10:16:13 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-10 10:19:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 46 minutes 26 seconds
Variants: generated 100, build-succeeded 29, build-failed 39, syntax-invalid 31, redundant 1
Fitness: max 0.944(28), min 0.833(1), ave 0.941
Test execution time: sum 186881 ms, max 180214 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 10:19:32 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-10 10:49:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 16 minutes 43 seconds
Variants: generated 100, build-succeeded 27, build-failed 36, syntax-invalid 34, redundant 3
Fitness: max 1(1), min 0.444(1), ave 0.907
Test execution time: sum 1806260 ms, max 1800159 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 10:49:50 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-10 10:50:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 17 minutes 1 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 41, redundant 1
Fitness: max 0.944(26), min 0.222(1), ave 0.915
Test execution time: sum 6328 ms, max 331 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 10:50:08 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-10 10:53:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 20 minutes 23 seconds
Variants: generated 100, build-succeeded 38, build-failed 30, syntax-invalid 30, redundant 2
Fitness: max 0.944(38), min 0.944(38), ave 0.944
Test execution time: sum 188721 ms, max 180220 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 10:53:29 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-10 10:56:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 23 minutes 43 seconds
Variants: generated 100, build-succeeded 34, build-failed 29, syntax-invalid 35, redundant 2
Fitness: max 1(1), min 0.5(1), ave 0.926
Test execution time: sum 187616 ms, max 180212 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 10:56:50 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-10 10:57:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 24 minutes 0 seconds
Variants: generated 100, build-succeeded 20, build-failed 37, syntax-invalid 41, redundant 2
Fitness: max 0.944(20), min 0.944(20), ave 0.944
Test execution time: sum 4865 ms, max 441 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 10:57:06 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-10 11:00:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 27 minutes 18 seconds
Variants: generated 100, build-succeeded 29, build-failed 32, syntax-invalid 37, redundant 2
Fitness: max 0.944(27), min 0.833(2), ave 0.937
Test execution time: sum 186584 ms, max 180244 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 11:00:25 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-10 11:03:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 30 minutes 38 seconds
Variants: generated 100, build-succeeded 27, build-failed 40, syntax-invalid 33, redundant 0
Fitness: max 0.944(26), min 0.5(1), ave 0.928
Test execution time: sum 186315 ms, max 180227 ms, min 203 ms
----------------------------------------------------------------

2023-08-10 11:03:45 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-10 11:16:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 42 minutes 57 seconds
Variants: generated 100, build-succeeded 29, build-failed 30, syntax-invalid 39, redundant 2
Fitness: max 0.944(27), min 0.5(2), ave 0.914
Test execution time: sum 726730 ms, max 360121 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 11:16:04 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-10 11:19:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 46 minutes 14 seconds
Variants: generated 100, build-succeeded 20, build-failed 39, syntax-invalid 40, redundant 1
Fitness: max 1(1), min 0.833(2), ave 0.936
Test execution time: sum 184787 ms, max 180220 ms, min 205 ms
----------------------------------------------------------------

2023-08-10 11:19:21 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-10 11:28:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 55 minutes 31 seconds
Variants: generated 100, build-succeeded 20, build-failed 36, syntax-invalid 44, redundant 0
Fitness: max 1(1), min 0.833(1), ave 0.942
Test execution time: sum 544851 ms, max 180222 ms, min 206 ms
----------------------------------------------------------------

2023-08-10 11:28:38 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-10 11:28:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 55 minutes 45 seconds
Variants: generated 100, build-succeeded 14, build-failed 32, syntax-invalid 52, redundant 2
Fitness: max 1(1), min 0.944(13), ave 0.948
Test execution time: sum 3068 ms, max 329 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 11:28:52 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-10 11:41:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 8 minutes 3 seconds
Variants: generated 100, build-succeeded 24, build-failed 31, syntax-invalid 45, redundant 0
Fitness: max 0.944(22), min 0.5(1), ave 0.924
Test execution time: sum 725670 ms, max 180227 ms, min 206 ms
----------------------------------------------------------------

2023-08-10 11:41:10 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-10 11:47:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 14 minutes 17 seconds
Variants: generated 100, build-succeeded 10, build-failed 36, syntax-invalid 52, redundant 2
Fitness: max 0.944(10), min 0.944(10), ave 0.944
Test execution time: sum 362344 ms, max 180357 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 11:47:24 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-10 11:56:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 23 minutes 35 seconds
Variants: generated 100, build-succeeded 21, build-failed 36, syntax-invalid 43, redundant 0
Fitness: max 0.944(20), min 0.833(1), ave 0.939
Test execution time: sum 544697 ms, max 180225 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 11:56:42 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-10 11:56:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 23 minutes 52 seconds
Variants: generated 100, build-succeeded 18, build-failed 33, syntax-invalid 46, redundant 3
Fitness: max 1(1), min 0.944(17), ave 0.948
Test execution time: sum 3948 ms, max 247 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 11:56:58 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-10 12:03:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 30 minutes 9 seconds
Variants: generated 100, build-succeeded 23, build-failed 30, syntax-invalid 42, redundant 5
Fitness: max 0.944(22), min 0.611(1), ave 0.93
Test execution time: sum 365231 ms, max 180227 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 12:03:16 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-10 12:09:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 36 minutes 28 seconds
Variants: generated 100, build-succeeded 25, build-failed 26, syntax-invalid 45, redundant 4
Fitness: max 1(1), min 0.833(1), ave 0.942
Test execution time: sum 365845 ms, max 180224 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 12:09:34 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-10 12:15:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 42 minutes 44 seconds
Variants: generated 100, build-succeeded 17, build-failed 34, syntax-invalid 46, redundant 3
Fitness: max 0.944(17), min 0.944(17), ave 0.944
Test execution time: sum 363806 ms, max 180225 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 12:15:51 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-10 12:22:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 49 minutes 2 seconds
Variants: generated 100, build-succeeded 21, build-failed 38, syntax-invalid 38, redundant 3
Fitness: max 0.944(19), min 0.611(1), ave 0.923
Test execution time: sum 364629 ms, max 180217 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 12:22:09 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-10 12:37:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 4 minutes 21 seconds
Variants: generated 100, build-succeeded 25, build-failed 33, syntax-invalid 42, redundant 0
Fitness: max 0.944(24), min 0.833(1), ave 0.94
Test execution time: sum 905616 ms, max 180219 ms, min 199 ms
----------------------------------------------------------------

2023-08-10 12:37:28 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-10 12:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 10 minutes 39 seconds
Variants: generated 100, build-succeeded 26, build-failed 32, syntax-invalid 41, redundant 1
Fitness: max 0.944(24), min 0.889(2), ave 0.94
Test execution time: sum 365789 ms, max 180236 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 12:43:46 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-10 13:02:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 28 minutes 58 seconds
Variants: generated 100, build-succeeded 24, build-failed 32, syntax-invalid 42, redundant 2
Fitness: max 0.944(22), min 0.611(1), ave 0.926
Test execution time: sum 1085594 ms, max 180307 ms, min 205 ms
----------------------------------------------------------------

2023-08-10 13:02:05 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-10 13:23:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 50 minutes 15 seconds
Variants: generated 100, build-succeeded 20, build-failed 30, syntax-invalid 49, redundant 1
Fitness: max 0.944(19), min 0.833(1), ave 0.939
Test execution time: sum 1264306 ms, max 540140 ms, min 205 ms
----------------------------------------------------------------

2023-08-10 13:23:22 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-10 13:35:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 2 minutes 34 seconds
Variants: generated 100, build-succeeded 24, build-failed 34, syntax-invalid 39, redundant 3
Fitness: max 1(1), min 0.5(1), ave 0.921
Test execution time: sum 725581 ms, max 180308 ms, min 202 ms
----------------------------------------------------------------

2023-08-10 13:35:41 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-10 13:50:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 17 minutes 52 seconds
Variants: generated 100, build-succeeded 21, build-failed 33, syntax-invalid 44, redundant 2
Fitness: max 0.944(18), min 0.5(3), ave 0.881
Test execution time: sum 904833 ms, max 180270 ms, min 200 ms
----------------------------------------------------------------

2023-08-10 13:50:59 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-10 14:06:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 33 minutes 8 seconds
Variants: generated 100, build-succeeded 19, build-failed 28, syntax-invalid 50, redundant 3
Fitness: max 1(1), min 0.833(1), ave 0.942
Test execution time: sum 904681 ms, max 180220 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 14:06:15 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-10 14:09:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 36 minutes 24 seconds
Variants: generated 100, build-succeeded 13, build-failed 40, syntax-invalid 47, redundant 0
Fitness: max 1(1), min 0.944(12), ave 0.949
Test execution time: sum 183151 ms, max 180227 ms, min 201 ms
----------------------------------------------------------------

2023-08-10 14:09:31 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-10 14:12:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 39 minutes 41 seconds
Variants: generated 100, build-succeeded 21, build-failed 32, syntax-invalid 47, redundant 0
Fitness: max 0.944(20), min 0.556(1), ave 0.926
Test execution time: sum 184842 ms, max 180274 ms, min 204 ms
----------------------------------------------------------------

2023-08-10 14:12:48 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-10 14:46:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 hours 12 minutes 58 seconds
Variants: generated 100, build-succeeded 16, build-failed 37, syntax-invalid 47, redundant 0
Fitness: max 0.944(15), min 0.444(1), ave 0.913
Test execution time: sum 1983708 ms, max 1800194 ms, min 203 ms
----------------------------------------------------------------

2023-08-10 14:46:05 [main] [INFO]  KGenProgMain - GA stopped
2023-08-10 14:46:08 [main] [INFO]  PatchLogExporter - patch (v26)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-08-10 14:46:08 [main] [INFO]  PatchLogExporter - patch (v26)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:08 [main] [INFO]  PatchLogExporter - patch (v26)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:08 [main] [INFO]  PatchLogExporter - patch (v26)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1526,8 +1525,6 @@
                 }
             } else if (dMin == dN2) {
 
-                // case 5.
-                tType = -5;
                 double s = 0.25 * dMin;
 
                 // compute contribution to norm squared from i > nn-2.
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,7 +1135,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    cachedV = null;
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1380,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2145)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -953,9 +952,9 @@
             for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
+				int index = 0;
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,8 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1400,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2145)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2145)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2145)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -953,6 +952,7 @@
             for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
+				int index = 0;
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
@@ -1053,9 +1053,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1399,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1406,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
         }
         dMin = Math.min(dMin, dN);
 
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2247)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -836,9 +836,6 @@
             return;
         }
 
-        // initial checks for splits (see Parlett & Marques section 3.3)
-        flipIfWarranted(n, 2);
-
         // two iterations with Li's test for initial splits
         initialSplits(n);
 
@@ -953,9 +950,9 @@
             for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
+				int index = 0;
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1053,9 +1050,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1137,7 +1131,6 @@
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1350,7 +1343,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1384,7 +1376,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1103,6 +1103,7 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
+						int outIndex = 0;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,7 +1137,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1350,7 +1350,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1381,10 +1380,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1400,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1408,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
         }
         dMin = Math.min(dMin, dN);
 
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2437)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2461)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2461)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,8 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1400,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1407,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
         }
         dMin = Math.min(dMin, dN);
 
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2461)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2461)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2461)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,8 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1384,7 +1382,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1401,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1408,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
         }
         dMin = Math.min(dMin, dN);
 
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2498)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2940)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2940)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,10 +1136,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
+                int outBlockIndex = 0;
+				j -= 4;
             }
             return true;
         }
@@ -1381,10 +1381,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,10 +1399,8 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2940)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2940)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v2940)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3078)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3078)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1103,6 +1103,7 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
+						int outIndex = 0;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,7 +1137,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1384,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1411,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
         }
         dMin = Math.min(dMin, dN);
 
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3078)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3078)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3078)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3082)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3082)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1056,9 +1056,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1170,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1381,10 +1376,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,7 +1394,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3082)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3082)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3082)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3439)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3439)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1173,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1350,7 +1348,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1381,10 +1378,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1399,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1810,6 +1804,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3439)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3439)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3439)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1173,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1381,10 +1379,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,7 +1396,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1810,6 +1804,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3803)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1103,6 +1099,7 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
+						int outIndex = 0;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1170,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1383,8 +1378,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1810,6 +1803,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3803)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3803)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v3803)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4148)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4148)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -955,7 +953,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,10 +1133,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1170,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1350,7 +1345,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1396,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4148)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4148)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4148)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4183)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,7 +952,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1053,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,12 +1130,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1376,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1395,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1810,6 +1800,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4183)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4183)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4183)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4255)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,12 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1350,7 +1346,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1381,10 +1376,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,8 +1396,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4255)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4255)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4255)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4389)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4389)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,12 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1350,7 +1342,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1384,7 +1375,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1810,6 +1800,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4389)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4389)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4389)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4560)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1350,7 +1347,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1381,17 +1377,14 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1396,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1404,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
         }
         dMin = Math.min(dMin, dN);
 
@@ -1810,6 +1802,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4560)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4560)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4560)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4591)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4591)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1350,7 +1347,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,8 +1398,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1810,6 +1803,7 @@
         }
         work[6 * nM1 + 1] = d[nM1] + si;
         work[6 * nM1]     = si;
+		return;
     }
 
     /**
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4591)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4591)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4591)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4866)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4866)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,10 +1135,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1381,10 +1377,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,10 +1395,8 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4866)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4866)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4866)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4872)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
@@ -884,7 +882,6 @@
         checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
-            dot += data[i] * v[i];
         }
         return dot;
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4872)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1132,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1403,7 +1396,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4872)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4872)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v4872)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5739)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,10 +279,8 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5739)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1056,9 +1056,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1106,7 +1103,6 @@
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
-                    tau = 0.0;
                 } else {
                     // possible underflow. Play it safe.
                     loop = false;
@@ -1135,9 +1131,6 @@
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1175,7 +1168,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1337,7 +1330,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,10 +1373,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5739)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5739)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5739)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5782)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5782)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1136,12 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1358,7 +1354,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,10 +1376,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,9 +1394,7 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5782)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5782)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5782)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,7 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1171,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1337,7 +1333,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,10 +1376,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,10 +1394,8 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5971)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5971)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,10 +1133,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1169,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1350,7 +1344,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1358,7 +1351,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1384,7 +1376,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1394,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5999)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,10 +279,8 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
@@ -793,7 +790,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -884,7 +880,6 @@
         checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
-            dot += data[i] * v[i];
         }
         return dot;
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5999)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,7 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
+                    dMin1 = dMin;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1020,7 +1020,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1173,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1358,7 +1356,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1403,7 +1400,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5999)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5999)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v5999)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6051)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,10 +279,8 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6051)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -1020,7 +1019,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1171,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1398,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6051)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6051)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6051)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6075)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,10 +279,8 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6075)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -954,7 +952,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1053,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,12 +1130,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1166,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1197,7 +1188,7 @@
         // search upper eigenvalue
         left  = lower - margin;
         right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1381,7 +1372,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6075)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6075)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:09 [main] [INFO]  PatchLogExporter - patch (v6075)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6120)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6120)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,9 +952,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,8 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1358,7 +1351,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,10 +1373,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1393,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6120)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6120)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6208)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,10 +279,8 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
@@ -793,7 +790,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6208)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1106,7 +1104,6 @@
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
-                    tau = 0.0;
                 } else {
                     // possible underflow. Play it safe.
                     loop = false;
@@ -1136,12 +1133,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1169,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6208)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6208)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6208)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6405)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,10 +279,8 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6405)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1020,7 +1019,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1350,7 +1346,6 @@
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4]);
             }
         } else {
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
@@ -1358,7 +1353,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1384,14 +1378,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,7 +1396,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,9 +954,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,12 +1134,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1169,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1197,7 +1191,7 @@
         // search upper eigenvalue
         left  = lower - margin;
         right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1396,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6930)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6930)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,10 +953,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1167,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1197,7 +1189,7 @@
         // search upper eigenvalue
         left  = lower - margin;
         right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1384,7 +1376,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1394,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v6930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7510)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -903,9 +898,6 @@
     /** {@inheritDoc} */
     public double getNorm() {
         double sum = 0;
-        for (double a : data) {
-            sum += a * a;
-        }
         return Math.sqrt(sum);
     }
 
@@ -946,7 +938,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7510)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -910,7 +909,6 @@
                             work[i + 2]  = -sigma;
                             split        = i / 4;
                             diagMax      = 0;
-                            offDiagMin   = work[i + 6];
                             previousEMin = work[i + 7];
                         } else {
                             diagMax      = Math.max(diagMax, work[i + 4]);
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1358,7 +1355,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,10 +1377,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7510)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7820)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7820)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -956,7 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1020,7 +1017,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1052,7 +1048,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1169,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1382,9 +1376,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1396,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7820)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7820)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7820)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7838)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -906,7 +901,8 @@
         for (double a : data) {
             sum += a * a;
         }
-        return Math.sqrt(sum);
+        boolean infiniteFound = false;
+		return Math.sqrt(sum);
     }
 
     /** {@inheritDoc} */
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7838)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,7 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1020,7 +1017,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1052,7 +1048,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,12 +1131,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,10 +1374,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7838)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7994)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7994)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,13 +869,11 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -956,7 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1020,7 +1017,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1170,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1358,7 +1353,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1382,9 +1376,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7994)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7994)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v7994)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8240)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8240)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1020,7 +1019,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1052,7 +1050,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1358,7 +1353,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1382,7 +1376,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1803,7 +1795,6 @@
             final double diP1 = di + si;
             final double liP1 = li * di / diP1;
             work[sixI]        = si;
-            work[sixI + 1]    = diP1;
             work[sixI + 2]    = liP1;
             si = li * liP1 * si - lambda;
             sixI += 6;
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8240)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8240)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8240)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8498)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8498)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1052,7 +1050,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1315,7 +1310,6 @@
         dMin = Math.min(dMin, dN);
 
         work[j4 + 2] = dN;
-        work[4 * end - pingPong - 1] = eMin;
 
     }
 
@@ -1382,9 +1376,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8498)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8498)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8498)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8499)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -906,7 +901,8 @@
         for (double a : data) {
             sum += a * a;
         }
-        return Math.sqrt(sum);
+        boolean infiniteFound = false;
+		return Math.sqrt(sum);
     }
 
     /** {@inheritDoc} */
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8499)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -571,7 +571,6 @@
         final int m     = main.length;
         final int lowerStart = 4 * m;
         final int upperStart = 5 * m;
-        lowerSpectra = Double.POSITIVE_INFINITY;
         upperSpectra = Double.NEGATIVE_INFINITY;
         double eMax = 0;
 
@@ -869,13 +868,11 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -942,7 +939,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,10 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1169,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1347,7 +1341,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1382,9 +1375,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1395,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8499)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8499)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8499)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,16 +1377,13 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8651)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8651)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1172,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1315,7 +1312,6 @@
         dMin = Math.min(dMin, dN);
 
         work[j4 + 2] = dN;
-        work[4 * end - pingPong - 1] = eMin;
 
     }
 
@@ -1358,7 +1354,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,10 +1376,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8651)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8651)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8651)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8949)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8949)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1019,8 +1017,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1337,7 +1332,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1384,14 +1378,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,7 +1396,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v8949)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,14 +868,12 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -956,7 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1332,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1381,17 +1376,13 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1402,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9713)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9713)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,14 +868,12 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -941,8 +939,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -956,8 +952,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,10 +1130,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1356,7 +1348,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
-                    work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
@@ -1384,14 +1375,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,7 +1393,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9713)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9713)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v9713)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v10214)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -906,7 +901,8 @@
         for (double a : data) {
             sum += a * a;
         }
-        return Math.sqrt(sum);
+        boolean infiniteFound = false;
+		return Math.sqrt(sum);
     }
 
     /** {@inheritDoc} */
@@ -946,7 +942,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +987,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1032,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v10214)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,12 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1175,7 +1171,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1356,9 +1352,7 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
-                    work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1384,14 +1378,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v10214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v10214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v10214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -849,8 +849,6 @@
         dN    = 0;
         dN1   = 0;
         dN2   = 0;
-        tau   = 0;
-
         // process split segments
         int i0 = 0;
         int n0 = n;
@@ -875,7 +873,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -941,7 +938,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -957,7 +953,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1020,7 +1015,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1130,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1168,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1337,9 +1330,7 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1384,7 +1375,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v11719)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12006)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12006)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -849,8 +849,6 @@
         dN    = 0;
         dN1   = 0;
         dN2   = 0;
-        tau   = 0;
-
         // process split segments
         int i0 = 0;
         int n0 = n;
@@ -869,7 +867,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,7 +938,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -955,7 +951,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1056,9 +1051,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1128,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1166,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1347,7 +1338,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1381,17 +1371,15 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
+			double max = 0;
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1391,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1411,7 +1398,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
@@ -1561,7 +1547,7 @@
                     a2 = cnst3 * a2;
                 }
 
-                if (a2 < cnst1) {
+                if (dMin == dN) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12006)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12006)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12006)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12597)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12597)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1020,7 +1019,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1172,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1339,7 +1336,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1381,17 +1377,14 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,10 +1394,8 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1561,7 +1552,7 @@
                     a2 = cnst3 * a2;
                 }
 
-                if (a2 < cnst1) {
+                if (dMin == dN) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12597)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12597)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12597)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12608)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12608)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1052,13 +1050,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1134,12 +1128,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+                for (int k = 0; k < 4; k += step)
+					dMin1 = dMin;
             }
             return true;
         }
@@ -1175,7 +1165,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1197,7 +1187,7 @@
         // search upper eigenvalue
         left  = lower - margin;
         right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1338,8 +1328,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1381,10 +1369,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,10 +1386,8 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1561,7 +1544,7 @@
                     a2 = cnst3 * a2;
                 }
 
-                if (a2 < cnst1) {
+                if (dMin == dN) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12608)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12608)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12608)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12740)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12740)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +952,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1052,13 +1049,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1129,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1166,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1381,17 +1372,14 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,8 +1391,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v12740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13131)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13131)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,8 +953,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
+                    Arrays.sort(realEigenvalues);
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1020,7 +1018,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1053,12 +1050,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1127,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1163,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1367,7 +1355,6 @@
                     d *= tmp;
                 } else {
                     work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);
-                    d *= work[j4 + 2] / work[j4 - 3];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4 - 1]);
@@ -1381,7 +1368,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1377,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,7 +1386,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1561,7 +1545,7 @@
                     a2 = cnst3 * a2;
                 }
 
-                if (a2 < cnst1) {
+                if (dMin == dN) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13131)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13131)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13131)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13327)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13327)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,8 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,7 +939,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,7 +951,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1020,7 +1016,6 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1338,7 +1332,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1357,7 +1350,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    tType = -2;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1382,9 +1375,7 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,9 +1393,7 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1768,6 +1757,7 @@
         z = 1;
         for (int i = r + 1; i < m; ++i) {
             z *= -work[6 * i - 1];
+			final int nRows = d.length;
             eigenvector[i] = z;
             n2 += z * z;
         }
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13327)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13327)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v13327)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14056)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1038,7 +1031,6 @@
     /** {@inheritDoc} */
     public double getLInfDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double max = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -1136,7 +1128,6 @@
     /** {@inheritDoc} */
     public RealMatrix outerProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         final int m = data.length;
         final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
         for (int i = 0; i < data.length; i++) {
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14056)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -849,8 +849,6 @@
         dN    = 0;
         dN1   = 0;
         dN2   = 0;
-        tau   = 0;
-
         // process split segments
         int i0 = 0;
         int n0 = n;
@@ -869,13 +867,11 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -954,7 +950,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1051,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1128,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1165,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1338,7 +1328,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1357,7 +1346,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    tType = -2;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1382,7 +1371,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1379,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14056)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14056)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14056)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
@@ -992,7 +986,6 @@
     /** {@inheritDoc} */
     public double getL1Distance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,14 +868,12 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -941,7 +939,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,7 +951,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -965,7 +961,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,10 +1131,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1168,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1339,7 +1332,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1383,15 +1375,12 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1402,9 +1391,7 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1768,6 +1755,7 @@
         z = 1;
         for (int i = r + 1; i < m; ++i) {
             z *= -work[6 * i - 1];
+			final int nRows = d.length;
             eigenvector[i] = z;
             n2 += z * z;
         }
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14221)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14354)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
@@ -830,7 +827,6 @@
     /** {@inheritDoc} */
     public RealVector ebeDivide(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
                 out[i] = data[i] / v[i];
@@ -881,7 +877,6 @@
     /** {@inheritDoc} */
     public double dotProduct(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double dot = 0;
         for (int i = 0; i < data.length; i++) {
             dot += data[i] * v[i];
@@ -946,7 +941,6 @@
     /** {@inheritDoc} */
     public double getDistance(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double sum = 0;
         for (int i = 0; i < data.length; ++i) {
             final double delta = data[i] - v[i];
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14354)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,14 +868,12 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -954,7 +952,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -965,7 +962,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,10 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1175,7 +1169,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1197,7 +1191,7 @@
         // search upper eigenvalue
         left  = lower - margin;
         right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1347,7 +1341,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1357,7 +1350,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    tType = -2;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1383,15 +1376,12 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1402,16 +1392,13 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14354)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14354)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-10 14:46:10 [main] [INFO]  PatchLogExporter - patch (v14354)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-10 14:46:10 [main] [INFO]  KGenProgMain - Summary
Reached generation = 147
Generated variants = 14600
Syntax valid variants = 10796
Build succeeded variants = 5065
Time elapsed = 24 hours 13 minutes 3 seconds
Exit status = FAILURE (time limit)
