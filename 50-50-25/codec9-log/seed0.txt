2023-12-14 12:38:15 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = kgenprog-9.toml (set by command line)
rootDir =  (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 0 (set in config file)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9
version = 1.8.2
================================================================
2023-12-14 12:38:18 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-12-14 12:38:18 [main] [INFO]  KGenProgMain - GA started
2023-12-14 12:38:18 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-12-14 12:38:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 50, build-succeeded 6, build-failed 27, syntax-invalid 3, redundant 14
Fitness: max 0.98(4), min 0.765(2), ave 0.908
Test execution time: sum 446 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 12:38:19 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-12-14 12:38:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 50, build-succeeded 8, build-failed 29, syntax-invalid 3, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.843
Test execution time: sum 482 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:38:20 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-12-14 12:38:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 100, build-succeeded 21, build-failed 23, syntax-invalid 16, redundant 40
Fitness: max 0.98(2), min 0.471(1), ave 0.774
Test execution time: sum 1060 ms, max 63 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:38:23 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-12-14 12:38:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 100, build-succeeded 21, build-failed 30, syntax-invalid 15, redundant 34
Fitness: max 0.922(1), min 0.49(2), ave 0.827
Test execution time: sum 1081 ms, max 64 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:38:25 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-12-14 12:38:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 seconds
Variants: generated 100, build-succeeded 21, build-failed 28, syntax-invalid 14, redundant 37
Fitness: max 0.98(1), min 0.549(1), ave 0.865
Test execution time: sum 1059 ms, max 73 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:38:27 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-12-14 12:38:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 100, build-succeeded 40, build-failed 29, syntax-invalid 14, redundant 17
Fitness: max 0.98(5), min 0.353(1), ave 0.875
Test execution time: sum 1853 ms, max 55 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:38:31 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-12-14 12:38:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 35, build-failed 27, syntax-invalid 13, redundant 25
Fitness: max 1(1), min 0.667(1), ave 0.901
Test execution time: sum 1645 ms, max 59 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:38:34 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-12-14 12:38:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 100, build-succeeded 26, build-failed 28, syntax-invalid 15, redundant 31
Fitness: max 1(3), min 0.49(1), ave 0.894
Test execution time: sum 1227 ms, max 62 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:38:36 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-12-14 12:38:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 seconds
Variants: generated 100, build-succeeded 27, build-failed 29, syntax-invalid 6, redundant 38
Fitness: max 0.98(13), min 0.765(1), ave 0.927
Test execution time: sum 1274 ms, max 56 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:38:39 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-12-14 12:38:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 100, build-succeeded 25, build-failed 25, syntax-invalid 21, redundant 29
Fitness: max 0.98(8), min 0.49(1), ave 0.887
Test execution time: sum 1187 ms, max 54 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:38:41 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-12-14 12:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 100, build-succeeded 22, build-failed 35, syntax-invalid 12, redundant 31
Fitness: max 1(1), min 0.863(1), ave 0.939
Test execution time: sum 1082 ms, max 73 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:38:43 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-12-14 12:38:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 100, build-succeeded 25, build-failed 29, syntax-invalid 10, redundant 36
Fitness: max 1(4), min 0.49(1), ave 0.914
Test execution time: sum 1192 ms, max 73 ms, min 39 ms
----------------------------------------------------------------

2023-12-14 12:38:46 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-12-14 12:38:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 seconds
Variants: generated 100, build-succeeded 30, build-failed 23, syntax-invalid 13, redundant 34
Fitness: max 0.98(16), min 0.549(1), ave 0.908
Test execution time: sum 3523 ms, max 2171 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:38:51 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-12-14 12:38:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 seconds
Variants: generated 100, build-succeeded 38, build-failed 25, syntax-invalid 11, redundant 26
Fitness: max 1(1), min 0.353(1), ave 0.912
Test execution time: sum 1774 ms, max 69 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 12:38:54 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-12-14 12:38:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 seconds
Variants: generated 100, build-succeeded 35, build-failed 27, syntax-invalid 12, redundant 26
Fitness: max 1(3), min 0.49(2), ave 0.923
Test execution time: sum 1797 ms, max 124 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 12:38:57 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-12-14 12:39:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 seconds
Variants: generated 100, build-succeeded 35, build-failed 32, syntax-invalid 13, redundant 20
Fitness: max 0.98(27), min 0.49(1), ave 0.933
Test execution time: sum 1754 ms, max 72 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:39:01 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-12-14 12:39:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 seconds
Variants: generated 100, build-succeeded 34, build-failed 32, syntax-invalid 8, redundant 26
Fitness: max 1(1), min 0.49(1), ave 0.948
Test execution time: sum 2212 ms, max 501 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:04 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-12-14 12:39:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 seconds
Variants: generated 100, build-succeeded 39, build-failed 27, syntax-invalid 9, redundant 25
Fitness: max 0.98(28), min 0.49(1), ave 0.937
Test execution time: sum 2697 ms, max 724 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:09 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-12-14 12:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 seconds
Variants: generated 100, build-succeeded 40, build-failed 28, syntax-invalid 7, redundant 25
Fitness: max 1(1), min 0.549(1), ave 0.935
Test execution time: sum 2105 ms, max 80 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:13 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-12-14 12:39:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 seconds
Variants: generated 100, build-succeeded 36, build-failed 30, syntax-invalid 8, redundant 26
Fitness: max 0.98(30), min 0.824(1), ave 0.965
Test execution time: sum 1874 ms, max 81 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:39:17 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-12-14 12:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 2 seconds
Variants: generated 100, build-succeeded 39, build-failed 22, syntax-invalid 13, redundant 26
Fitness: max 0.98(32), min 0.549(1), ave 0.954
Test execution time: sum 2394 ms, max 536 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:39:21 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-12-14 12:39:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 6 seconds
Variants: generated 100, build-succeeded 38, build-failed 29, syntax-invalid 15, redundant 18
Fitness: max 0.98(33), min 0.667(1), ave 0.964
Test execution time: sum 1895 ms, max 72 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:24 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-12-14 12:39:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 10 seconds
Variants: generated 100, build-succeeded 39, build-failed 26, syntax-invalid 16, redundant 19
Fitness: max 0.98(30), min 0.49(1), ave 0.946
Test execution time: sum 1958 ms, max 69 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:39:28 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-12-14 12:39:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 13 seconds
Variants: generated 100, build-succeeded 38, build-failed 29, syntax-invalid 8, redundant 25
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 1940 ms, max 65 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:39:31 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-12-14 12:39:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 17 seconds
Variants: generated 100, build-succeeded 47, build-failed 22, syntax-invalid 14, redundant 17
Fitness: max 0.98(41), min 0.765(1), ave 0.965
Test execution time: sum 2383 ms, max 72 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:39:35 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-12-14 12:39:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 21 seconds
Variants: generated 100, build-succeeded 40, build-failed 32, syntax-invalid 7, redundant 21
Fitness: max 0.98(37), min 0.49(1), ave 0.957
Test execution time: sum 1992 ms, max 66 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:39 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-12-14 12:39:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 25 seconds
Variants: generated 100, build-succeeded 41, build-failed 27, syntax-invalid 7, redundant 25
Fitness: max 0.98(38), min 0.843(1), ave 0.972
Test execution time: sum 2017 ms, max 59 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:43 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-12-14 12:39:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 29 seconds
Variants: generated 100, build-succeeded 40, build-failed 33, syntax-invalid 10, redundant 17
Fitness: max 0.98(35), min 0.49(1), ave 0.939
Test execution time: sum 1997 ms, max 74 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:39:47 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-12-14 12:39:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 32 seconds
Variants: generated 100, build-succeeded 39, build-failed 37, syntax-invalid 4, redundant 20
Fitness: max 0.98(35), min 0.294(1), ave 0.955
Test execution time: sum 1916 ms, max 61 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:39:50 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-12-14 12:39:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 36 seconds
Variants: generated 100, build-succeeded 35, build-failed 31, syntax-invalid 7, redundant 27
Fitness: max 1(1), min 0.294(1), ave 0.946
Test execution time: sum 1758 ms, max 72 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:39:54 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-12-14 12:39:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 40 seconds
Variants: generated 100, build-succeeded 40, build-failed 32, syntax-invalid 5, redundant 23
Fitness: max 0.98(37), min 0.549(1), ave 0.962
Test execution time: sum 1980 ms, max 69 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 12:39:58 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-12-14 12:40:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 44 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 5, redundant 10
Fitness: max 0.98(47), min 0.549(1), ave 0.968
Test execution time: sum 2587 ms, max 66 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:40:02 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-12-14 12:40:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 48 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 9, redundant 20
Fitness: max 0.98(37), min 0.431(1), ave 0.952
Test execution time: sum 2030 ms, max 61 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:40:06 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-12-14 12:40:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 52 seconds
Variants: generated 100, build-succeeded 35, build-failed 37, syntax-invalid 11, redundant 17
Fitness: max 0.98(33), min 0.765(1), ave 0.974
Test execution time: sum 1725 ms, max 68 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:40:10 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-12-14 12:40:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 56 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 10, redundant 22
Fitness: max 1(1), min 0.941(1), ave 0.979
Test execution time: sum 1755 ms, max 65 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:40:14 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-12-14 12:40:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 59 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 8, redundant 16
Fitness: max 0.98(36), min 0.765(1), ave 0.974
Test execution time: sum 1854 ms, max 64 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:40:17 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-12-14 12:40:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 3 seconds
Variants: generated 100, build-succeeded 41, build-failed 30, syntax-invalid 10, redundant 19
Fitness: max 0.98(37), min 0.765(1), ave 0.965
Test execution time: sum 1965 ms, max 59 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:40:21 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-12-14 12:40:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 9 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 5, redundant 12
Fitness: max 0.98(46), min 0.49(1), ave 0.96
Test execution time: sum 3697 ms, max 844 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:40:28 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-12-14 12:40:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 13 seconds
Variants: generated 100, build-succeeded 39, build-failed 27, syntax-invalid 11, redundant 23
Fitness: max 0.98(35), min 0.765(1), ave 0.965
Test execution time: sum 1957 ms, max 66 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:40:32 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-12-14 12:40:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 18 seconds
Variants: generated 100, build-succeeded 46, build-failed 25, syntax-invalid 8, redundant 21
Fitness: max 0.98(41), min 0.49(1), ave 0.961
Test execution time: sum 2332 ms, max 68 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:40:36 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-12-14 12:40:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 23 seconds
Variants: generated 100, build-succeeded 48, build-failed 26, syntax-invalid 12, redundant 14
Fitness: max 0.98(41), min 0.333(1), ave 0.944
Test execution time: sum 2623 ms, max 117 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:40:41 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-12-14 12:40:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 28 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 11, redundant 10
Fitness: max 0.98(46), min 0.549(1), ave 0.965
Test execution time: sum 2580 ms, max 71 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:40:46 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-12-14 12:40:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 33 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 14, redundant 3
Fitness: max 0.98(44), min 0.549(1), ave 0.956
Test execution time: sum 2796 ms, max 113 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:40:51 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-12-14 12:40:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 38 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 9, redundant 7
Fitness: max 0.98(44), min 0.49(1), ave 0.955
Test execution time: sum 2779 ms, max 125 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:40:56 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-12-14 12:41:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 43 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 15, redundant 5
Fitness: max 0.98(42), min 0.549(1), ave 0.956
Test execution time: sum 2349 ms, max 77 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 12:41:01 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-12-14 12:41:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 47 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 13, redundant 12
Fitness: max 1(2), min 0.471(1), ave 0.957
Test execution time: sum 2230 ms, max 78 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:41:06 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-12-14 12:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 53 seconds
Variants: generated 100, build-succeeded 61, build-failed 23, syntax-invalid 8, redundant 8
Fitness: max 1(5), min 0.49(2), ave 0.95
Test execution time: sum 3189 ms, max 107 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:41:11 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-12-14 12:41:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 58 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 7, redundant 17
Fitness: max 0.98(43), min 0.902(1), ave 0.977
Test execution time: sum 2436 ms, max 95 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:41:16 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-12-14 12:41:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 3 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 10, redundant 17
Fitness: max 0.98(41), min 0.765(1), ave 0.971
Test execution time: sum 2221 ms, max 62 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:41:21 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-12-14 12:41:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 8 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 7, redundant 13
Fitness: max 0.98(43), min 0.549(1), ave 0.962
Test execution time: sum 2572 ms, max 106 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:41:26 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-12-14 12:41:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 16 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 8, redundant 5
Fitness: max 0.98(45), min 0.49(1), ave 0.949
Test execution time: sum 5348 ms, max 2061 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:41:34 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-12-14 12:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 21 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 8, redundant 8
Fitness: max 0.98(45), min 0.667(1), ave 0.962
Test execution time: sum 2680 ms, max 92 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:41:39 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-12-14 12:41:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 27 seconds
Variants: generated 100, build-succeeded 53, build-failed 20, syntax-invalid 12, redundant 15
Fitness: max 0.98(48), min 0.431(1), ave 0.963
Test execution time: sum 2728 ms, max 100 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:41:45 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-12-14 12:41:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 32 seconds
Variants: generated 100, build-succeeded 59, build-failed 23, syntax-invalid 9, redundant 9
Fitness: max 0.98(44), min 0.353(2), ave 0.935
Test execution time: sum 2865 ms, max 71 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:41:50 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-12-14 12:41:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 38 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 7, redundant 14
Fitness: max 1(1), min 0.549(1), ave 0.959
Test execution time: sum 2610 ms, max 64 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:41:56 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-12-14 12:42:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 42 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 12, redundant 13
Fitness: max 0.98(38), min 0.49(2), ave 0.948
Test execution time: sum 2175 ms, max 83 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:42:01 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-12-14 12:42:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 47 seconds
Variants: generated 100, build-succeeded 42, build-failed 30, syntax-invalid 12, redundant 16
Fitness: max 0.98(38), min 0.157(1), ave 0.944
Test execution time: sum 2023 ms, max 62 ms, min 37 ms
----------------------------------------------------------------

2023-12-14 12:42:05 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-12-14 12:42:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 54 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 14, redundant 12
Fitness: max 0.98(39), min 0.725(1), ave 0.967
Test execution time: sum 4206 ms, max 1927 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:42:12 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-12-14 12:42:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 59 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 10, redundant 10
Fitness: max 1(1), min 0.824(1), ave 0.97
Test execution time: sum 2558 ms, max 73 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:42:17 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-12-14 12:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 4 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 10, redundant 11
Fitness: max 0.98(42), min 0.49(1), ave 0.951
Test execution time: sum 2313 ms, max 59 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:42:22 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-12-14 12:42:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 12 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 11, redundant 10
Fitness: max 0.98(37), min 0.49(1), ave 0.94
Test execution time: sum 4512 ms, max 2045 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:42:30 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-12-14 12:42:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 17 seconds
Variants: generated 100, build-succeeded 49, build-failed 26, syntax-invalid 11, redundant 14
Fitness: max 0.98(41), min 0.549(1), ave 0.952
Test execution time: sum 2437 ms, max 70 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:42:35 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-12-14 12:42:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 22 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 5, redundant 14
Fitness: max 0.98(41), min 0.49(1), ave 0.956
Test execution time: sum 2258 ms, max 74 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:42:40 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-12-14 12:42:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 27 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 8, redundant 10
Fitness: max 0.98(44), min 0.549(1), ave 0.964
Test execution time: sum 2470 ms, max 61 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:42:45 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-12-14 12:42:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 33 seconds
Variants: generated 100, build-succeeded 48, build-failed 27, syntax-invalid 12, redundant 13
Fitness: max 0.98(40), min 0.314(1), ave 0.953
Test execution time: sum 2378 ms, max 66 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:42:51 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-12-14 12:42:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 38 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 11, redundant 8
Fitness: max 0.98(42), min 0.353(1), ave 0.957
Test execution time: sum 2413 ms, max 66 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:42:56 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-12-14 12:43:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 44 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 8, redundant 12
Fitness: max 0.98(45), min 0.49(1), ave 0.954
Test execution time: sum 2842 ms, max 99 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:43:02 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-12-14 12:43:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 49 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 14, redundant 8
Fitness: max 0.98(44), min 0.902(3), ave 0.972
Test execution time: sum 2506 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:43:07 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-12-14 12:43:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 54 seconds
Variants: generated 100, build-succeeded 39, build-failed 32, syntax-invalid 18, redundant 11
Fitness: max 0.98(34), min 0.824(1), ave 0.97
Test execution time: sum 2100 ms, max 121 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:43:12 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-12-14 12:43:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 0 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 10, redundant 7
Fitness: max 0.98(46), min 0.549(1), ave 0.954
Test execution time: sum 2624 ms, max 65 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:43:18 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-12-14 12:43:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 6 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 5, redundant 16
Fitness: max 1(1), min 0.765(1), ave 0.967
Test execution time: sum 2489 ms, max 66 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:43:24 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-12-14 12:43:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 11 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 10, redundant 11
Fitness: max 0.98(44), min 0.667(1), ave 0.966
Test execution time: sum 2370 ms, max 60 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:43:29 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-12-14 12:43:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 17 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 6, redundant 4
Fitness: max 1(1), min 0.157(1), ave 0.955
Test execution time: sum 2793 ms, max 70 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:43:35 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-12-14 12:43:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 22 seconds
Variants: generated 100, build-succeeded 40, build-failed 35, syntax-invalid 13, redundant 12
Fitness: max 0.98(36), min 0.902(2), ave 0.974
Test execution time: sum 2034 ms, max 73 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:43:40 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-12-14 12:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 28 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 5, redundant 7
Fitness: max 0.98(45), min 0.863(1), ave 0.971
Test execution time: sum 2643 ms, max 72 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:43:46 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-12-14 12:43:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 33 seconds
Variants: generated 100, build-succeeded 43, build-failed 30, syntax-invalid 18, redundant 9
Fitness: max 0.98(37), min 0.549(2), ave 0.945
Test execution time: sum 2131 ms, max 66 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:43:51 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-12-14 12:43:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 39 seconds
Variants: generated 100, build-succeeded 54, build-failed 22, syntax-invalid 11, redundant 13
Fitness: max 0.98(50), min 0.843(1), ave 0.975
Test execution time: sum 2660 ms, max 61 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:43:57 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-12-14 12:44:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 44 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 6, redundant 13
Fitness: max 1(1), min 0.843(1), ave 0.972
Test execution time: sum 2556 ms, max 68 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:44:02 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-12-14 12:44:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 50 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 5, redundant 11
Fitness: max 0.98(42), min 0.549(1), ave 0.963
Test execution time: sum 2397 ms, max 61 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:44:08 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-12-14 12:44:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 55 seconds
Variants: generated 100, build-succeeded 47, build-failed 25, syntax-invalid 11, redundant 17
Fitness: max 0.98(41), min 0.549(1), ave 0.962
Test execution time: sum 2338 ms, max 58 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:44:13 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-12-14 12:44:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 1 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 12, redundant 13
Fitness: max 0.98(40), min 0.549(1), ave 0.963
Test execution time: sum 2145 ms, max 57 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:44:19 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-12-14 12:44:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 6 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 11, redundant 11
Fitness: max 0.98(44), min 0.863(1), ave 0.97
Test execution time: sum 2503 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:44:24 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-12-14 12:44:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 11 seconds
Variants: generated 100, build-succeeded 38, build-failed 36, syntax-invalid 14, redundant 12
Fitness: max 0.98(34), min 0.902(2), ave 0.973
Test execution time: sum 1844 ms, max 57 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:44:29 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-12-14 12:44:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 16 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 17, redundant 10
Fitness: max 0.98(32), min 0.275(1), ave 0.933
Test execution time: sum 2163 ms, max 56 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:44:34 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-12-14 12:44:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 21 seconds
Variants: generated 100, build-succeeded 37, build-failed 32, syntax-invalid 13, redundant 18
Fitness: max 0.98(33), min 0.667(1), ave 0.963
Test execution time: sum 1822 ms, max 58 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:44:39 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-12-14 12:44:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 27 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 9, redundant 17
Fitness: max 1(1), min 0.882(1), ave 0.968
Test execution time: sum 2150 ms, max 58 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:44:45 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-12-14 12:44:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 31 seconds
Variants: generated 100, build-succeeded 36, build-failed 28, syntax-invalid 19, redundant 17
Fitness: max 0.98(27), min 0.549(1), ave 0.947
Test execution time: sum 1804 ms, max 60 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:44:50 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-12-14 12:44:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 37 seconds
Variants: generated 100, build-succeeded 43, build-failed 26, syntax-invalid 22, redundant 9
Fitness: max 0.98(31), min 0.49(2), ave 0.918
Test execution time: sum 2098 ms, max 68 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:44:55 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-12-14 12:45:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 42 seconds
Variants: generated 100, build-succeeded 49, build-failed 25, syntax-invalid 15, redundant 11
Fitness: max 0.98(42), min 0.588(1), ave 0.962
Test execution time: sum 2392 ms, max 68 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:45:00 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-12-14 12:45:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 47 seconds
Variants: generated 100, build-succeeded 43, build-failed 28, syntax-invalid 14, redundant 15
Fitness: max 0.98(37), min 0.843(1), ave 0.968
Test execution time: sum 2092 ms, max 70 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:45:06 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-12-14 12:45:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 53 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.952
Test execution time: sum 2456 ms, max 66 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:45:11 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-12-14 12:45:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 59 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 11, redundant 9
Fitness: max 0.98(41), min 0.902(9), ave 0.966
Test execution time: sum 2424 ms, max 68 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:45:17 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-12-14 12:45:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 6 seconds
Variants: generated 100, build-succeeded 38, build-failed 30, syntax-invalid 23, redundant 9
Fitness: max 1(3), min 0.549(1), ave 0.96
Test execution time: sum 3386 ms, max 1349 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:45:24 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-12-14 12:45:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 11 seconds
Variants: generated 100, build-succeeded 43, build-failed 30, syntax-invalid 17, redundant 10
Fitness: max 0.98(33), min 0.784(1), ave 0.961
Test execution time: sum 2248 ms, max 145 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:45:30 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-12-14 12:45:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 17 seconds
Variants: generated 100, build-succeeded 52, build-failed 24, syntax-invalid 16, redundant 8
Fitness: max 0.98(46), min 0.49(1), ave 0.962
Test execution time: sum 2529 ms, max 66 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:45:35 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-12-14 12:45:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 23 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 11, redundant 13
Fitness: max 0.98(46), min 0.725(1), ave 0.975
Test execution time: sum 2281 ms, max 65 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:45:41 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-12-14 12:45:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 29 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 12, redundant 10
Fitness: max 0.98(44), min 0.49(1), ave 0.956
Test execution time: sum 2418 ms, max 78 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:45:48 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-12-14 12:45:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 36 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 4, redundant 12
Fitness: max 0.98(46), min 0.353(1), ave 0.947
Test execution time: sum 2575 ms, max 74 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 12:45:54 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-12-14 12:46:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 42 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 12, redundant 11
Fitness: max 0.98(37), min 0.549(2), ave 0.947
Test execution time: sum 2378 ms, max 77 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:46:00 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-12-14 12:46:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 49 seconds
Variants: generated 100, build-succeeded 52, build-failed 29, syntax-invalid 7, redundant 12
Fitness: max 0.98(46), min 0.863(1), ave 0.97
Test execution time: sum 2570 ms, max 84 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:46:07 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-12-14 12:46:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 54 seconds
Variants: generated 100, build-succeeded 41, build-failed 29, syntax-invalid 13, redundant 17
Fitness: max 0.98(37), min 0.549(1), ave 0.957
Test execution time: sum 2046 ms, max 80 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:46:13 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-12-14 12:46:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 1 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 5, redundant 20
Fitness: max 0.98(39), min 0.765(1), ave 0.967
Test execution time: sum 2170 ms, max 68 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 12:46:19 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-12-14 12:46:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 7 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 11, redundant 12
Fitness: max 0.98(40), min 0.765(2), ave 0.962
Test execution time: sum 2329 ms, max 63 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:46:25 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-12-14 12:46:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 13 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 9, redundant 3
Fitness: max 0.98(46), min 0.784(1), ave 0.968
Test execution time: sum 2579 ms, max 71 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:46:31 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-12-14 12:46:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 19 seconds
Variants: generated 100, build-succeeded 44, build-failed 26, syntax-invalid 20, redundant 10
Fitness: max 0.98(37), min 0.667(1), ave 0.963
Test execution time: sum 2177 ms, max 75 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:46:37 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-12-14 12:46:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 26 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 13, redundant 11
Fitness: max 0.98(41), min 0.843(1), ave 0.974
Test execution time: sum 2281 ms, max 66 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:46:44 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-12-14 12:46:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 32 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 18, redundant 7
Fitness: max 0.98(39), min 0.353(1), ave 0.949
Test execution time: sum 2354 ms, max 78 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:46:50 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-12-14 12:46:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 38 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 17, redundant 7
Fitness: max 0.98(43), min 0.902(3), ave 0.974
Test execution time: sum 2393 ms, max 68 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:46:56 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-12-14 12:47:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 44 seconds
Variants: generated 100, build-succeeded 43, build-failed 33, syntax-invalid 16, redundant 8
Fitness: max 0.98(40), min 0.667(1), ave 0.97
Test execution time: sum 2157 ms, max 68 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 12:47:03 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-12-14 12:47:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 51 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 8, redundant 12
Fitness: max 0.98(42), min 0.863(3), ave 0.971
Test execution time: sum 2308 ms, max 67 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:47:09 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-12-14 12:47:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 57 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 12, redundant 10
Fitness: max 0.98(40), min 0.843(2), ave 0.967
Test execution time: sum 2319 ms, max 65 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:47:16 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-12-14 12:47:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 4 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 10, redundant 11
Fitness: max 0.98(44), min 0.843(1), ave 0.973
Test execution time: sum 2417 ms, max 65 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:47:22 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-12-14 12:47:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 12 seconds
Variants: generated 100, build-succeeded 38, build-failed 35, syntax-invalid 17, redundant 10
Fitness: max 0.98(30), min 0.333(1), ave 0.948
Test execution time: sum 3403 ms, max 1497 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:47:30 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-12-14 12:47:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 18 seconds
Variants: generated 100, build-succeeded 36, build-failed 37, syntax-invalid 22, redundant 5
Fitness: max 0.98(30), min 0.667(1), ave 0.96
Test execution time: sum 1847 ms, max 75 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:47:36 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-12-14 12:47:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 24 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 12, redundant 7
Fitness: max 0.98(44), min 0.667(1), ave 0.966
Test execution time: sum 2479 ms, max 62 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:47:42 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-12-14 12:47:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 31 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 12, redundant 7
Fitness: max 0.98(45), min 0.294(1), ave 0.962
Test execution time: sum 2556 ms, max 67 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:47:49 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-12-14 12:47:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 39 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 10, redundant 11
Fitness: max 0.98(49), min 0.784(1), ave 0.976
Test execution time: sum 2611 ms, max 71 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:47:57 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-12-14 12:48:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 46 seconds
Variants: generated 100, build-succeeded 45, build-failed 37, syntax-invalid 8, redundant 10
Fitness: max 0.98(40), min 0.235(1), ave 0.946
Test execution time: sum 2334 ms, max 65 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:48:04 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-12-14 12:48:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 53 seconds
Variants: generated 100, build-succeeded 49, build-failed 22, syntax-invalid 12, redundant 17
Fitness: max 0.98(41), min 0.549(2), ave 0.948
Test execution time: sum 2519 ms, max 66 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 12:48:11 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-12-14 12:48:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 1 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 8, redundant 14
Fitness: max 0.98(41), min 0.49(2), ave 0.945
Test execution time: sum 3860 ms, max 1390 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:48:19 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-12-14 12:48:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 8 seconds
Variants: generated 100, build-succeeded 43, build-failed 36, syntax-invalid 7, redundant 14
Fitness: max 0.98(41), min 0.824(1), ave 0.975
Test execution time: sum 2265 ms, max 83 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:48:26 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-12-14 12:48:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 15 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 7, redundant 15
Fitness: max 0.98(37), min 0.49(1), ave 0.949
Test execution time: sum 2420 ms, max 63 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:48:34 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-12-14 12:48:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 23 seconds
Variants: generated 100, build-succeeded 50, build-failed 26, syntax-invalid 12, redundant 12
Fitness: max 0.98(41), min 0.608(1), ave 0.955
Test execution time: sum 2656 ms, max 73 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:48:41 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-12-14 12:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 30 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 9, redundant 15
Fitness: max 1(2), min 0.863(3), ave 0.965
Test execution time: sum 2487 ms, max 85 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:48:49 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-12-14 12:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 38 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 9, redundant 11
Fitness: max 0.98(42), min 0.353(1), ave 0.95
Test execution time: sum 2491 ms, max 74 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:48:56 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-12-14 12:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 46 seconds
Variants: generated 100, build-succeeded 50, build-failed 34, syntax-invalid 8, redundant 8
Fitness: max 0.98(45), min 0.49(1), ave 0.963
Test execution time: sum 2637 ms, max 63 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:49:04 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-12-14 12:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 54 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 7, redundant 9
Fitness: max 0.98(49), min 0.353(1), ave 0.957
Test execution time: sum 2768 ms, max 71 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:49:12 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-12-14 12:49:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 2 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 16, redundant 7
Fitness: max 0.98(37), min 0.549(1), ave 0.961
Test execution time: sum 2291 ms, max 78 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:49:22 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-12-14 12:49:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 10 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 5, redundant 8
Fitness: max 0.98(51), min 0.765(1), ave 0.972
Test execution time: sum 3110 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:49:30 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-12-14 12:49:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 11, redundant 8
Fitness: max 0.98(50), min 0.725(1), ave 0.967
Test execution time: sum 2919 ms, max 78 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:49:39 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-12-14 12:49:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 28 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 11, redundant 4
Fitness: max 0.98(47), min 0.824(1), ave 0.966
Test execution time: sum 4257 ms, max 1315 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:49:48 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-12-14 12:49:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 37 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 8, redundant 9
Fitness: max 0.98(46), min 0.353(1), ave 0.948
Test execution time: sum 2884 ms, max 99 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:49:57 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-12-14 12:50:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 45 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 8, redundant 9
Fitness: max 0.98(49), min 0.902(2), ave 0.977
Test execution time: sum 2737 ms, max 76 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:50:05 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-12-14 12:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 53 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 10, redundant 5
Fitness: max 0.98(50), min 0.765(1), ave 0.972
Test execution time: sum 2757 ms, max 79 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:50:13 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-12-14 12:50:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 4 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 12, redundant 8
Fitness: max 0.98(45), min 0.49(1), ave 0.958
Test execution time: sum 4668 ms, max 1937 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:50:24 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-12-14 12:50:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 12 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 10, redundant 7
Fitness: max 0.98(39), min 0.784(1), ave 0.967
Test execution time: sum 2489 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:50:32 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-12-14 12:50:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 21 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 3, redundant 14
Fitness: max 0.98(48), min 0.569(1), ave 0.964
Test execution time: sum 2955 ms, max 73 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:50:41 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-12-14 12:50:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 29 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 3, redundant 15
Fitness: max 0.98(48), min 0.843(1), ave 0.976
Test execution time: sum 2660 ms, max 69 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:50:49 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-12-14 12:50:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 39 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 12, redundant 6
Fitness: max 0.98(49), min 0.49(1), ave 0.965
Test execution time: sum 3807 ms, max 932 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:50:59 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-12-14 12:51:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 47 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 9, redundant 7
Fitness: max 0.98(43), min 0.784(1), ave 0.967
Test execution time: sum 2581 ms, max 94 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:51:07 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-12-14 12:51:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 56 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 8, redundant 6
Fitness: max 0.98(45), min 0.745(1), ave 0.963
Test execution time: sum 2743 ms, max 62 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:51:16 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-12-14 12:51:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 5 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 5, redundant 12
Fitness: max 0.98(40), min 0.49(1), ave 0.96
Test execution time: sum 3254 ms, max 602 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:51:25 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-12-14 12:51:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 16 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 9, redundant 6
Fitness: max 0.98(44), min 0.235(1), ave 0.934
Test execution time: sum 4352 ms, max 672 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:51:36 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-12-14 12:51:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 25 seconds
Variants: generated 100, build-succeeded 53, build-failed 21, syntax-invalid 14, redundant 12
Fitness: max 0.98(49), min 0.549(1), ave 0.966
Test execution time: sum 2832 ms, max 72 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 12:51:45 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-12-14 12:51:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 33 seconds
Variants: generated 100, build-succeeded 43, build-failed 39, syntax-invalid 8, redundant 10
Fitness: max 1(1), min 0.902(3), ave 0.975
Test execution time: sum 2343 ms, max 72 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:51:53 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-12-14 12:52:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 42 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 7, redundant 5
Fitness: max 1(3), min 0.471(1), ave 0.935
Test execution time: sum 3101 ms, max 70 ms, min 38 ms
----------------------------------------------------------------

2023-12-14 12:52:02 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-12-14 12:52:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 52 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 7, redundant 6
Fitness: max 0.98(48), min 0.49(1), ave 0.953
Test execution time: sum 3080 ms, max 63 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:52:12 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-12-14 12:52:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 0 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 18, redundant 3
Fitness: max 0.98(43), min 0.824(1), ave 0.967
Test execution time: sum 2688 ms, max 66 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:52:20 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-12-14 12:52:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 8 seconds
Variants: generated 100, build-succeeded 42, build-failed 31, syntax-invalid 19, redundant 8
Fitness: max 0.98(38), min 0.49(1), ave 0.951
Test execution time: sum 2284 ms, max 87 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:52:28 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-12-14 12:52:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 17 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 10, redundant 10
Fitness: max 0.98(50), min 0.784(1), ave 0.974
Test execution time: sum 2901 ms, max 84 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 12:52:38 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-12-14 12:52:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 26 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 12, redundant 10
Fitness: max 0.98(38), min 0.902(10), ave 0.963
Test execution time: sum 2618 ms, max 75 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:52:46 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-12-14 12:52:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 35 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 13, redundant 5
Fitness: max 0.98(48), min 0.49(1), ave 0.96
Test execution time: sum 3076 ms, max 85 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:52:55 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-12-14 12:53:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 44 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 11, redundant 5
Fitness: max 0.98(47), min 0.471(1), ave 0.938
Test execution time: sum 3117 ms, max 83 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:53:05 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-12-14 12:53:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 53 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0.784(1), ave 0.972
Test execution time: sum 2892 ms, max 92 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:53:14 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-12-14 12:53:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 3 seconds
Variants: generated 100, build-succeeded 53, build-failed 23, syntax-invalid 15, redundant 9
Fitness: max 0.98(47), min 0.549(1), ave 0.962
Test execution time: sum 2910 ms, max 72 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:53:23 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-12-14 12:53:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 11 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 16, redundant 8
Fitness: max 0.98(41), min 0.588(1), ave 0.965
Test execution time: sum 2387 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:53:31 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-12-14 12:53:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 19 seconds
Variants: generated 100, build-succeeded 46, build-failed 31, syntax-invalid 19, redundant 4
Fitness: max 0.98(41), min 0.863(1), ave 0.971
Test execution time: sum 2520 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:53:40 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-12-14 12:53:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 29 seconds
Variants: generated 100, build-succeeded 61, build-failed 19, syntax-invalid 11, redundant 9
Fitness: max 1(2), min 0.843(2), ave 0.97
Test execution time: sum 3362 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:53:49 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-12-14 12:54:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 40 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 10, redundant 11
Fitness: max 0.98(47), min 0.49(1), ave 0.961
Test execution time: sum 4465 ms, max 1404 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:54:00 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-12-14 12:54:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 50 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 11, redundant 8
Fitness: max 0.98(49), min 0.863(1), ave 0.973
Test execution time: sum 3008 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:54:10 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-12-14 12:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 58 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 13, redundant 13
Fitness: max 0.98(39), min 0.824(1), ave 0.971
Test execution time: sum 2428 ms, max 68 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:54:18 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-12-14 12:54:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 8 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 12, redundant 3
Fitness: max 0.98(44), min 0.49(1), ave 0.962
Test execution time: sum 2750 ms, max 84 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:54:28 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-12-14 12:54:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 17 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 11, redundant 10
Fitness: max 0.98(43), min 0.49(1), ave 0.957
Test execution time: sum 2786 ms, max 72 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:54:37 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-12-14 12:54:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 28 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 7, redundant 3
Fitness: max 0.98(55), min 0.49(1), ave 0.961
Test execution time: sum 3370 ms, max 66 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:54:48 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-12-14 12:54:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 38 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 11, redundant 7
Fitness: max 0.98(49), min 0.294(1), ave 0.954
Test execution time: sum 3147 ms, max 87 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:54:58 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-12-14 12:55:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 4, redundant 14
Fitness: max 0.98(49), min 0.765(1), ave 0.968
Test execution time: sum 2961 ms, max 84 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:55:08 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-12-14 12:55:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 58 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 12, redundant 5
Fitness: max 0.98(47), min 0.588(1), ave 0.956
Test execution time: sum 3051 ms, max 89 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:55:18 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-12-14 12:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 7 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 13, redundant 6
Fitness: max 0.98(39), min 0.843(1), ave 0.964
Test execution time: sum 2687 ms, max 77 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:55:27 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-12-14 12:55:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 18 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 12, redundant 8
Fitness: max 0.98(46), min 0.863(1), ave 0.976
Test execution time: sum 3580 ms, max 802 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:55:38 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-12-14 12:55:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 30 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 6, redundant 4
Fitness: max 0.98(52), min 0.49(1), ave 0.959
Test execution time: sum 4092 ms, max 615 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:55:50 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-12-14 12:56:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 40 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 14, redundant 4
Fitness: max 0.98(48), min 0.569(2), ave 0.959
Test execution time: sum 3014 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:56:00 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-12-14 12:56:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 51 seconds
Variants: generated 100, build-succeeded 65, build-failed 23, syntax-invalid 8, redundant 4
Fitness: max 0.98(57), min 0.49(1), ave 0.949
Test execution time: sum 3663 ms, max 74 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 12:56:11 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-12-14 12:56:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 2 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 9, redundant 5
Fitness: max 0.98(54), min 0.843(1), ave 0.975
Test execution time: sum 3963 ms, max 528 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:56:22 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-12-14 12:56:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 12 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 10, redundant 10
Fitness: max 0.98(46), min 0.216(1), ave 0.955
Test execution time: sum 2974 ms, max 80 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:56:32 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-12-14 12:56:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 22 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 12, redundant 6
Fitness: max 0.98(48), min 0.784(1), ave 0.972
Test execution time: sum 2854 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:56:42 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-12-14 12:56:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 32 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 13, redundant 2
Fitness: max 0.98(54), min 0.725(1), ave 0.972
Test execution time: sum 3189 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 12:56:52 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-12-14 12:57:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 41 seconds
Variants: generated 100, build-succeeded 44, build-failed 36, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0.549(1), ave 0.955
Test execution time: sum 2404 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:57:01 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-12-14 12:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 51 seconds
Variants: generated 100, build-succeeded 51, build-failed 26, syntax-invalid 14, redundant 9
Fitness: max 0.98(47), min 0.549(1), ave 0.962
Test execution time: sum 2799 ms, max 82 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:57:11 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-12-14 12:57:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 0 seconds
Variants: generated 100, build-succeeded 41, build-failed 32, syntax-invalid 17, redundant 10
Fitness: max 0.98(38), min 0.569(1), ave 0.963
Test execution time: sum 2240 ms, max 70 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 12:57:20 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-12-14 12:57:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 9 seconds
Variants: generated 100, build-succeeded 48, build-failed 27, syntax-invalid 17, redundant 8
Fitness: max 0.98(45), min 0.588(1), ave 0.967
Test execution time: sum 2657 ms, max 96 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:57:30 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-12-14 12:57:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 19 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 16, redundant 6
Fitness: max 1(2), min 0.549(2), ave 0.958
Test execution time: sum 2829 ms, max 98 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 12:57:39 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-12-14 12:57:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 29 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0.863(1), ave 0.975
Test execution time: sum 2780 ms, max 105 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:57:49 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-12-14 12:57:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 39 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 14, redundant 7
Fitness: max 1(1), min 0.471(1), ave 0.962
Test execution time: sum 2642 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:57:59 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-12-14 12:58:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 48 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 26, redundant 3
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 3108 ms, max 771 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:58:08 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-12-14 12:58:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 59 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 18, redundant 6
Fitness: max 1(2), min 0.686(1), ave 0.964
Test execution time: sum 3578 ms, max 732 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:58:19 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-12-14 12:58:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 11 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 22, redundant 2
Fitness: max 1(2), min 0.49(1), ave 0.946
Test execution time: sum 4562 ms, max 1769 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:58:31 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-12-14 12:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 20 seconds
Variants: generated 100, build-succeeded 41, build-failed 26, syntax-invalid 28, redundant 5
Fitness: max 0.98(37), min 0.843(1), ave 0.971
Test execution time: sum 2309 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:58:40 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-12-14 12:58:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 30 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 16, redundant 6
Fitness: max 1(2), min 0.902(5), ave 0.974
Test execution time: sum 2953 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:58:50 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-12-14 12:58:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 39 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 24, redundant 8
Fitness: max 0.98(32), min 0.529(1), ave 0.958
Test execution time: sum 2091 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:58:59 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-12-14 12:59:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 48 seconds
Variants: generated 100, build-succeeded 48, build-failed 24, syntax-invalid 21, redundant 7
Fitness: max 0.98(39), min 0.784(2), ave 0.961
Test execution time: sum 2729 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 12:59:09 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-12-14 12:59:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 59 seconds
Variants: generated 100, build-succeeded 46, build-failed 31, syntax-invalid 15, redundant 8
Fitness: max 0.98(42), min 0.902(4), ave 0.974
Test execution time: sum 2643 ms, max 70 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:59:19 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-12-14 12:59:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 9 seconds
Variants: generated 100, build-succeeded 52, build-failed 21, syntax-invalid 23, redundant 4
Fitness: max 0.98(42), min 0.588(1), ave 0.954
Test execution time: sum 3036 ms, max 94 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:59:29 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-12-14 12:59:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 18 seconds
Variants: generated 100, build-succeeded 47, build-failed 26, syntax-invalid 23, redundant 4
Fitness: max 0.98(42), min 0.353(1), ave 0.952
Test execution time: sum 2712 ms, max 85 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:59:38 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-12-14 12:59:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 28 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 16, redundant 2
Fitness: max 0.98(42), min 0.902(5), ave 0.972
Test execution time: sum 2708 ms, max 73 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:59:48 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-12-14 12:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 39 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 9, redundant 4
Fitness: max 0.98(53), min 0.784(1), ave 0.973
Test execution time: sum 3296 ms, max 86 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 12:59:59 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-12-14 13:00:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 49 seconds
Variants: generated 100, build-succeeded 43, build-failed 36, syntax-invalid 16, redundant 5
Fitness: max 0.98(38), min 0.784(1), ave 0.967
Test execution time: sum 2491 ms, max 109 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:00:09 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-12-14 13:00:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 0 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 6, redundant 7
Fitness: max 0.98(55), min 0.784(2), ave 0.972
Test execution time: sum 3381 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:00:20 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-12-14 13:00:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 11 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 9, redundant 7
Fitness: max 0.98(48), min 0.824(1), ave 0.974
Test execution time: sum 2896 ms, max 93 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:00:31 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-12-14 13:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 21 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 17, redundant 5
Fitness: max 0.98(46), min 0.588(1), ave 0.959
Test execution time: sum 2907 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 13:00:41 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-12-14 13:00:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 31 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 18, redundant 3
Fitness: max 0.98(44), min 0.824(1), ave 0.972
Test execution time: sum 2736 ms, max 85 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:00:51 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-12-14 13:01:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 43 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 13, redundant 5
Fitness: max 0.98(46), min 0.157(1), ave 0.947
Test execution time: sum 3218 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:01:03 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-12-14 13:01:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 54 seconds
Variants: generated 100, build-succeeded 49, build-failed 22, syntax-invalid 23, redundant 6
Fitness: max 0.98(44), min 0.471(1), ave 0.962
Test execution time: sum 4173 ms, max 1196 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:01:14 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-12-14 13:01:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 5 seconds
Variants: generated 100, build-succeeded 48, build-failed 23, syntax-invalid 22, redundant 7
Fitness: max 0.98(43), min 0.49(1), ave 0.96
Test execution time: sum 2862 ms, max 82 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:01:25 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-12-14 13:01:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 15 seconds
Variants: generated 100, build-succeeded 51, build-failed 22, syntax-invalid 22, redundant 5
Fitness: max 0.98(44), min 0.49(2), ave 0.952
Test execution time: sum 2856 ms, max 70 ms, min 39 ms
----------------------------------------------------------------

2023-12-14 13:01:35 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-12-14 13:01:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 27 seconds
Variants: generated 100, build-succeeded 49, build-failed 23, syntax-invalid 18, redundant 10
Fitness: max 0.98(39), min 0.667(1), ave 0.959
Test execution time: sum 3922 ms, max 1058 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:01:47 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-12-14 13:01:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 36 seconds
Variants: generated 100, build-succeeded 40, build-failed 29, syntax-invalid 25, redundant 6
Fitness: max 0.98(35), min 0.588(1), ave 0.964
Test execution time: sum 2288 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:01:56 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-12-14 13:02:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 46 seconds
Variants: generated 100, build-succeeded 46, build-failed 27, syntax-invalid 20, redundant 7
Fitness: max 0.98(38), min 0.157(1), ave 0.935
Test execution time: sum 2612 ms, max 74 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 13:02:06 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-12-14 13:02:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 56 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 23, redundant 2
Fitness: max 0.98(45), min 0.843(1), ave 0.971
Test execution time: sum 2826 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:02:16 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-12-14 13:02:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 6 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 17, redundant 4
Fitness: max 0.98(43), min 0.49(1), ave 0.961
Test execution time: sum 2791 ms, max 83 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:02:27 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-12-14 13:02:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 18 seconds
Variants: generated 100, build-succeeded 53, build-failed 25, syntax-invalid 20, redundant 2
Fitness: max 0.98(45), min 0.353(1), ave 0.959
Test execution time: sum 4023 ms, max 849 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:02:38 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-12-14 13:02:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 29 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 14, redundant 7
Fitness: max 0.98(46), min 0.49(1), ave 0.957
Test execution time: sum 2948 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 13:02:49 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-12-14 13:02:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 39 seconds
Variants: generated 100, build-succeeded 49, build-failed 23, syntax-invalid 20, redundant 8
Fitness: max 0.98(47), min 0.863(1), ave 0.976
Test execution time: sum 2811 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:02:59 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-12-14 13:03:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 50 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 12, redundant 9
Fitness: max 0.98(45), min 0.706(1), ave 0.966
Test execution time: sum 2829 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 13:03:10 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-12-14 13:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 1 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0.765(2), ave 0.963
Test execution time: sum 3040 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 13:03:21 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-12-14 13:03:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 11 seconds
Variants: generated 100, build-succeeded 50, build-failed 26, syntax-invalid 20, redundant 4
Fitness: max 0.98(44), min 0.824(1), ave 0.97
Test execution time: sum 2737 ms, max 68 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:03:31 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-12-14 13:03:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 22 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 13, redundant 5
Fitness: max 0.98(49), min 0.902(4), ave 0.974
Test execution time: sum 2927 ms, max 82 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:03:42 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-12-14 13:03:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 32 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 20, redundant 5
Fitness: max 0.98(39), min 0.314(1), ave 0.947
Test execution time: sum 2678 ms, max 85 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 13:03:52 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-12-14 13:04:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 43 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 19, redundant 5
Fitness: max 0.98(39), min 0.765(2), ave 0.958
Test execution time: sum 2709 ms, max 89 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:04:03 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-12-14 13:04:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 54 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 20, redundant 2
Fitness: max 0.98(44), min 0.549(1), ave 0.95
Test execution time: sum 3082 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:04:14 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-12-14 13:04:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 4 seconds
Variants: generated 100, build-succeeded 48, build-failed 24, syntax-invalid 24, redundant 4
Fitness: max 1(1), min 0.902(3), ave 0.975
Test execution time: sum 2835 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:04:25 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-12-14 13:04:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 14 seconds
Variants: generated 100, build-succeeded 41, build-failed 30, syntax-invalid 24, redundant 5
Fitness: max 0.98(33), min 0.843(1), ave 0.964
Test execution time: sum 2333 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 13:04:35 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-12-14 13:04:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 25 seconds
Variants: generated 100, build-succeeded 51, build-failed 24, syntax-invalid 21, redundant 4
Fitness: max 0.98(45), min 0.765(1), ave 0.967
Test execution time: sum 2915 ms, max 93 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:04:45 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-12-14 13:04:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 36 seconds
Variants: generated 100, build-succeeded 47, build-failed 22, syntax-invalid 24, redundant 7
Fitness: max 0.98(39), min 0.569(1), ave 0.948
Test execution time: sum 2626 ms, max 74 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 13:04:56 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-12-14 13:05:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 45 seconds
Variants: generated 100, build-succeeded 40, build-failed 26, syntax-invalid 28, redundant 6
Fitness: max 0.98(33), min 0.569(2), ave 0.944
Test execution time: sum 2239 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 13:05:05 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-12-14 13:05:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 57 seconds
Variants: generated 100, build-succeeded 49, build-failed 22, syntax-invalid 21, redundant 8
Fitness: max 0.98(42), min 0.765(1), ave 0.962
Test execution time: sum 2879 ms, max 112 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:05:17 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-12-14 13:05:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 8 seconds
Variants: generated 100, build-succeeded 52, build-failed 23, syntax-invalid 21, redundant 4
Fitness: max 0.98(47), min 0.333(1), ave 0.954
Test execution time: sum 3235 ms, max 146 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 13:05:28 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-12-14 13:05:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 19 seconds
Variants: generated 100, build-succeeded 49, build-failed 23, syntax-invalid 22, redundant 6
Fitness: max 0.98(45), min 0.667(1), ave 0.966
Test execution time: sum 2785 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:05:40 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-12-14 13:05:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 31 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 15, redundant 10
Fitness: max 1(3), min 0.569(1), ave 0.962
Test execution time: sum 2928 ms, max 159 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:05:51 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-12-14 13:06:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 43 seconds
Variants: generated 100, build-succeeded 50, build-failed 26, syntax-invalid 19, redundant 5
Fitness: max 1(1), min 0.49(1), ave 0.953
Test execution time: sum 2991 ms, max 114 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:06:03 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-12-14 13:06:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 54 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 16, redundant 3
Fitness: max 0.98(44), min 0.902(1), ave 0.979
Test execution time: sum 2648 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:06:15 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-12-14 13:06:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 7 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 13, redundant 6
Fitness: max 0.98(46), min 0.667(1), ave 0.96
Test execution time: sum 3194 ms, max 74 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:06:27 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-12-14 13:06:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 19 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 12, redundant 6
Fitness: max 0.98(49), min 0.843(1), ave 0.977
Test execution time: sum 3014 ms, max 71 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:06:39 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-12-14 13:06:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 10, redundant 6
Fitness: max 0.98(51), min 0.353(1), ave 0.955
Test execution time: sum 3646 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:06:53 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-12-14 13:07:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 44 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 22, redundant 3
Fitness: max 0.98(41), min 0.235(1), ave 0.946
Test execution time: sum 2892 ms, max 100 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 13:07:05 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-12-14 13:07:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 58 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 9, redundant 4
Fitness: max 0.98(49), min 0.667(1), ave 0.961
Test execution time: sum 3662 ms, max 153 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:07:18 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-12-14 13:07:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 11 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 15, redundant 7
Fitness: max 0.98(48), min 0.49(1), ave 0.951
Test execution time: sum 3295 ms, max 82 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:07:31 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-12-14 13:07:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 25 seconds
Variants: generated 100, build-succeeded 52, build-failed 21, syntax-invalid 17, redundant 10
Fitness: max 0.98(49), min 0.49(1), ave 0.968
Test execution time: sum 3455 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:07:45 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-12-14 13:07:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 38 seconds
Variants: generated 100, build-succeeded 56, build-failed 17, syntax-invalid 13, redundant 14
Fitness: max 0.98(49), min 0.725(1), ave 0.967
Test execution time: sum 3671 ms, max 172 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:07:58 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-12-14 13:08:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 51 seconds
Variants: generated 100, build-succeeded 53, build-failed 23, syntax-invalid 17, redundant 7
Fitness: max 0.98(45), min 0.569(1), ave 0.958
Test execution time: sum 3468 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:08:12 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-12-14 13:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 5 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 16, redundant 4
Fitness: max 0.98(47), min 0.549(1), ave 0.96
Test execution time: sum 3429 ms, max 175 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:08:25 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-12-14 13:08:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 18 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 19, redundant 5
Fitness: max 0.98(44), min 0.765(1), ave 0.97
Test execution time: sum 3620 ms, max 539 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:08:38 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-12-14 13:08:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 30 seconds
Variants: generated 100, build-succeeded 53, build-failed 21, syntax-invalid 20, redundant 6
Fitness: max 1(1), min 0.549(1), ave 0.961
Test execution time: sum 3319 ms, max 140 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:08:50 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-12-14 13:09:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 42 seconds
Variants: generated 100, build-succeeded 40, build-failed 31, syntax-invalid 23, redundant 6
Fitness: max 0.98(35), min 0.902(5), ave 0.971
Test execution time: sum 2601 ms, max 155 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:09:02 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-12-14 13:09:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 54 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 19, redundant 5
Fitness: max 0.98(41), min 0.49(1), ave 0.957
Test execution time: sum 2892 ms, max 109 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:09:14 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-12-14 13:09:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 6 seconds
Variants: generated 100, build-succeeded 49, build-failed 26, syntax-invalid 21, redundant 4
Fitness: max 0.98(44), min 0.863(1), ave 0.972
Test execution time: sum 3024 ms, max 95 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:09:26 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-12-14 13:09:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 18 seconds
Variants: generated 100, build-succeeded 40, build-failed 26, syntax-invalid 30, redundant 4
Fitness: max 0.98(34), min 0.549(1), ave 0.955
Test execution time: sum 3100 ms, max 638 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:09:38 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-12-14 13:09:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 33 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 17, redundant 2
Fitness: max 0.98(49), min 0.294(1), ave 0.959
Test execution time: sum 5264 ms, max 846 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:09:53 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-12-14 13:10:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 46 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 17, redundant 3
Fitness: max 0.98(44), min 0.863(2), ave 0.969
Test execution time: sum 3179 ms, max 106 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:10:06 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-12-14 13:10:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 59 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 17, redundant 4
Fitness: max 0.98(46), min 0.549(1), ave 0.967
Test execution time: sum 3169 ms, max 150 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:10:19 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-12-14 13:10:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 12 seconds
Variants: generated 100, build-succeeded 56, build-failed 23, syntax-invalid 15, redundant 6
Fitness: max 0.98(49), min 0.804(1), ave 0.969
Test execution time: sum 3584 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:10:32 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-12-14 13:10:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 26 seconds
Variants: generated 100, build-succeeded 50, build-failed 26, syntax-invalid 15, redundant 9
Fitness: max 0.98(44), min 0.49(2), ave 0.954
Test execution time: sum 3484 ms, max 230 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:10:46 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-12-14 13:10:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 39 seconds
Variants: generated 100, build-succeeded 52, build-failed 25, syntax-invalid 19, redundant 4
Fitness: max 0.98(42), min 0.549(1), ave 0.952
Test execution time: sum 3329 ms, max 210 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:10:59 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-12-14 13:11:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 53 seconds
Variants: generated 100, build-succeeded 51, build-failed 26, syntax-invalid 17, redundant 6
Fitness: max 0.98(40), min 0.765(1), ave 0.962
Test execution time: sum 3231 ms, max 121 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:11:13 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-12-14 13:11:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 7 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 13, redundant 3
Fitness: max 0.98(48), min 0.725(1), ave 0.966
Test execution time: sum 3639 ms, max 124 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:11:27 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-12-14 13:11:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 20 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 17, redundant 5
Fitness: max 0.98(42), min 0.902(4), ave 0.974
Test execution time: sum 2888 ms, max 83 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:11:40 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-12-14 13:11:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 34 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 9, redundant 8
Fitness: max 0.98(52), min 0.902(3), ave 0.976
Test execution time: sum 3310 ms, max 69 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:11:54 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-12-14 13:12:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 51 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 9, redundant 5
Fitness: max 0.98(49), min 0.49(2), ave 0.945
Test execution time: sum 5823 ms, max 2031 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:12:11 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-12-14 13:12:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 7 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 9, redundant 10
Fitness: max 0.98(51), min 0.49(1), ave 0.967
Test execution time: sum 4920 ms, max 1264 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:12:28 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-12-14 13:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 22 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 11, redundant 9
Fitness: max 0.98(46), min 0.824(1), ave 0.969
Test execution time: sum 3310 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:12:42 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-12-14 13:12:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 35 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 15, redundant 7
Fitness: max 0.98(52), min 0.843(1), ave 0.976
Test execution time: sum 3317 ms, max 75 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:12:55 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-12-14 13:13:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 49 seconds
Variants: generated 100, build-succeeded 50, build-failed 24, syntax-invalid 13, redundant 13
Fitness: max 0.98(44), min 0.275(1), ave 0.957
Test execution time: sum 3044 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:13:09 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-12-14 13:13:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 3 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 15, redundant 4
Fitness: max 0.98(47), min 0.49(1), ave 0.956
Test execution time: sum 3295 ms, max 78 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:13:23 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-12-14 13:13:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 20 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 13, redundant 8
Fitness: max 0.98(44), min 0.902(7), ave 0.969
Test execution time: sum 5088 ms, max 1680 ms, min 57 ms
----------------------------------------------------------------

2023-12-14 13:13:40 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-12-14 13:13:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 34 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 15, redundant 5
Fitness: max 0.98(42), min 0.765(1), ave 0.963
Test execution time: sum 3069 ms, max 80 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:13:54 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-12-14 13:14:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 47 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 16, redundant 6
Fitness: max 0.98(40), min 0.765(1), ave 0.967
Test execution time: sum 2884 ms, max 73 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:14:08 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-12-14 13:14:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 2 seconds
Variants: generated 100, build-succeeded 54, build-failed 21, syntax-invalid 17, redundant 8
Fitness: max 0.98(45), min 0.667(1), ave 0.963
Test execution time: sum 3384 ms, max 74 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:14:22 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-12-14 13:14:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 15 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 18, redundant 4
Fitness: max 0.98(47), min 0.902(3), ave 0.976
Test execution time: sum 3136 ms, max 81 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:14:35 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-12-14 13:14:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 27 seconds
Variants: generated 100, build-succeeded 37, build-failed 27, syntax-invalid 24, redundant 12
Fitness: max 0.98(34), min 0.863(1), ave 0.974
Test execution time: sum 2202 ms, max 66 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:14:47 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-12-14 13:15:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 40 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 20, redundant 4
Fitness: max 0.98(40), min 0.235(1), ave 0.943
Test execution time: sum 2807 ms, max 73 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 13:15:00 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-12-14 13:15:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 13, redundant 5
Fitness: max 0.98(46), min 0.765(1), ave 0.967
Test execution time: sum 5427 ms, max 1784 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:15:16 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-12-14 13:15:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 10 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 14, redundant 3
Fitness: max 0.98(45), min 0.49(1), ave 0.959
Test execution time: sum 3231 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:15:30 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-12-14 13:15:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 25 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 13, redundant 4
Fitness: max 0.98(52), min 0.49(1), ave 0.962
Test execution time: sum 3555 ms, max 87 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:15:45 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-12-14 13:15:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 39 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 14, redundant 7
Fitness: max 0.98(45), min 0.902(7), ave 0.969
Test execution time: sum 3167 ms, max 96 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:15:59 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-12-14 13:16:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 52 seconds
Variants: generated 100, build-succeeded 47, build-failed 25, syntax-invalid 15, redundant 13
Fitness: max 0.98(43), min 0.902(4), ave 0.974
Test execution time: sum 2804 ms, max 79 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:16:12 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-12-14 13:16:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 5 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 21, redundant 5
Fitness: max 0.98(36), min 0.471(1), ave 0.955
Test execution time: sum 2647 ms, max 80 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:16:25 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-12-14 13:16:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 18 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 18, redundant 2
Fitness: max 0.98(46), min 0.549(1), ave 0.966
Test execution time: sum 2975 ms, max 68 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:16:38 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-12-14 13:16:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 33 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 12, redundant 7
Fitness: max 0.98(49), min 0.765(1), ave 0.967
Test execution time: sum 3249 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:16:53 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-12-14 13:17:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 15, redundant 6
Fitness: max 0.98(49), min 0.49(1), ave 0.966
Test execution time: sum 3268 ms, max 82 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:17:07 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-12-14 13:17:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 1 seconds
Variants: generated 100, build-succeeded 57, build-failed 22, syntax-invalid 15, redundant 6
Fitness: max 0.98(46), min 0.765(2), ave 0.959
Test execution time: sum 3402 ms, max 77 ms, min 53 ms
----------------------------------------------------------------

2023-12-14 13:17:21 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-12-14 13:17:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 15 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 18, redundant 7
Fitness: max 0.98(41), min 0.667(1), ave 0.965
Test execution time: sum 2876 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:17:35 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-12-14 13:17:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 31 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 12, redundant 4
Fitness: max 1(1), min 0.235(1), ave 0.963
Test execution time: sum 4702 ms, max 1470 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:17:51 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-12-14 13:18:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 45 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 13, redundant 8
Fitness: max 0.98(46), min 0.549(1), ave 0.966
Test execution time: sum 3159 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-12-14 13:18:05 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-12-14 13:18:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 1 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 16, redundant 7
Fitness: max 0.98(42), min 0.843(2), ave 0.965
Test execution time: sum 4411 ms, max 1185 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:18:21 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-12-14 13:18:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 16 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 9, redundant 3
Fitness: max 0.98(48), min 0.49(1), ave 0.966
Test execution time: sum 3245 ms, max 77 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:18:37 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-12-14 13:18:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 15, redundant 4
Fitness: max 0.98(45), min 0.353(1), ave 0.958
Test execution time: sum 3118 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:18:51 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-12-14 13:19:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 21, syntax-invalid 16, redundant 8
Fitness: max 0.98(46), min 0.49(2), ave 0.943
Test execution time: sum 3533 ms, max 110 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:19:06 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-12-14 13:19:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 1 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 12, redundant 6
Fitness: max 0.98(47), min 0.49(1), ave 0.956
Test execution time: sum 3530 ms, max 83 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:19:21 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-12-14 13:19:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 18 seconds
Variants: generated 100, build-succeeded 50, build-failed 24, syntax-invalid 16, redundant 10
Fitness: max 0.98(42), min 0.549(1), ave 0.962
Test execution time: sum 5332 ms, max 2030 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:19:38 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-12-14 13:19:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 33 seconds
Variants: generated 100, build-succeeded 50, build-failed 34, syntax-invalid 14, redundant 2
Fitness: max 0.98(45), min 0.765(1), ave 0.97
Test execution time: sum 3078 ms, max 87 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:19:53 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-12-14 13:20:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 10, redundant 4
Fitness: max 0.98(50), min 0.824(1), ave 0.972
Test execution time: sum 3307 ms, max 85 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:20:08 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-12-14 13:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 2 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 16, redundant 7
Fitness: max 0.98(44), min 0.667(1), ave 0.964
Test execution time: sum 3120 ms, max 80 ms, min 57 ms
----------------------------------------------------------------

2023-12-14 13:20:22 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-12-14 13:20:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 17 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0.824(1), ave 0.977
Test execution time: sum 3478 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:20:37 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-12-14 13:20:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 33 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 8, redundant 5
Fitness: max 0.98(49), min 0.843(2), ave 0.971
Test execution time: sum 3411 ms, max 83 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:20:53 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-12-14 13:21:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 48 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0.765(1), ave 0.967
Test execution time: sum 3466 ms, max 89 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:21:08 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-12-14 13:21:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 2 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 13, redundant 9
Fitness: max 0.98(42), min 0.49(1), ave 0.956
Test execution time: sum 3015 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:21:22 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-12-14 13:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 15 seconds
Variants: generated 100, build-succeeded 42, build-failed 30, syntax-invalid 22, redundant 6
Fitness: max 0.98(37), min 0.765(1), ave 0.967
Test execution time: sum 2598 ms, max 78 ms, min 57 ms
----------------------------------------------------------------

2023-12-14 13:21:36 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-12-14 13:21:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 32 seconds
Variants: generated 100, build-succeeded 52, build-failed 25, syntax-invalid 17, redundant 6
Fitness: max 0.98(44), min 0.765(1), ave 0.965
Test execution time: sum 4617 ms, max 1360 ms, min 57 ms
----------------------------------------------------------------

2023-12-14 13:21:52 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-12-14 13:22:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 46 seconds
Variants: generated 100, build-succeeded 53, build-failed 24, syntax-invalid 15, redundant 8
Fitness: max 0.98(47), min 0.804(1), ave 0.969
Test execution time: sum 3298 ms, max 73 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:22:07 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-12-14 13:22:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 1 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 15, redundant 6
Fitness: max 0.98(43), min 0.902(5), ave 0.972
Test execution time: sum 2955 ms, max 73 ms, min 56 ms
----------------------------------------------------------------

2023-12-14 13:22:21 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-12-14 13:22:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 16 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 14, redundant 10
Fitness: max 0.98(42), min 0.471(1), ave 0.959
Test execution time: sum 2990 ms, max 72 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:22:36 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-12-14 13:22:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 30 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 20, redundant 3
Fitness: max 1(1), min 0.216(1), ave 0.956
Test execution time: sum 3077 ms, max 114 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:22:50 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-12-14 13:23:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 44 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 17, redundant 7
Fitness: max 0.98(40), min 0.549(1), ave 0.955
Test execution time: sum 2905 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:23:04 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-12-14 13:23:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 1 seconds
Variants: generated 100, build-succeeded 56, build-failed 23, syntax-invalid 14, redundant 7
Fitness: max 0.98(50), min 0.843(1), ave 0.973
Test execution time: sum 5117 ms, max 1667 ms, min 54 ms
----------------------------------------------------------------

2023-12-14 13:23:21 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-12-14 13:23:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 16 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 11, redundant 3
Fitness: max 0.98(50), min 0.588(1), ave 0.97
Test execution time: sum 3306 ms, max 80 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:23:36 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-12-14 13:23:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 30 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 18, redundant 4
Fitness: max 0.98(43), min 0.608(1), ave 0.957
Test execution time: sum 3029 ms, max 73 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:23:50 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-12-14 13:24:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 46 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 14, redundant 10
Fitness: max 0.98(41), min 0.49(1), ave 0.962
Test execution time: sum 4199 ms, max 1200 ms, min 55 ms
----------------------------------------------------------------

2023-12-14 13:24:07 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-12-14 13:24:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 2 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 19, redundant 4
Fitness: max 0.98(45), min 0.49(1), ave 0.962
Test execution time: sum 3339 ms, max 136 ms, min 57 ms
----------------------------------------------------------------

2023-12-14 13:24:22 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-12-14 13:24:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 15 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 10, redundant 10
Fitness: max 0.98(51), min 0.471(1), ave 0.954
Test execution time: sum 3097 ms, max 101 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:24:35 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-12-14 13:24:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 29 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 14, redundant 2
Fitness: max 0.98(47), min 0.49(2), ave 0.951
Test execution time: sum 2847 ms, max 132 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:24:49 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-12-14 13:25:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 40 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 16, redundant 5
Fitness: max 0.98(40), min 0.137(1), ave 0.951
Test execution time: sum 2436 ms, max 105 ms, min 37 ms
----------------------------------------------------------------

2023-12-14 13:25:00 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-12-14 13:25:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 53 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 12, redundant 1
Fitness: max 0.98(46), min 0.843(2), ave 0.967
Test execution time: sum 2725 ms, max 64 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:25:13 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-12-14 13:25:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 6 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 15, redundant 1
Fitness: max 0.98(51), min 0.765(1), ave 0.973
Test execution time: sum 3082 ms, max 158 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:25:26 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-12-14 13:25:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 20 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 13, redundant 5
Fitness: max 0.98(48), min 0.49(1), ave 0.955
Test execution time: sum 4299 ms, max 1379 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:25:40 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-12-14 13:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 34 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 12, redundant 5
Fitness: max 0.98(50), min 0.784(1), ave 0.97
Test execution time: sum 3929 ms, max 987 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:25:54 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-12-14 13:26:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 47 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 9, redundant 3
Fitness: max 0.98(54), min 0.765(1), ave 0.97
Test execution time: sum 2906 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:26:07 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-12-14 13:26:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 58 seconds
Variants: generated 100, build-succeeded 47, build-failed 25, syntax-invalid 19, redundant 9
Fitness: max 0.98(45), min 0.902(2), ave 0.977
Test execution time: sum 2278 ms, max 60 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:26:18 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-12-14 13:26:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 10 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 16, redundant 2
Fitness: max 0.98(41), min 0.863(1), ave 0.968
Test execution time: sum 2380 ms, max 63 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:26:30 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-12-14 13:26:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 22 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 11, redundant 5
Fitness: max 0.98(52), min 0.314(1), ave 0.957
Test execution time: sum 2805 ms, max 82 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:26:42 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-12-14 13:26:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 34 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 14, redundant 3
Fitness: max 0.98(44), min 0.49(1), ave 0.958
Test execution time: sum 2522 ms, max 99 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:26:54 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-12-14 13:27:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 46 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 12, redundant 5
Fitness: max 0.98(47), min 0.549(1), ave 0.956
Test execution time: sum 2573 ms, max 77 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:27:06 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-12-14 13:27:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 8, redundant 3
Fitness: max 0.98(49), min 0.49(2), ave 0.951
Test execution time: sum 3105 ms, max 372 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:27:19 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-12-14 13:27:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 11 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 14, redundant 4
Fitness: max 0.98(46), min 0.902(4), ave 0.974
Test execution time: sum 2409 ms, max 63 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:27:31 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-12-14 13:27:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 23 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 11, redundant 4
Fitness: max 0.98(50), min 0.353(1), ave 0.964
Test execution time: sum 2534 ms, max 63 ms, min 38 ms
----------------------------------------------------------------

2023-12-14 13:27:43 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-12-14 13:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 35 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0.98(47), min 0.588(1), ave 0.957
Test execution time: sum 2570 ms, max 59 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:27:55 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-12-14 13:28:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 10, redundant 7
Fitness: max 0.98(50), min 0.863(1), ave 0.974
Test execution time: sum 2609 ms, max 64 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:28:07 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-12-14 13:28:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 58 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 16, redundant 2
Fitness: max 0.98(42), min 0.824(1), ave 0.965
Test execution time: sum 2419 ms, max 61 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:28:18 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-12-14 13:28:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 10 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 17, redundant 7
Fitness: max 0.98(39), min 0.765(1), ave 0.959
Test execution time: sum 2363 ms, max 63 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:28:30 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-12-14 13:28:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 20 seconds
Variants: generated 100, build-succeeded 43, build-failed 29, syntax-invalid 23, redundant 5
Fitness: max 0.98(37), min 0.824(1), ave 0.967
Test execution time: sum 2059 ms, max 69 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:28:40 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-12-14 13:28:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 23, syntax-invalid 23, redundant 4
Fitness: max 0.98(41), min 0.725(1), ave 0.962
Test execution time: sum 2386 ms, max 61 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:28:51 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-12-14 13:29:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 42 seconds
Variants: generated 100, build-succeeded 47, build-failed 25, syntax-invalid 23, redundant 5
Fitness: max 0.98(41), min 0.667(1), ave 0.965
Test execution time: sum 2241 ms, max 69 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:29:03 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-12-14 13:29:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 54 seconds
Variants: generated 100, build-succeeded 46, build-failed 26, syntax-invalid 21, redundant 7
Fitness: max 0.98(42), min 0.588(1), ave 0.966
Test execution time: sum 2173 ms, max 54 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 13:29:14 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-12-14 13:29:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 13, redundant 5
Fitness: max 0.98(49), min 0.49(1), ave 0.96
Test execution time: sum 2696 ms, max 66 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:29:26 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-12-14 13:29:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 19 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 17, redundant 3
Fitness: max 0.98(44), min 0.529(2), ave 0.958
Test execution time: sum 3064 ms, max 598 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:29:39 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-12-14 13:29:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 32 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 10, redundant 6
Fitness: max 0.98(53), min 0.49(1), ave 0.964
Test execution time: sum 2836 ms, max 61 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:29:53 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-12-14 13:30:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 45 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 14, redundant 5
Fitness: max 0.98(47), min 0.902(3), ave 0.975
Test execution time: sum 2571 ms, max 61 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:30:05 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-12-14 13:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 57 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 17, redundant 5
Fitness: max 0.98(42), min 0.49(1), ave 0.963
Test execution time: sum 2356 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:30:17 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-12-14 13:30:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 11 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 21, redundant 5
Fitness: max 0.98(42), min 0.549(1), ave 0.968
Test execution time: sum 3645 ms, max 1044 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:30:31 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-12-14 13:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 24 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 15, redundant 11
Fitness: max 1(1), min 0.784(1), ave 0.969
Test execution time: sum 2389 ms, max 73 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:30:44 [main] [INFO]  KGenProgMain - entered the era of 339th generation.
2023-12-14 13:30:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 37 seconds
Variants: generated 100, build-succeeded 47, build-failed 27, syntax-invalid 18, redundant 8
Fitness: max 0.98(39), min 0.49(1), ave 0.938
Test execution time: sum 2526 ms, max 104 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 13:30:57 [main] [INFO]  KGenProgMain - entered the era of 340th generation.
2023-12-14 13:31:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 51 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 9, redundant 6
Fitness: max 0.98(48), min 0.765(1), ave 0.971
Test execution time: sum 2744 ms, max 116 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:31:11 [main] [INFO]  KGenProgMain - entered the era of 341st generation.
2023-12-14 13:31:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 4 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 15, redundant 6
Fitness: max 0.98(45), min 0.49(1), ave 0.95
Test execution time: sum 2647 ms, max 71 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:31:24 [main] [INFO]  KGenProgMain - entered the era of 342nd generation.
2023-12-14 13:31:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 17 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 10, redundant 4
Fitness: max 0.98(49), min 0.686(1), ave 0.971
Test execution time: sum 2702 ms, max 65 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:31:37 [main] [INFO]  KGenProgMain - entered the era of 343rd generation.
2023-12-14 13:31:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 30 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 13, redundant 6
Fitness: max 0.98(50), min 0.784(1), ave 0.975
Test execution time: sum 2711 ms, max 65 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:31:50 [main] [INFO]  KGenProgMain - entered the era of 344th generation.
2023-12-14 13:32:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 43 seconds
Variants: generated 100, build-succeeded 43, build-failed 36, syntax-invalid 15, redundant 6
Fitness: max 0.98(40), min 0.49(1), ave 0.967
Test execution time: sum 2261 ms, max 74 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:32:03 [main] [INFO]  KGenProgMain - entered the era of 345th generation.
2023-12-14 13:32:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 7, redundant 5
Fitness: max 0.98(51), min 0.667(1), ave 0.962
Test execution time: sum 4274 ms, max 1093 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 13:32:19 [main] [INFO]  KGenProgMain - entered the era of 346th generation.
2023-12-14 13:32:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 10, redundant 6
Fitness: max 1(1), min 0.49(2), ave 0.961
Test execution time: sum 2911 ms, max 68 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:32:33 [main] [INFO]  KGenProgMain - entered the era of 347th generation.
2023-12-14 13:32:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 26 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 15, redundant 9
Fitness: max 0.98(45), min 0.549(1), ave 0.967
Test execution time: sum 2544 ms, max 70 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:32:46 [main] [INFO]  KGenProgMain - entered the era of 348th generation.
2023-12-14 13:33:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 40 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 9, redundant 11
Fitness: max 0.98(46), min 0.824(1), ave 0.97
Test execution time: sum 2660 ms, max 71 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:33:00 [main] [INFO]  KGenProgMain - entered the era of 349th generation.
2023-12-14 13:33:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 54 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 13, redundant 10
Fitness: max 0.98(43), min 0.902(3), ave 0.975
Test execution time: sum 2537 ms, max 76 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 13:33:14 [main] [INFO]  KGenProgMain - entered the era of 350th generation.
2023-12-14 13:33:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 8 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 8, redundant 10
Fitness: max 1(1), min 0.843(2), ave 0.968
Test execution time: sum 2864 ms, max 103 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:33:28 [main] [INFO]  KGenProgMain - entered the era of 351st generation.
2023-12-14 13:33:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 22 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 13, redundant 5
Fitness: max 0.98(47), min 0.49(1), ave 0.944
Test execution time: sum 2934 ms, max 68 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:33:42 [main] [INFO]  KGenProgMain - entered the era of 352nd generation.
2023-12-14 13:33:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 36 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 13, redundant 12
Fitness: max 0.98(44), min 0.902(2), ave 0.977
Test execution time: sum 2384 ms, max 69 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:33:56 [main] [INFO]  KGenProgMain - entered the era of 353rd generation.
2023-12-14 13:34:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 50 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 12, redundant 10
Fitness: max 0.98(37), min 0.549(1), ave 0.948
Test execution time: sum 3227 ms, max 818 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:34:10 [main] [INFO]  KGenProgMain - entered the era of 354th generation.
2023-12-14 13:34:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 4 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 13, redundant 8
Fitness: max 0.98(45), min 0.765(1), ave 0.965
Test execution time: sum 2697 ms, max 62 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:34:24 [main] [INFO]  KGenProgMain - entered the era of 355th generation.
2023-12-14 13:34:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 18 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 10, redundant 15
Fitness: max 0.98(42), min 0.784(1), ave 0.967
Test execution time: sum 2338 ms, max 64 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:34:38 [main] [INFO]  KGenProgMain - entered the era of 356th generation.
2023-12-14 13:34:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 32 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 12, redundant 14
Fitness: max 0.98(44), min 0.49(1), ave 0.969
Test execution time: sum 2417 ms, max 64 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:34:52 [main] [INFO]  KGenProgMain - entered the era of 357th generation.
2023-12-14 13:35:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 45 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 8, redundant 11
Fitness: max 0.98(40), min 0.843(1), ave 0.969
Test execution time: sum 2351 ms, max 61 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:35:05 [main] [INFO]  KGenProgMain - entered the era of 358th generation.
2023-12-14 13:35:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 1 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 8, redundant 14
Fitness: max 0.98(40), min 0.549(1), ave 0.956
Test execution time: sum 4546 ms, max 2206 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:35:21 [main] [INFO]  KGenProgMain - entered the era of 359th generation.
2023-12-14 13:35:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 15 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 10, redundant 14
Fitness: max 0.98(38), min 0.686(1), ave 0.96
Test execution time: sum 2248 ms, max 63 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:35:35 [main] [INFO]  KGenProgMain - entered the era of 360th generation.
2023-12-14 13:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 28 seconds
Variants: generated 100, build-succeeded 52, build-failed 25, syntax-invalid 13, redundant 10
Fitness: max 0.98(47), min 0.569(1), ave 0.965
Test execution time: sum 2529 ms, max 60 ms, min 39 ms
----------------------------------------------------------------

2023-12-14 13:35:48 [main] [INFO]  KGenProgMain - entered the era of 361st generation.
2023-12-14 13:36:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 41 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 14, redundant 8
Fitness: max 0.98(40), min 0.49(1), ave 0.967
Test execution time: sum 2092 ms, max 62 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:36:01 [main] [INFO]  KGenProgMain - entered the era of 362nd generation.
2023-12-14 13:36:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 54 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 12, redundant 10
Fitness: max 1(1), min 0.784(1), ave 0.972
Test execution time: sum 2436 ms, max 59 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:36:14 [main] [INFO]  KGenProgMain - entered the era of 363rd generation.
2023-12-14 13:36:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 7 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 12, redundant 12
Fitness: max 0.98(42), min 0.235(1), ave 0.958
Test execution time: sum 2291 ms, max 70 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:36:27 [main] [INFO]  KGenProgMain - entered the era of 364th generation.
2023-12-14 13:36:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 21 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 14, redundant 7
Fitness: max 1(1), min 0.569(1), ave 0.966
Test execution time: sum 2558 ms, max 69 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:36:41 [main] [INFO]  KGenProgMain - entered the era of 365th generation.
2023-12-14 13:36:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 34 seconds
Variants: generated 100, build-succeeded 42, build-failed 32, syntax-invalid 9, redundant 17
Fitness: max 0.98(37), min 0.549(1), ave 0.95
Test execution time: sum 2109 ms, max 64 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:36:54 [main] [INFO]  KGenProgMain - entered the era of 366th generation.
2023-12-14 13:37:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 49 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 11, redundant 10
Fitness: max 1(1), min 0.843(2), ave 0.97
Test execution time: sum 4135 ms, max 754 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:37:09 [main] [INFO]  KGenProgMain - entered the era of 367th generation.
2023-12-14 13:37:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 3 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 10, redundant 11
Fitness: max 0.98(44), min 0.49(1), ave 0.964
Test execution time: sum 3205 ms, max 818 ms, min 35 ms
----------------------------------------------------------------

2023-12-14 13:37:23 [main] [INFO]  KGenProgMain - entered the era of 368th generation.
2023-12-14 13:37:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 17 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 15, redundant 9
Fitness: max 0.98(39), min 0.667(1), ave 0.959
Test execution time: sum 2336 ms, max 58 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:37:37 [main] [INFO]  KGenProgMain - entered the era of 369th generation.
2023-12-14 13:37:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 31 seconds
Variants: generated 100, build-succeeded 55, build-failed 20, syntax-invalid 14, redundant 11
Fitness: max 0.98(45), min 0.824(1), ave 0.963
Test execution time: sum 3096 ms, max 399 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:37:51 [main] [INFO]  KGenProgMain - entered the era of 370th generation.
2023-12-14 13:38:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 44 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 16, redundant 4
Fitness: max 1(1), min 0.275(1), ave 0.953
Test execution time: sum 2428 ms, max 93 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:38:04 [main] [INFO]  KGenProgMain - entered the era of 371st generation.
2023-12-14 13:38:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 57 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 14, redundant 6
Fitness: max 0.98(46), min 0.569(1), ave 0.962
Test execution time: sum 2389 ms, max 74 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:38:17 [main] [INFO]  KGenProgMain - entered the era of 372nd generation.
2023-12-14 13:38:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 20, redundant 5
Fitness: max 0.98(37), min 0.765(1), ave 0.961
Test execution time: sum 2129 ms, max 91 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 13:38:29 [main] [INFO]  KGenProgMain - entered the era of 373rd generation.
2023-12-14 13:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 11, redundant 2
Fitness: max 0.98(47), min 0.49(1), ave 0.96
Test execution time: sum 2584 ms, max 65 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:38:43 [main] [INFO]  KGenProgMain - entered the era of 374th generation.
2023-12-14 13:38:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 2560 ms, max 64 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:38:56 [main] [INFO]  KGenProgMain - entered the era of 375th generation.
2023-12-14 13:39:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 7, redundant 6
Fitness: max 0.98(56), min 0.784(1), ave 0.97
Test execution time: sum 3071 ms, max 80 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:39:11 [main] [INFO]  KGenProgMain - entered the era of 376th generation.
2023-12-14 13:39:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 6 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 10, redundant 4
Fitness: max 0.98(52), min 0.843(1), ave 0.975
Test execution time: sum 2650 ms, max 67 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:39:26 [main] [INFO]  KGenProgMain - entered the era of 377th generation.
2023-12-14 13:39:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 19 seconds
Variants: generated 100, build-succeeded 49, build-failed 24, syntax-invalid 18, redundant 9
Fitness: max 0.98(43), min 0.902(4), ave 0.973
Test execution time: sum 2760 ms, max 419 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 13:39:39 [main] [INFO]  KGenProgMain - entered the era of 378th generation.
2023-12-14 13:39:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 33 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 15, redundant 7
Fitness: max 0.98(45), min 0.863(1), ave 0.973
Test execution time: sum 2359 ms, max 68 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:39:53 [main] [INFO]  KGenProgMain - entered the era of 379th generation.
2023-12-14 13:40:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 47 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 12, redundant 6
Fitness: max 0.98(50), min 0.902(5), ave 0.972
Test execution time: sum 2760 ms, max 64 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:40:07 [main] [INFO]  KGenProgMain - entered the era of 380th generation.
2023-12-14 13:40:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 59 seconds
Variants: generated 100, build-succeeded 43, build-failed 30, syntax-invalid 22, redundant 5
Fitness: max 0.98(36), min 0.863(1), ave 0.967
Test execution time: sum 2039 ms, max 59 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:40:19 [main] [INFO]  KGenProgMain - entered the era of 381st generation.
2023-12-14 13:40:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 13 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 8, redundant 8
Fitness: max 0.98(51), min 0.824(1), ave 0.973
Test execution time: sum 2611 ms, max 67 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:40:33 [main] [INFO]  KGenProgMain - entered the era of 382nd generation.
2023-12-14 13:40:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 27 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 15, redundant 6
Fitness: max 0.98(50), min 0.863(1), ave 0.974
Test execution time: sum 2604 ms, max 66 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:40:47 [main] [INFO]  KGenProgMain - entered the era of 383rd generation.
2023-12-14 13:41:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 40 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 11, redundant 11
Fitness: max 0.98(48), min 0.902(2), ave 0.977
Test execution time: sum 2350 ms, max 60 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:41:01 [main] [INFO]  KGenProgMain - entered the era of 384th generation.
2023-12-14 13:41:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 55 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 10, redundant 6
Fitness: max 0.98(50), min 0.902(4), ave 0.975
Test execution time: sum 2607 ms, max 69 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:41:15 [main] [INFO]  KGenProgMain - entered the era of 385th generation.
2023-12-14 13:41:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 10 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 9, redundant 5
Fitness: max 0.98(47), min 0.235(1), ave 0.949
Test execution time: sum 2919 ms, max 91 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:41:30 [main] [INFO]  KGenProgMain - entered the era of 386th generation.
2023-12-14 13:41:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 23 seconds
Variants: generated 100, build-succeeded 47, build-failed 26, syntax-invalid 21, redundant 6
Fitness: max 0.98(42), min 0.824(1), ave 0.971
Test execution time: sum 2272 ms, max 63 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:41:43 [main] [INFO]  KGenProgMain - entered the era of 387th generation.
2023-12-14 13:41:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 36 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 20, redundant 4
Fitness: max 0.98(40), min 0.725(1), ave 0.968
Test execution time: sum 2089 ms, max 59 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:41:56 [main] [INFO]  KGenProgMain - entered the era of 388th generation.
2023-12-14 13:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 48 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 17, redundant 1
Fitness: max 0.98(42), min 0.784(1), ave 0.97
Test execution time: sum 2260 ms, max 71 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:42:09 [main] [INFO]  KGenProgMain - entered the era of 389th generation.
2023-12-14 13:42:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 3 seconds
Variants: generated 100, build-succeeded 51, build-failed 25, syntax-invalid 16, redundant 8
Fitness: max 0.98(47), min 0.902(3), ave 0.975
Test execution time: sum 3351 ms, max 913 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:42:23 [main] [INFO]  KGenProgMain - entered the era of 390th generation.
2023-12-14 13:42:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 17 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 21, redundant 5
Fitness: max 0.98(40), min 0.902(3), ave 0.974
Test execution time: sum 2689 ms, max 529 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:42:37 [main] [INFO]  KGenProgMain - entered the era of 391st generation.
2023-12-14 13:42:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 30 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 12, redundant 12
Fitness: max 0.98(40), min 0.549(1), ave 0.962
Test execution time: sum 2127 ms, max 60 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:42:50 [main] [INFO]  KGenProgMain - entered the era of 392nd generation.
2023-12-14 13:43:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 44 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 22, redundant 5
Fitness: max 0.98(40), min 0.49(1), ave 0.965
Test execution time: sum 3016 ms, max 855 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:43:04 [main] [INFO]  KGenProgMain - entered the era of 393rd generation.
2023-12-14 13:43:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 58 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 19, redundant 3
Fitness: max 1(1), min 0.863(1), ave 0.97
Test execution time: sum 3017 ms, max 731 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:43:18 [main] [INFO]  KGenProgMain - entered the era of 394th generation.
2023-12-14 13:43:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 12 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 14, redundant 10
Fitness: max 0.98(44), min 0.569(1), ave 0.96
Test execution time: sum 2364 ms, max 65 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:43:32 [main] [INFO]  KGenProgMain - entered the era of 395th generation.
2023-12-14 13:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 26 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 11, redundant 10
Fitness: max 0.98(50), min 0.843(1), ave 0.973
Test execution time: sum 2655 ms, max 64 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:43:46 [main] [INFO]  KGenProgMain - entered the era of 396th generation.
2023-12-14 13:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 41 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 10, redundant 12
Fitness: max 0.98(44), min 0.784(1), ave 0.969
Test execution time: sum 2477 ms, max 67 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:44:01 [main] [INFO]  KGenProgMain - entered the era of 397th generation.
2023-12-14 13:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 55 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 8, redundant 12
Fitness: max 0.98(47), min 0.843(1), ave 0.975
Test execution time: sum 2505 ms, max 73 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:44:15 [main] [INFO]  KGenProgMain - entered the era of 398th generation.
2023-12-14 13:44:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 10 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 7, redundant 6
Fitness: max 0.98(49), min 0.255(1), ave 0.956
Test execution time: sum 2600 ms, max 62 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:44:30 [main] [INFO]  KGenProgMain - entered the era of 399th generation.
2023-12-14 13:44:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 25 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 10, redundant 5
Fitness: max 0.98(50), min 0.824(1), ave 0.969
Test execution time: sum 2758 ms, max 65 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:44:45 [main] [INFO]  KGenProgMain - entered the era of 400th generation.
2023-12-14 13:45:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 41 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 8, redundant 11
Fitness: max 0.98(46), min 0.902(1), ave 0.978
Test execution time: sum 3614 ms, max 1175 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:45:01 [main] [INFO]  KGenProgMain - entered the era of 401st generation.
2023-12-14 13:45:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 58 seconds
Variants: generated 100, build-succeeded 61, build-failed 23, syntax-invalid 4, redundant 12
Fitness: max 0.98(53), min 0.667(1), ave 0.96
Test execution time: sum 3910 ms, max 918 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:45:18 [main] [INFO]  KGenProgMain - entered the era of 402nd generation.
2023-12-14 13:45:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 9, redundant 10
Fitness: max 0.98(52), min 0.549(1), ave 0.96
Test execution time: sum 2774 ms, max 67 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:45:33 [main] [INFO]  KGenProgMain - entered the era of 403rd generation.
2023-12-14 13:45:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 27 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 13, redundant 9
Fitness: max 0.98(42), min 0.765(2), ave 0.961
Test execution time: sum 2332 ms, max 57 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:45:47 [main] [INFO]  KGenProgMain - entered the era of 404th generation.
2023-12-14 13:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 42 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 5, redundant 10
Fitness: max 0.98(55), min 0.235(1), ave 0.965
Test execution time: sum 2809 ms, max 58 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:46:02 [main] [INFO]  KGenProgMain - entered the era of 405th generation.
2023-12-14 13:46:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 57 seconds
Variants: generated 100, build-succeeded 50, build-failed 34, syntax-invalid 6, redundant 10
Fitness: max 0.98(48), min 0.765(1), ave 0.974
Test execution time: sum 2440 ms, max 69 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:46:17 [main] [INFO]  KGenProgMain - entered the era of 406th generation.
2023-12-14 13:46:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 12 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 8, redundant 9
Fitness: max 0.98(47), min 0.49(1), ave 0.961
Test execution time: sum 2553 ms, max 80 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:46:32 [main] [INFO]  KGenProgMain - entered the era of 407th generation.
2023-12-14 13:46:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 27 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 6, redundant 11
Fitness: max 0.98(51), min 0.765(2), ave 0.968
Test execution time: sum 2861 ms, max 66 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:46:47 [main] [INFO]  KGenProgMain - entered the era of 408th generation.
2023-12-14 13:47:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 42 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 5, redundant 13
Fitness: max 0.98(48), min 0.471(1), ave 0.958
Test execution time: sum 2702 ms, max 66 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:47:02 [main] [INFO]  KGenProgMain - entered the era of 409th generation.
2023-12-14 13:47:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 57 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0.863(1), ave 0.974
Test execution time: sum 2668 ms, max 67 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:47:17 [main] [INFO]  KGenProgMain - entered the era of 410th generation.
2023-12-14 13:47:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 13 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 7, redundant 10
Fitness: max 1(2), min 0.549(1), ave 0.96
Test execution time: sum 3745 ms, max 964 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:47:33 [main] [INFO]  KGenProgMain - entered the era of 411th generation.
2023-12-14 13:47:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 29 seconds
Variants: generated 100, build-succeeded 53, build-failed 36, syntax-invalid 4, redundant 7
Fitness: max 0.98(48), min 0.49(1), ave 0.962
Test execution time: sum 2594 ms, max 60 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:47:49 [main] [INFO]  KGenProgMain - entered the era of 412th generation.
2023-12-14 13:48:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 43 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 11, redundant 14
Fitness: max 0.98(46), min 0.98(46), ave 0.98
Test execution time: sum 2251 ms, max 58 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:48:03 [main] [INFO]  KGenProgMain - entered the era of 413th generation.
2023-12-14 13:48:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 59 seconds
Variants: generated 100, build-succeeded 52, build-failed 23, syntax-invalid 14, redundant 11
Fitness: max 0.98(48), min 0.824(1), ave 0.972
Test execution time: sum 3165 ms, max 543 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:48:19 [main] [INFO]  KGenProgMain - entered the era of 414th generation.
2023-12-14 13:48:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 14, redundant 5
Fitness: max 1(1), min 0.902(3), ave 0.976
Test execution time: sum 3295 ms, max 573 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:48:35 [main] [INFO]  KGenProgMain - entered the era of 415th generation.
2023-12-14 13:48:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 30 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 11, redundant 12
Fitness: max 0.98(43), min 0.235(1), ave 0.954
Test execution time: sum 2465 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:48:50 [main] [INFO]  KGenProgMain - entered the era of 416th generation.
2023-12-14 13:49:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 47 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 9, redundant 7
Fitness: max 0.98(53), min 0.902(2), ave 0.977
Test execution time: sum 3749 ms, max 825 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:49:07 [main] [INFO]  KGenProgMain - entered the era of 417th generation.
2023-12-14 13:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 3 seconds
Variants: generated 100, build-succeeded 60, build-failed 23, syntax-invalid 10, redundant 7
Fitness: max 0.98(53), min 0.49(2), ave 0.949
Test execution time: sum 3110 ms, max 79 ms, min 33 ms
----------------------------------------------------------------

2023-12-14 13:49:23 [main] [INFO]  KGenProgMain - entered the era of 418th generation.
2023-12-14 13:49:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 19 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 9, redundant 5
Fitness: max 0.98(50), min 0.549(1), ave 0.969
Test execution time: sum 2726 ms, max 70 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:49:39 [main] [INFO]  KGenProgMain - entered the era of 419th generation.
2023-12-14 13:49:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 35 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 7, redundant 7
Fitness: max 0.98(53), min 0.294(1), ave 0.961
Test execution time: sum 2959 ms, max 72 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:49:55 [main] [INFO]  KGenProgMain - entered the era of 420th generation.
2023-12-14 13:50:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 4, redundant 9
Fitness: max 0.98(53), min 0.824(2), ave 0.969
Test execution time: sum 2923 ms, max 62 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:50:11 [main] [INFO]  KGenProgMain - entered the era of 421st generation.
2023-12-14 13:50:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 8 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 6, redundant 3
Fitness: max 0.98(59), min 0.549(1), ave 0.97
Test execution time: sum 3095 ms, max 70 ms, min 37 ms
----------------------------------------------------------------

2023-12-14 13:50:28 [main] [INFO]  KGenProgMain - entered the era of 422nd generation.
2023-12-14 13:50:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 24 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 5, redundant 5
Fitness: max 0.98(57), min 0.49(1), ave 0.97
Test execution time: sum 2857 ms, max 67 ms, min 33 ms
----------------------------------------------------------------

2023-12-14 13:50:44 [main] [INFO]  KGenProgMain - entered the era of 423rd generation.
2023-12-14 13:51:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 40 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 10, redundant 8
Fitness: max 0.98(47), min 0.765(1), ave 0.967
Test execution time: sum 3404 ms, max 758 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:51:00 [main] [INFO]  KGenProgMain - entered the era of 424th generation.
2023-12-14 13:51:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 4, redundant 8
Fitness: max 0.98(49), min 0.549(1), ave 0.963
Test execution time: sum 2704 ms, max 60 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:51:16 [main] [INFO]  KGenProgMain - entered the era of 425th generation.
2023-12-14 13:51:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 11 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 6, redundant 13
Fitness: max 0.98(43), min 0.549(1), ave 0.962
Test execution time: sum 2389 ms, max 58 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:51:32 [main] [INFO]  KGenProgMain - entered the era of 426th generation.
2023-12-14 13:51:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 29 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 5, redundant 7
Fitness: max 0.98(54), min 0.902(6), ave 0.972
Test execution time: sum 3640 ms, max 609 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:51:49 [main] [INFO]  KGenProgMain - entered the era of 427th generation.
2023-12-14 13:52:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 45 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 6, redundant 10
Fitness: max 0.98(48), min 0.765(1), ave 0.972
Test execution time: sum 2560 ms, max 62 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:52:05 [main] [INFO]  KGenProgMain - entered the era of 428th generation.
2023-12-14 13:52:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 1 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 10, redundant 12
Fitness: max 0.98(48), min 0.902(4), ave 0.974
Test execution time: sum 2572 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:52:21 [main] [INFO]  KGenProgMain - entered the era of 429th generation.
2023-12-14 13:52:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 16 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 8, redundant 14
Fitness: max 0.98(47), min 0.431(1), ave 0.964
Test execution time: sum 2553 ms, max 70 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:52:36 [main] [INFO]  KGenProgMain - entered the era of 430th generation.
2023-12-14 13:52:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 32 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 5, redundant 9
Fitness: max 0.98(51), min 0.49(1), ave 0.968
Test execution time: sum 2706 ms, max 56 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:52:52 [main] [INFO]  KGenProgMain - entered the era of 431st generation.
2023-12-14 13:53:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 6, redundant 11
Fitness: max 0.98(51), min 0.569(1), ave 0.963
Test execution time: sum 2664 ms, max 69 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:53:08 [main] [INFO]  KGenProgMain - entered the era of 432nd generation.
2023-12-14 13:53:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 4 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 6, redundant 8
Fitness: max 0.98(56), min 0.549(1), ave 0.969
Test execution time: sum 2927 ms, max 71 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:53:24 [main] [INFO]  KGenProgMain - entered the era of 433rd generation.
2023-12-14 13:53:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 20 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 6, redundant 11
Fitness: max 0.98(55), min 0.863(1), ave 0.977
Test execution time: sum 2742 ms, max 66 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:53:40 [main] [INFO]  KGenProgMain - entered the era of 434th generation.
2023-12-14 13:53:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 36 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 9, redundant 5
Fitness: max 0.98(54), min 0.49(1), ave 0.966
Test execution time: sum 2799 ms, max 79 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:53:56 [main] [INFO]  KGenProgMain - entered the era of 435th generation.
2023-12-14 13:54:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 52 seconds
Variants: generated 100, build-succeeded 58, build-failed 35, syntax-invalid 4, redundant 3
Fitness: max 0.98(52), min 0.588(1), ave 0.966
Test execution time: sum 2875 ms, max 81 ms, min 41 ms
----------------------------------------------------------------

2023-12-14 13:54:12 [main] [INFO]  KGenProgMain - entered the era of 436th generation.
2023-12-14 13:54:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 8 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 6, redundant 3
Fitness: max 1(1), min 0.765(1), ave 0.973
Test execution time: sum 2762 ms, max 68 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:54:28 [main] [INFO]  KGenProgMain - entered the era of 437th generation.
2023-12-14 13:54:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 23 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 10, redundant 10
Fitness: max 0.98(48), min 0.49(1), ave 0.962
Test execution time: sum 2544 ms, max 64 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:54:43 [main] [INFO]  KGenProgMain - entered the era of 438th generation.
2023-12-14 13:54:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 39 seconds
Variants: generated 100, build-succeeded 64, build-failed 30, syntax-invalid 4, redundant 2
Fitness: max 0.98(57), min 0.725(2), ave 0.963
Test execution time: sum 3141 ms, max 91 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:54:59 [main] [INFO]  KGenProgMain - entered the era of 439th generation.
2023-12-14 13:55:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 55 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 7, redundant 7
Fitness: max 0.98(52), min 0.49(1), ave 0.971
Test execution time: sum 2527 ms, max 63 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:55:15 [main] [INFO]  KGenProgMain - entered the era of 440th generation.
2023-12-14 13:55:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 10 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 6, redundant 9
Fitness: max 0.98(48), min 0.49(3), ave 0.95
Test execution time: sum 2615 ms, max 66 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 13:55:30 [main] [INFO]  KGenProgMain - entered the era of 441st generation.
2023-12-14 13:55:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 26 seconds
Variants: generated 100, build-succeeded 54, build-failed 36, syntax-invalid 6, redundant 4
Fitness: max 0.98(53), min 0.941(1), ave 0.98
Test execution time: sum 2600 ms, max 65 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:55:44 [main] [INFO]  KGenProgMain - entered the era of 442nd generation.
2023-12-14 13:56:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 42 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 8, redundant 6
Fitness: max 0.98(50), min 0.765(1), ave 0.966
Test execution time: sum 3676 ms, max 1024 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:56:00 [main] [INFO]  KGenProgMain - entered the era of 443rd generation.
2023-12-14 13:56:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 58 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 5, redundant 9
Fitness: max 0.98(53), min 0.765(1), ave 0.976
Test execution time: sum 2637 ms, max 63 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:56:16 [main] [INFO]  KGenProgMain - entered the era of 444th generation.
2023-12-14 13:56:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 15 seconds
Variants: generated 100, build-succeeded 58, build-failed 23, syntax-invalid 7, redundant 12
Fitness: max 0.98(51), min 0.843(1), ave 0.971
Test execution time: sum 3342 ms, max 560 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:56:33 [main] [INFO]  KGenProgMain - entered the era of 445th generation.
2023-12-14 13:56:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 32 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 5, redundant 8
Fitness: max 0.98(55), min 0.725(1), ave 0.97
Test execution time: sum 3589 ms, max 578 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:56:50 [main] [INFO]  KGenProgMain - entered the era of 446th generation.
2023-12-14 13:57:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 7, redundant 10
Fitness: max 0.98(51), min 0.49(1), ave 0.959
Test execution time: sum 2648 ms, max 66 ms, min 42 ms
----------------------------------------------------------------

2023-12-14 13:57:06 [main] [INFO]  KGenProgMain - entered the era of 447th generation.
2023-12-14 13:57:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 7 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 5, redundant 7
Fitness: max 0.98(50), min 0.902(5), ave 0.972
Test execution time: sum 3700 ms, max 200 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:57:25 [main] [INFO]  KGenProgMain - entered the era of 448th generation.
2023-12-14 13:57:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 24 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 7, redundant 7
Fitness: max 0.98(54), min 0.529(1), ave 0.966
Test execution time: sum 2980 ms, max 90 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:57:42 [main] [INFO]  KGenProgMain - entered the era of 449th generation.
2023-12-14 13:58:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 42 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 5, redundant 5
Fitness: max 0.98(52), min 0.902(1), ave 0.977
Test execution time: sum 3747 ms, max 922 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:58:00 [main] [INFO]  KGenProgMain - entered the era of 450th generation.
2023-12-14 13:58:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 59 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 8, redundant 5
Fitness: max 0.98(56), min 0.49(1), ave 0.971
Test execution time: sum 2877 ms, max 65 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 13:58:16 [main] [INFO]  KGenProgMain - entered the era of 451st generation.
2023-12-14 13:58:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 15 seconds
Variants: generated 100, build-succeeded 61, build-failed 20, syntax-invalid 5, redundant 14
Fitness: max 0.98(54), min 0.667(1), ave 0.96
Test execution time: sum 3037 ms, max 62 ms, min 44 ms
----------------------------------------------------------------

2023-12-14 13:58:33 [main] [INFO]  KGenProgMain - entered the era of 452nd generation.
2023-12-14 13:58:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 6, redundant 11
Fitness: max 0.98(44), min 0.843(2), ave 0.969
Test execution time: sum 2501 ms, max 61 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:58:49 [main] [INFO]  KGenProgMain - entered the era of 453rd generation.
2023-12-14 13:59:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 7, redundant 6
Fitness: max 0.98(53), min 0.863(1), ave 0.978
Test execution time: sum 2746 ms, max 71 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:59:06 [main] [INFO]  KGenProgMain - entered the era of 454th generation.
2023-12-14 13:59:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 4 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 6, redundant 8
Fitness: max 0.98(55), min 0.902(1), ave 0.979
Test execution time: sum 2855 ms, max 69 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:59:22 [main] [INFO]  KGenProgMain - entered the era of 455th generation.
2023-12-14 13:59:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 21 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 12, redundant 9
Fitness: max 0.98(51), min 0.588(1), ave 0.969
Test execution time: sum 2742 ms, max 65 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 13:59:39 [main] [INFO]  KGenProgMain - entered the era of 456th generation.
2023-12-14 13:59:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 38 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 8, redundant 9
Fitness: max 0.98(45), min 0.49(1), ave 0.932
Test execution time: sum 3034 ms, max 74 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 13:59:55 [main] [INFO]  KGenProgMain - entered the era of 457th generation.
2023-12-14 14:00:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 55 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 5, redundant 12
Fitness: max 0.98(54), min 0.902(2), ave 0.978
Test execution time: sum 2916 ms, max 69 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 14:00:13 [main] [INFO]  KGenProgMain - entered the era of 458th generation.
2023-12-14 14:00:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 12 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 4, redundant 6
Fitness: max 0.98(53), min 0.843(1), ave 0.975
Test execution time: sum 2914 ms, max 64 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:00:30 [main] [INFO]  KGenProgMain - entered the era of 459th generation.
2023-12-14 14:00:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 30 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 3, redundant 6
Fitness: max 0.98(55), min 0.804(1), ave 0.969
Test execution time: sum 3266 ms, max 74 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 14:00:47 [main] [INFO]  KGenProgMain - entered the era of 460th generation.
2023-12-14 14:01:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 47 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 5, redundant 6
Fitness: max 0.98(55), min 0.353(1), ave 0.955
Test execution time: sum 3355 ms, max 103 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:01:05 [main] [INFO]  KGenProgMain - entered the era of 461st generation.
2023-12-14 14:01:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 5 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0.49(1), ave 0.952
Test execution time: sum 3078 ms, max 80 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 14:01:22 [main] [INFO]  KGenProgMain - entered the era of 462nd generation.
2023-12-14 14:01:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 21 seconds
Variants: generated 100, build-succeeded 63, build-failed 24, syntax-invalid 8, redundant 5
Fitness: max 0.98(56), min 0.49(1), ave 0.959
Test execution time: sum 3245 ms, max 66 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 14:01:39 [main] [INFO]  KGenProgMain - entered the era of 463rd generation.
2023-12-14 14:01:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 38 seconds
Variants: generated 100, build-succeeded 60, build-failed 23, syntax-invalid 5, redundant 12
Fitness: max 0.98(56), min 0.765(1), ave 0.973
Test execution time: sum 3123 ms, max 63 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 14:01:56 [main] [INFO]  KGenProgMain - entered the era of 464th generation.
2023-12-14 14:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 55 seconds
Variants: generated 100, build-succeeded 45, build-failed 35, syntax-invalid 13, redundant 7
Fitness: max 0.98(41), min 0.902(4), ave 0.973
Test execution time: sum 2331 ms, max 65 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 14:02:12 [main] [INFO]  KGenProgMain - entered the era of 465th generation.
2023-12-14 14:02:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 11 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 14, redundant 8
Fitness: max 0.98(45), min 0.902(4), ave 0.973
Test execution time: sum 2656 ms, max 70 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 14:02:28 [main] [INFO]  KGenProgMain - entered the era of 466th generation.
2023-12-14 14:02:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 30 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 5, redundant 5
Fitness: max 0.98(56), min 0.902(1), ave 0.978
Test execution time: sum 4280 ms, max 1103 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:02:48 [main] [INFO]  KGenProgMain - entered the era of 467th generation.
2023-12-14 14:03:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 13, redundant 6
Fitness: max 0.98(49), min 0.902(3), ave 0.974
Test execution time: sum 4298 ms, max 1336 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:03:06 [main] [INFO]  KGenProgMain - entered the era of 468th generation.
2023-12-14 14:03:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 7, redundant 9
Fitness: max 0.98(54), min 0.843(1), ave 0.977
Test execution time: sum 2998 ms, max 73 ms, min 45 ms
----------------------------------------------------------------

2023-12-14 14:03:24 [main] [INFO]  KGenProgMain - entered the era of 469th generation.
2023-12-14 14:03:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 25 seconds
Variants: generated 100, build-succeeded 58, build-failed 22, syntax-invalid 13, redundant 7
Fitness: max 0.98(49), min 0.549(1), ave 0.962
Test execution time: sum 4274 ms, max 918 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:03:43 [main] [INFO]  KGenProgMain - entered the era of 470th generation.
2023-12-14 14:04:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 46 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 8, redundant 2
Fitness: max 0.98(53), min 0.549(1), ave 0.955
Test execution time: sum 5850 ms, max 2397 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:04:04 [main] [INFO]  KGenProgMain - entered the era of 471st generation.
2023-12-14 14:04:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 3 seconds
Variants: generated 100, build-succeeded 59, build-failed 23, syntax-invalid 13, redundant 5
Fitness: max 0.98(50), min 0.843(1), ave 0.969
Test execution time: sum 3269 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:04:21 [main] [INFO]  KGenProgMain - entered the era of 472nd generation.
2023-12-14 14:04:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 23 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 13, redundant 2
Fitness: max 0.98(50), min 0.843(1), ave 0.971
Test execution time: sum 3448 ms, max 97 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:04:41 [main] [INFO]  KGenProgMain - entered the era of 473rd generation.
2023-12-14 14:04:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 41 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 14, redundant 7
Fitness: max 0.98(44), min 0.235(1), ave 0.953
Test execution time: sum 3630 ms, max 539 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 14:04:59 [main] [INFO]  KGenProgMain - entered the era of 474th generation.
2023-12-14 14:05:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 3 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 9, redundant 6
Fitness: max 0.98(52), min 0.49(1), ave 0.966
Test execution time: sum 5227 ms, max 792 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:05:21 [main] [INFO]  KGenProgMain - entered the era of 475th generation.
2023-12-14 14:05:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 23 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0.824(1), ave 0.977
Test execution time: sum 3773 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:05:41 [main] [INFO]  KGenProgMain - entered the era of 476th generation.
2023-12-14 14:06:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 44 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 11, redundant 4
Fitness: max 0.98(50), min 0.725(1), ave 0.967
Test execution time: sum 5329 ms, max 2054 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 14:06:02 [main] [INFO]  KGenProgMain - entered the era of 477th generation.
2023-12-14 14:06:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 3 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 7, redundant 7
Fitness: max 1(1), min 0.353(1), ave 0.953
Test execution time: sum 3845 ms, max 729 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:06:21 [main] [INFO]  KGenProgMain - entered the era of 478th generation.
2023-12-14 14:06:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 20 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 17, redundant 7
Fitness: max 0.98(43), min 0.157(1), ave 0.947
Test execution time: sum 2608 ms, max 65 ms, min 43 ms
----------------------------------------------------------------

2023-12-14 14:06:38 [main] [INFO]  KGenProgMain - entered the era of 479th generation.
2023-12-14 14:06:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 40 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 7, redundant 4
Fitness: max 1(1), min 0.843(1), ave 0.968
Test execution time: sum 4507 ms, max 904 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:06:58 [main] [INFO]  KGenProgMain - entered the era of 480th generation.
2023-12-14 14:07:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 59 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 15, redundant 5
Fitness: max 0.98(45), min 0.843(1), ave 0.966
Test execution time: sum 3426 ms, max 196 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 14:07:16 [main] [INFO]  KGenProgMain - entered the era of 481st generation.
2023-12-14 14:07:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 17 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 12, redundant 6
Fitness: max 0.98(54), min 0.49(1), ave 0.97
Test execution time: sum 3237 ms, max 101 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:07:34 [main] [INFO]  KGenProgMain - entered the era of 482nd generation.
2023-12-14 14:07:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 33 seconds
Variants: generated 100, build-succeeded 51, build-failed 25, syntax-invalid 19, redundant 5
Fitness: max 0.98(42), min 0.49(1), ave 0.958
Test execution time: sum 2689 ms, max 68 ms, min 33 ms
----------------------------------------------------------------

2023-12-14 14:07:51 [main] [INFO]  KGenProgMain - entered the era of 483rd generation.
2023-12-14 14:08:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 51 seconds
Variants: generated 100, build-succeeded 61, build-failed 23, syntax-invalid 10, redundant 6
Fitness: max 0.98(54), min 0.314(1), ave 0.956
Test execution time: sum 3343 ms, max 69 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:08:09 [main] [INFO]  KGenProgMain - entered the era of 484th generation.
2023-12-14 14:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 9 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 8, redundant 7
Fitness: max 0.98(52), min 0.471(1), ave 0.951
Test execution time: sum 3168 ms, max 67 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 14:08:27 [main] [INFO]  KGenProgMain - entered the era of 485th generation.
2023-12-14 14:08:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 29 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 10, redundant 7
Fitness: max 0.98(52), min 0.49(1), ave 0.957
Test execution time: sum 4708 ms, max 1538 ms, min 38 ms
----------------------------------------------------------------

2023-12-14 14:08:47 [main] [INFO]  KGenProgMain - entered the era of 486th generation.
2023-12-14 14:09:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 48 seconds
Variants: generated 100, build-succeeded 55, build-failed 20, syntax-invalid 14, redundant 11
Fitness: max 0.98(48), min 0.216(1), ave 0.938
Test execution time: sum 4206 ms, max 892 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:09:06 [main] [INFO]  KGenProgMain - entered the era of 487th generation.
2023-12-14 14:09:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 8 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 8, redundant 3
Fitness: max 0.98(52), min 0.49(2), ave 0.952
Test execution time: sum 3441 ms, max 79 ms, min 46 ms
----------------------------------------------------------------

2023-12-14 14:09:26 [main] [INFO]  KGenProgMain - entered the era of 488th generation.
2023-12-14 14:09:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 26 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 11, redundant 6
Fitness: max 0.98(52), min 0.765(1), ave 0.972
Test execution time: sum 3359 ms, max 140 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 14:09:44 [main] [INFO]  KGenProgMain - entered the era of 489th generation.
2023-12-14 14:10:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 46 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 15, redundant 5
Fitness: max 0.98(46), min 0.902(2), ave 0.977
Test execution time: sum 3127 ms, max 142 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:10:04 [main] [INFO]  KGenProgMain - entered the era of 490th generation.
2023-12-14 14:10:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 8 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 9, redundant 3
Fitness: max 0.98(51), min 0.863(1), ave 0.971
Test execution time: sum 3946 ms, max 150 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:10:26 [main] [INFO]  KGenProgMain - entered the era of 491st generation.
2023-12-14 14:10:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 26 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 16, redundant 2
Fitness: max 0.98(49), min 0.863(1), ave 0.972
Test execution time: sum 3061 ms, max 102 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:10:44 [main] [INFO]  KGenProgMain - entered the era of 492nd generation.
2023-12-14 14:11:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 45 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 11, redundant 8
Fitness: max 0.98(54), min 0.863(1), ave 0.976
Test execution time: sum 3461 ms, max 150 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:11:03 [main] [INFO]  KGenProgMain - entered the era of 493rd generation.
2023-12-14 14:11:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 5 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 16, redundant 4
Fitness: max 0.98(50), min 0.902(5), ave 0.973
Test execution time: sum 3451 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:11:23 [main] [INFO]  KGenProgMain - entered the era of 494th generation.
2023-12-14 14:11:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 24 seconds
Variants: generated 100, build-succeeded 63, build-failed 25, syntax-invalid 10, redundant 2
Fitness: max 0.98(57), min 0.275(1), ave 0.957
Test execution time: sum 3557 ms, max 81 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 14:11:42 [main] [INFO]  KGenProgMain - entered the era of 495th generation.
2023-12-14 14:12:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 42 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 14, redundant 6
Fitness: max 1(1), min 0.902(7), ave 0.97
Test execution time: sum 3012 ms, max 95 ms, min 40 ms
----------------------------------------------------------------

2023-12-14 14:12:00 [main] [INFO]  KGenProgMain - entered the era of 496th generation.
2023-12-14 14:12:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 1 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 16, redundant 3
Fitness: max 0.98(48), min 0.765(1), ave 0.966
Test execution time: sum 3209 ms, max 88 ms, min 50 ms
----------------------------------------------------------------

2023-12-14 14:12:19 [main] [INFO]  KGenProgMain - entered the era of 497th generation.
2023-12-14 14:12:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 19 seconds
Variants: generated 100, build-succeeded 55, build-failed 24, syntax-invalid 15, redundant 6
Fitness: max 0.98(50), min 0.353(1), ave 0.956
Test execution time: sum 3141 ms, max 101 ms, min 48 ms
----------------------------------------------------------------

2023-12-14 14:12:37 [main] [INFO]  KGenProgMain - entered the era of 498th generation.
2023-12-14 14:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 38 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 14, redundant 7
Fitness: max 0.98(47), min 0.765(1), ave 0.972
Test execution time: sum 3033 ms, max 100 ms, min 51 ms
----------------------------------------------------------------

2023-12-14 14:12:56 [main] [INFO]  KGenProgMain - entered the era of 499th generation.
2023-12-14 14:13:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 59 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 8, redundant 6
Fitness: max 0.98(53), min 0.843(2), ave 0.969
Test execution time: sum 3776 ms, max 90 ms, min 49 ms
----------------------------------------------------------------

2023-12-14 14:13:17 [main] [INFO]  KGenProgMain - entered the era of 500th generation.
2023-12-14 14:13:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 18 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 11, redundant 9
Fitness: max 0.98(51), min 0.353(1), ave 0.96
Test execution time: sum 3362 ms, max 137 ms, min 47 ms
----------------------------------------------------------------

2023-12-14 14:13:36 [main] [INFO]  KGenProgMain - GA stopped
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -978,7 +977,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v79)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -972,7 +971,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v593)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						{
+							System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+							pos += lineSeparator.length;
+						}
                     }
                 }
             }
@@ -972,7 +975,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v651)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -972,7 +973,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v654)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,12 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v688)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -967,12 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v956)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1006)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,28 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -972,7 +994,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1051)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,17 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -972,7 +983,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1083)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -492,7 +491,44 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -972,7 +1008,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1085)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -471,7 +470,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -972,7 +972,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,45 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -967,12 +1005,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1394)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,44 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -972,7 +1009,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1396)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -407,7 +406,8 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            len--;
+			readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -972,7 +973,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1399)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +493,44 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1583)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,66 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +1026,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v1738)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,7 +406,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -471,7 +469,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +491,44 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1015,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return len;
             }
         }
         return len;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2237)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -492,6 +491,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v2809)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -492,6 +491,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1053,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v3317)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,23 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +995,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4405)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -492,7 +491,21 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +992,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1064,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4441)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +493,24 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+						}
+						pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +991,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1069,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4555)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,33 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +999,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4571)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +493,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1056,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4588)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -471,7 +472,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +494,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1055,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4596)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,8 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -492,6 +494,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v4598)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -471,7 +472,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +496,20 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -254,7 +254,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (modulus == 0){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5332)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -471,7 +472,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +494,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						x = (x << 8) + b;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            eof = true;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v5707)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -447,11 +447,13 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case '\n':
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -492,7 +494,45 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1013,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v6941)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -492,7 +491,55 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1026,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,6 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-12-14 14:13:36 [main] [INFO]  PatchLogExporter - patch (v7143)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,8 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -492,7 +494,45 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1013,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v7629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,67 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1039,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -254,7 +254,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (modulus == 0){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8416)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,65 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1031,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v8963)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,50 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1022,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9137)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,38 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        modulus = 0;
+						pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1004,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -254,7 +254,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (modulus == 0){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,56 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1022,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -254,7 +254,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (modulus == 0){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v9159)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -447,7 +447,18 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 3:
+					x = x >> 2;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,7 +503,49 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +879,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +1027,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,8 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -247,7 +247,8 @@
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+            byte[] result = new byte[pos];
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
@@ -326,7 +327,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (buffer == null || buffer.length - pos < encodeSize) {
                 return true;
             }
         }
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12221)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,83 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -951,6 +1027,7 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +1050,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v12295)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,101 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						int readLen = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1067,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14373)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,107 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1073,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14466)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,150 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1116,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14475)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,169 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						int readLen = 0;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1135,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v14486)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,129 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1094,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15241)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,169 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1135,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15632)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,241 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						switch (modulus) {
+						case 2:
+							buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+							break;
+						case 3:
+							buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+							break;
+						case 4:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 5:
+							x = x >> 1;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 6:
+							x = x >> 6;
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 7:
+							x = x >> 3;
+							buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1207,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,108 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1074,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17544)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,129 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						b += 256;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1095,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v17985)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,192 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						b += 256;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1158,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,10 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18000)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,160 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1126,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18099)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,148 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						b += 256;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1114,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,10 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18174)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,130 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						b += 256;
+						eof = false;
+						b += 256;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1096,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18283)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,149 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						b += 256;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1115,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18366)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,159 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						readPos = 0;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1125,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,10 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18377)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,173 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1139,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18479)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,127 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						b += 256;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1093,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18486)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,168 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1134,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,10 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18651)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,157 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1123,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,11 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v18695)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,186 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1157,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,166 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						int readLen = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1138,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v21820)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,115 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1080,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22652)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,159 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +978,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int bytesCopied = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +1126,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22688)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,91 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1057,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22699)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,93 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                     }
                 }
             }
@@ -973,7 +1058,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v22800)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,189 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1155,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v24049)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,254 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +1214,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1223,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,8 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v27917)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,268 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +1228,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1237,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,9 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29018)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,185 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						readPos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1151,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,10 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29206)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,232 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -951,6 +1176,7 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		currentLinePos = 0;
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +1199,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,13 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v29964)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,257 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						byte[] result = new byte[pos];
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1223,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,15 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v33615)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,256 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						byte[] result = new byte[pos];
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1228,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,14 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34412)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,319 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1285,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,17 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v34816)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,208 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -977,9 +1178,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,15 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36039)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,271 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1237,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,11 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,194 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1160,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,18 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36439)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,217 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1183,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1055,6 +1264,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
+		resizeBuffer();
         eof = false;
     }
 
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,15 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v36843)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,177 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1143,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1055,6 +1224,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
+		resizeBuffer();
         eof = false;
     }
 
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,16 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v37208)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,176 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1148,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1055,6 +1223,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
+		resizeBuffer();
         eof = false;
     }
 
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,11 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v39142)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,199 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						int bytesCopied = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1171,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1055,6 +1246,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
+		resizeBuffer();
         eof = false;
     }
 
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,11 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40750)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,166 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1132,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1055,6 +1213,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
+		resizeBuffer();
         eof = false;
     }
 
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,14 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40817)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,182 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						int bytesCopied = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1153,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,15 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v40821)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,194 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1166,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,15 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v41239)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,10 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +494,224 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1191,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,11 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v43448)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,214 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1180,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,24 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v45943)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,286 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1252,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,24 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47310)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -492,7 +491,268 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1239,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,29 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47506)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,329 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1295,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,22 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v47746)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,257 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						b += 256;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1229,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,22 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-12-14 14:13:37 [main] [INFO]  PatchLogExporter - patch (v49322)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-12-14 14:13:37 [main] [INFO]  KGenProgMain - Summary
Reached generation = 500
Generated variants = 49900
Syntax valid variants = 43669
Build succeeded variants = 24940
Time elapsed = 1 hours 35 minutes 19 seconds
Exit status = FAILURE (maximum generation)
