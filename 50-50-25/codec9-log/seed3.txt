2023-10-22 17:55:34 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-10-22 17:55:34 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-10-22 17:55:34 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-10-22 17:55:34 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-10-22 17:55:42 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-10-22 17:55:42 [main] [INFO]  KGenProgMain - GA started
2023-10-22 17:55:42 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-10-22 17:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 seconds
Variants: generated 50, build-succeeded 6, build-failed 22, syntax-invalid 3, redundant 19
Fitness: max 0.98(2), min 0.49(2), ave 0.719
Test execution time: sum 1147 ms, max 346 ms, min 122 ms
----------------------------------------------------------------

2023-10-22 17:55:47 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-10-22 17:55:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 50, build-succeeded 9, build-failed 26, syntax-invalid 4, redundant 11
Fitness: max 0.98(1), min 0.235(1), ave 0.699
Test execution time: sum 1015 ms, max 217 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 17:55:50 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-10-22 17:55:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 100, build-succeeded 30, build-failed 29, syntax-invalid 8, redundant 33
Fitness: max 0.98(5), min 0.235(1), ave 0.675
Test execution time: sum 2565 ms, max 151 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 17:55:57 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-10-22 17:56:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 seconds
Variants: generated 100, build-succeeded 29, build-failed 30, syntax-invalid 9, redundant 32
Fitness: max 1(1), min 0.49(2), ave 0.794
Test execution time: sum 2494 ms, max 186 ms, min 59 ms
----------------------------------------------------------------

2023-10-22 17:56:03 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-10-22 17:56:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 100, build-succeeded 25, build-failed 28, syntax-invalid 9, redundant 38
Fitness: max 1(1), min 0.235(1), ave 0.836
Test execution time: sum 2184 ms, max 211 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 17:56:09 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-10-22 17:56:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 seconds
Variants: generated 100, build-succeeded 21, build-failed 27, syntax-invalid 13, redundant 39
Fitness: max 1(2), min 0.471(1), ave 0.876
Test execution time: sum 1841 ms, max 160 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 17:56:14 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-10-22 17:56:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 seconds
Variants: generated 100, build-succeeded 27, build-failed 33, syntax-invalid 8, redundant 32
Fitness: max 1(2), min 0.843(1), ave 0.938
Test execution time: sum 2139 ms, max 98 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 17:56:18 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-10-22 17:56:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 seconds
Variants: generated 100, build-succeeded 24, build-failed 25, syntax-invalid 17, redundant 34
Fitness: max 1(2), min 0.863(4), ave 0.944
Test execution time: sum 1927 ms, max 108 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 17:56:22 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-10-22 17:56:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 seconds
Variants: generated 100, build-succeeded 29, build-failed 32, syntax-invalid 13, redundant 26
Fitness: max 0.98(18), min 0.725(1), ave 0.944
Test execution time: sum 2324 ms, max 100 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 17:56:27 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-10-22 17:56:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 seconds
Variants: generated 100, build-succeeded 30, build-failed 32, syntax-invalid 14, redundant 24
Fitness: max 0.98(17), min 0.667(1), ave 0.935
Test execution time: sum 2439 ms, max 95 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 17:56:32 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-10-22 17:56:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 seconds
Variants: generated 100, build-succeeded 39, build-failed 28, syntax-invalid 8, redundant 25
Fitness: max 1(1), min 0.49(2), ave 0.931
Test execution time: sum 3353 ms, max 136 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 17:56:38 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-10-22 17:56:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 1 seconds
Variants: generated 100, build-succeeded 37, build-failed 29, syntax-invalid 10, redundant 24
Fitness: max 1(2), min 0.49(1), ave 0.932
Test execution time: sum 2946 ms, max 96 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 17:56:43 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-10-22 17:56:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 9 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 2, redundant 23
Fitness: max 1(3), min 0.49(1), ave 0.943
Test execution time: sum 3854 ms, max 189 ms, min 56 ms
----------------------------------------------------------------

2023-10-22 17:56:51 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-10-22 17:56:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 15 seconds
Variants: generated 100, build-succeeded 41, build-failed 24, syntax-invalid 8, redundant 27
Fitness: max 1(4), min 0.569(1), ave 0.947
Test execution time: sum 3275 ms, max 149 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 17:56:57 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-10-22 17:57:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 22 seconds
Variants: generated 100, build-succeeded 39, build-failed 32, syntax-invalid 8, redundant 21
Fitness: max 1(1), min 0.549(1), ave 0.953
Test execution time: sum 4457 ms, max 1466 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 17:57:05 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-10-22 17:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 28 seconds
Variants: generated 100, build-succeeded 38, build-failed 32, syntax-invalid 8, redundant 22
Fitness: max 1(2), min 0.51(1), ave 0.95
Test execution time: sum 3050 ms, max 115 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 17:57:11 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-10-22 17:57:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 34 seconds
Variants: generated 100, build-succeeded 40, build-failed 37, syntax-invalid 12, redundant 11
Fitness: max 1(4), min 0.137(1), ave 0.942
Test execution time: sum 3200 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-10-22 17:57:17 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-10-22 17:57:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 40 seconds
Variants: generated 100, build-succeeded 41, build-failed 26, syntax-invalid 11, redundant 22
Fitness: max 1(7), min 0.569(1), ave 0.96
Test execution time: sum 3249 ms, max 123 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 17:57:23 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-10-22 17:57:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 47 seconds
Variants: generated 100, build-succeeded 40, build-failed 31, syntax-invalid 15, redundant 14
Fitness: max 1(4), min 0.275(1), ave 0.938
Test execution time: sum 3199 ms, max 135 ms, min 52 ms
----------------------------------------------------------------

2023-10-22 17:57:30 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-10-22 17:57:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 54 seconds
Variants: generated 100, build-succeeded 42, build-failed 26, syntax-invalid 14, redundant 18
Fitness: max 1(1), min 0.49(2), ave 0.916
Test execution time: sum 3213 ms, max 114 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 17:57:36 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-10-22 17:57:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 1 seconds
Variants: generated 100, build-succeeded 49, build-failed 24, syntax-invalid 10, redundant 17
Fitness: max 1(3), min 0.49(1), ave 0.945
Test execution time: sum 3811 ms, max 133 ms, min 50 ms
----------------------------------------------------------------

2023-10-22 17:57:44 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-10-22 17:57:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 6 seconds
Variants: generated 100, build-succeeded 37, build-failed 32, syntax-invalid 5, redundant 26
Fitness: max 1(3), min 0.49(1), ave 0.938
Test execution time: sum 2787 ms, max 100 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 17:57:49 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-10-22 17:57:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 13 seconds
Variants: generated 100, build-succeeded 37, build-failed 30, syntax-invalid 8, redundant 25
Fitness: max 1(3), min 0.784(1), ave 0.955
Test execution time: sum 2960 ms, max 169 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 17:57:55 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-10-22 17:58:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 18 seconds
Variants: generated 100, build-succeeded 39, build-failed 25, syntax-invalid 9, redundant 27
Fitness: max 1(1), min 0.608(1), ave 0.963
Test execution time: sum 2917 ms, max 86 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 17:58:00 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-10-22 17:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 24 seconds
Variants: generated 100, build-succeeded 39, build-failed 25, syntax-invalid 15, redundant 21
Fitness: max 1(1), min 0.549(1), ave 0.939
Test execution time: sum 3076 ms, max 195 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 17:58:07 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-10-22 17:58:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 30 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 10, redundant 17
Fitness: max 0.98(31), min 0.353(1), ave 0.949
Test execution time: sum 3336 ms, max 99 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 17:58:13 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-10-22 17:58:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 37 seconds
Variants: generated 100, build-succeeded 40, build-failed 28, syntax-invalid 16, redundant 16
Fitness: max 0.98(27), min 0.49(1), ave 0.944
Test execution time: sum 3117 ms, max 188 ms, min 51 ms
----------------------------------------------------------------

2023-10-22 17:58:19 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-10-22 17:58:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 44 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 3, redundant 17
Fitness: max 0.98(45), min 0.49(1), ave 0.962
Test execution time: sum 3979 ms, max 116 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 17:58:26 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-10-22 17:58:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 52 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 3, redundant 15
Fitness: max 0.98(41), min 0.902(7), ave 0.969
Test execution time: sum 3929 ms, max 186 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 17:58:34 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-10-22 17:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 58 seconds
Variants: generated 100, build-succeeded 41, build-failed 29, syntax-invalid 8, redundant 22
Fitness: max 0.98(35), min 0.49(1), ave 0.959
Test execution time: sum 3182 ms, max 114 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 17:58:40 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-10-22 17:58:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 5 seconds
Variants: generated 100, build-succeeded 45, build-failed 24, syntax-invalid 10, redundant 21
Fitness: max 0.98(36), min 0.353(1), ave 0.943
Test execution time: sum 3710 ms, max 184 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 17:58:47 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-10-22 17:58:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 12 seconds
Variants: generated 100, build-succeeded 45, build-failed 22, syntax-invalid 10, redundant 23
Fitness: max 0.98(34), min 0.353(1), ave 0.932
Test execution time: sum 3705 ms, max 185 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 17:58:55 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-10-22 17:59:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 18 seconds
Variants: generated 100, build-succeeded 34, build-failed 31, syntax-invalid 16, redundant 19
Fitness: max 0.98(28), min 0.902(6), ave 0.967
Test execution time: sum 2760 ms, max 115 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 17:59:00 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-10-22 17:59:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 25 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 12, redundant 17
Fitness: max 0.98(38), min 0.863(1), ave 0.972
Test execution time: sum 3580 ms, max 196 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 17:59:08 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-10-22 17:59:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 33 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 11, redundant 9
Fitness: max 0.98(46), min 0.549(1), ave 0.963
Test execution time: sum 4113 ms, max 112 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 17:59:15 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-10-22 17:59:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 42 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 10, redundant 8
Fitness: max 0.98(47), min 0.863(1), ave 0.971
Test execution time: sum 4457 ms, max 145 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 17:59:24 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-10-22 17:59:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 50 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 10, redundant 14
Fitness: max 0.98(37), min 0.471(1), ave 0.94
Test execution time: sum 3981 ms, max 190 ms, min 51 ms
----------------------------------------------------------------

2023-10-22 17:59:32 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-10-22 17:59:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 57 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 8, redundant 12
Fitness: max 0.98(44), min 0.667(1), ave 0.969
Test execution time: sum 3918 ms, max 120 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 17:59:40 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-10-22 17:59:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 5 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 17, redundant 7
Fitness: max 0.98(44), min 0.902(3), ave 0.975
Test execution time: sum 3916 ms, max 147 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 17:59:48 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-10-22 17:59:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 14 seconds
Variants: generated 100, build-succeeded 49, build-failed 35, syntax-invalid 8, redundant 8
Fitness: max 0.98(45), min 0.765(1), ave 0.97
Test execution time: sum 4035 ms, max 164 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 17:59:56 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-10-22 18:00:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 20 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 15, redundant 7
Fitness: max 0.98(37), min 0.549(1), ave 0.964
Test execution time: sum 3287 ms, max 107 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 18:00:03 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-10-22 18:00:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 28 seconds
Variants: generated 100, build-succeeded 41, build-failed 24, syntax-invalid 17, redundant 18
Fitness: max 1(1), min 0.529(1), ave 0.945
Test execution time: sum 3296 ms, max 146 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 18:00:10 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-10-22 18:00:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 39 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 10, redundant 15
Fitness: max 0.98(44), min 0.588(1), ave 0.957
Test execution time: sum 6361 ms, max 2434 ms, min 52 ms
----------------------------------------------------------------

2023-10-22 18:00:21 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-10-22 18:00:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 46 seconds
Variants: generated 100, build-succeeded 42, build-failed 34, syntax-invalid 17, redundant 7
Fitness: max 0.98(36), min 0.588(1), ave 0.956
Test execution time: sum 3634 ms, max 172 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:00:29 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-10-22 18:00:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 55 seconds
Variants: generated 100, build-succeeded 45, build-failed 35, syntax-invalid 10, redundant 10
Fitness: max 0.98(41), min 0.824(1), ave 0.971
Test execution time: sum 3806 ms, max 146 ms, min 66 ms
----------------------------------------------------------------

2023-10-22 18:00:37 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-10-22 18:00:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 3 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 7, redundant 11
Fitness: max 0.98(44), min 0.49(1), ave 0.961
Test execution time: sum 3877 ms, max 174 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 18:00:46 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-10-22 18:00:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 11 seconds
Variants: generated 100, build-succeeded 42, build-failed 32, syntax-invalid 14, redundant 12
Fitness: max 0.98(38), min 0.765(1), ave 0.968
Test execution time: sum 3486 ms, max 132 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 18:00:54 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-10-22 18:01:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 20 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 9, redundant 9
Fitness: max 0.98(46), min 0.667(1), ave 0.971
Test execution time: sum 3889 ms, max 128 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:01:02 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-10-22 18:01:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 30 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 3, redundant 16
Fitness: max 1(1), min 0.765(2), ave 0.967
Test execution time: sum 4303 ms, max 188 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 18:01:12 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-10-22 18:01:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 39 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 5, redundant 14
Fitness: max 0.98(49), min 0.863(3), ave 0.967
Test execution time: sum 4722 ms, max 152 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:01:22 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-10-22 18:01:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 49 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 12, redundant 9
Fitness: max 0.98(48), min 0.549(1), ave 0.964
Test execution time: sum 5079 ms, max 857 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 18:01:32 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-10-22 18:01:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 57 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 13, redundant 9
Fitness: max 0.98(39), min 0.49(1), ave 0.967
Test execution time: sum 3420 ms, max 151 ms, min 51 ms
----------------------------------------------------------------

2023-10-22 18:01:39 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-10-22 18:01:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 7 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 7, redundant 11
Fitness: max 1(1), min 0.765(1), ave 0.97
Test execution time: sum 4582 ms, max 133 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 18:01:49 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-10-22 18:01:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 16 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 5, redundant 7
Fitness: max 0.98(49), min 0.765(1), ave 0.969
Test execution time: sum 4400 ms, max 143 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 18:01:58 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-10-22 18:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 26 seconds
Variants: generated 100, build-succeeded 66, build-failed 28, syntax-invalid 3, redundant 3
Fitness: max 0.98(58), min 0.49(1), ave 0.964
Test execution time: sum 5313 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 18:02:09 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-10-22 18:02:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 38 seconds
Variants: generated 100, build-succeeded 66, build-failed 25, syntax-invalid 3, redundant 6
Fitness: max 0.98(59), min 0.765(1), ave 0.968
Test execution time: sum 5520 ms, max 137 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 18:02:20 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-10-22 18:02:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 48 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 7, redundant 5
Fitness: max 0.98(49), min 0.49(1), ave 0.962
Test execution time: sum 4775 ms, max 181 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 18:02:30 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-10-22 18:02:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 58 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 12, redundant 6
Fitness: max 0.98(44), min 0.843(2), ave 0.964
Test execution time: sum 4488 ms, max 173 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 18:02:40 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-10-22 18:02:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 9 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 12, redundant 6
Fitness: max 0.98(47), min 0.667(1), ave 0.956
Test execution time: sum 5383 ms, max 850 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:02:51 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-10-22 18:03:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 18 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 15, redundant 3
Fitness: max 0.98(45), min 0.667(1), ave 0.964
Test execution time: sum 4256 ms, max 182 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 18:03:00 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-10-22 18:03:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 27 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 6, redundant 9
Fitness: max 1(1), min 0.49(1), ave 0.972
Test execution time: sum 4422 ms, max 121 ms, min 59 ms
----------------------------------------------------------------

2023-10-22 18:03:10 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-10-22 18:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 36 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 9, redundant 6
Fitness: max 0.98(48), min 0.588(2), ave 0.959
Test execution time: sum 4597 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 18:03:19 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-10-22 18:03:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 47 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 6, redundant 10
Fitness: max 0.98(50), min 0.549(1), ave 0.959
Test execution time: sum 4709 ms, max 174 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 18:03:29 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-10-22 18:03:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 57 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 4, redundant 3
Fitness: max 0.98(54), min 0.49(1), ave 0.956
Test execution time: sum 4769 ms, max 137 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 18:03:39 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-10-22 18:03:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 9 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 6, redundant 6
Fitness: max 0.98(48), min 0.843(2), ave 0.968
Test execution time: sum 6051 ms, max 1369 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:03:52 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-10-22 18:04:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 20 seconds
Variants: generated 100, build-succeeded 58, build-failed 33, syntax-invalid 3, redundant 6
Fitness: max 0.98(57), min 0.961(1), ave 0.98
Test execution time: sum 4912 ms, max 144 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 18:04:02 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-10-22 18:04:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 32 seconds
Variants: generated 100, build-succeeded 67, build-failed 26, syntax-invalid 3, redundant 4
Fitness: max 0.98(60), min 0.333(1), ave 0.958
Test execution time: sum 5576 ms, max 143 ms, min 52 ms
----------------------------------------------------------------

2023-10-22 18:04:14 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-10-22 18:04:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 42 seconds
Variants: generated 100, build-succeeded 62, build-failed 30, syntax-invalid 2, redundant 6
Fitness: max 0.98(59), min 0.49(1), ave 0.967
Test execution time: sum 5048 ms, max 184 ms, min 59 ms
----------------------------------------------------------------

2023-10-22 18:04:24 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-10-22 18:04:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 53 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 2, redundant 7
Fitness: max 1(1), min 0.49(1), ave 0.966
Test execution time: sum 5147 ms, max 139 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 18:04:36 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-10-22 18:04:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 5 seconds
Variants: generated 100, build-succeeded 62, build-failed 33, syntax-invalid 4, redundant 1
Fitness: max 0.98(56), min 0.49(1), ave 0.966
Test execution time: sum 5118 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-10-22 18:04:47 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-10-22 18:04:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 16 seconds
Variants: generated 100, build-succeeded 65, build-failed 26, syntax-invalid 3, redundant 6
Fitness: max 1(1), min 0.549(2), ave 0.954
Test execution time: sum 5243 ms, max 138 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 18:04:59 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-10-22 18:05:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 27 seconds
Variants: generated 100, build-succeeded 60, build-failed 36, syntax-invalid 3, redundant 1
Fitness: max 0.98(54), min 0.549(1), ave 0.961
Test execution time: sum 4969 ms, max 209 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 18:05:09 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-10-22 18:05:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 38 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 6, redundant 6
Fitness: max 0.98(54), min 0.353(1), ave 0.965
Test execution time: sum 4661 ms, max 200 ms, min 56 ms
----------------------------------------------------------------

2023-10-22 18:05:20 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-10-22 18:05:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 49 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 5, redundant 3
Fitness: max 0.98(55), min 0.235(1), ave 0.955
Test execution time: sum 4845 ms, max 137 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 18:05:31 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-10-22 18:05:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 59 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 10, redundant 4
Fitness: max 0.98(55), min 0.314(1), ave 0.958
Test execution time: sum 5027 ms, max 169 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 18:05:42 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-10-22 18:05:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 10 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 8, redundant 9
Fitness: max 0.98(46), min 0.49(1), ave 0.959
Test execution time: sum 4622 ms, max 216 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 18:05:52 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-10-22 18:06:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 19 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 14, redundant 2
Fitness: max 0.98(46), min 0.137(1), ave 0.933
Test execution time: sum 4414 ms, max 134 ms, min 54 ms
----------------------------------------------------------------

2023-10-22 18:06:02 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-10-22 18:06:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 30 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 9, redundant 6
Fitness: max 0.98(43), min 0.824(1), ave 0.964
Test execution time: sum 4291 ms, max 140 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:06:12 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-10-22 18:06:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 39 seconds
Variants: generated 100, build-succeeded 51, build-failed 25, syntax-invalid 18, redundant 6
Fitness: max 0.98(38), min 0.471(1), ave 0.936
Test execution time: sum 4117 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-10-22 18:06:21 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-10-22 18:06:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 10, redundant 11
Fitness: max 0.98(46), min 0.588(1), ave 0.955
Test execution time: sum 4425 ms, max 142 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 18:06:31 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-10-22 18:06:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 59 seconds
Variants: generated 100, build-succeeded 63, build-failed 29, syntax-invalid 7, redundant 1
Fitness: max 0.98(58), min 0.49(1), ave 0.966
Test execution time: sum 5199 ms, max 135 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:06:42 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-10-22 18:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 9 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 5, redundant 9
Fitness: max 0.98(53), min 0.824(1), ave 0.973
Test execution time: sum 4764 ms, max 190 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 18:06:52 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-10-22 18:07:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 20 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 4, redundant 6
Fitness: max 0.98(56), min 0.843(2), ave 0.971
Test execution time: sum 5117 ms, max 180 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 18:07:02 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-10-22 18:07:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 31 seconds
Variants: generated 100, build-succeeded 67, build-failed 23, syntax-invalid 3, redundant 7
Fitness: max 0.98(56), min 0.471(1), ave 0.946
Test execution time: sum 5347 ms, max 139 ms, min 52 ms
----------------------------------------------------------------

2023-10-22 18:07:13 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-10-22 18:07:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 40 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 8, redundant 6
Fitness: max 0.98(51), min 0.157(1), ave 0.937
Test execution time: sum 4794 ms, max 105 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 18:07:23 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-10-22 18:07:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 35, syntax-invalid 2, redundant 4
Fitness: max 1(1), min 0.765(1), ave 0.968
Test execution time: sum 4722 ms, max 129 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:07:33 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-10-22 18:07:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 1 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 4, redundant 6
Fitness: max 1(1), min 0.549(1), ave 0.96
Test execution time: sum 5048 ms, max 136 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 18:07:44 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-10-22 18:07:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 11 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 1, redundant 8
Fitness: max 0.98(58), min 0.588(1), ave 0.966
Test execution time: sum 4860 ms, max 153 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 18:07:54 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-10-22 18:08:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 21 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 11, redundant 3
Fitness: max 0.98(50), min 0.49(1), ave 0.96
Test execution time: sum 4531 ms, max 219 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:08:04 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-10-22 18:08:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 31 seconds
Variants: generated 100, build-succeeded 62, build-failed 31, syntax-invalid 3, redundant 4
Fitness: max 0.98(59), min 0.588(1), ave 0.972
Test execution time: sum 4878 ms, max 103 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:08:13 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-10-22 18:08:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 42 seconds
Variants: generated 100, build-succeeded 64, build-failed 32, syntax-invalid 3, redundant 1
Fitness: max 0.98(59), min 0.549(1), ave 0.97
Test execution time: sum 5145 ms, max 138 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 18:08:24 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-10-22 18:08:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 52 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 4, redundant 6
Fitness: max 0.98(52), min 0.569(1), ave 0.962
Test execution time: sum 4886 ms, max 128 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 18:08:34 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-10-22 18:08:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 2 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 6, redundant 7
Fitness: max 0.98(47), min 0.49(1), ave 0.958
Test execution time: sum 4475 ms, max 182 ms, min 52 ms
----------------------------------------------------------------

2023-10-22 18:08:44 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-10-22 18:08:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 12 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 4, redundant 8
Fitness: max 0.98(50), min 0.608(1), ave 0.95
Test execution time: sum 4999 ms, max 134 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 18:08:55 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-10-22 18:09:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 23 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 7, redundant 6
Fitness: max 0.98(56), min 0.824(1), ave 0.969
Test execution time: sum 5086 ms, max 141 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:09:05 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-10-22 18:09:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 33 seconds
Variants: generated 100, build-succeeded 67, build-failed 22, syntax-invalid 7, redundant 4
Fitness: max 0.98(58), min 0.667(1), ave 0.963
Test execution time: sum 5415 ms, max 116 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 18:09:16 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-10-22 18:09:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 44 seconds
Variants: generated 100, build-succeeded 55, build-failed 41, syntax-invalid 1, redundant 3
Fitness: max 0.98(51), min 0.667(1), ave 0.968
Test execution time: sum 4701 ms, max 144 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:09:26 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-10-22 18:09:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 55 seconds
Variants: generated 100, build-succeeded 67, build-failed 27, syntax-invalid 4, redundant 2
Fitness: max 0.98(57), min 0.549(1), ave 0.952
Test execution time: sum 5451 ms, max 107 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 18:09:37 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-10-22 18:09:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 6 seconds
Variants: generated 100, build-succeeded 69, build-failed 23, syntax-invalid 5, redundant 3
Fitness: max 0.98(59), min 0.49(1), ave 0.957
Test execution time: sum 5799 ms, max 140 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 18:09:48 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-10-22 18:09:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 16 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 6, redundant 7
Fitness: max 0.98(52), min 0.824(1), ave 0.973
Test execution time: sum 4785 ms, max 238 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:09:58 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-10-22 18:10:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 30 seconds
Variants: generated 100, build-succeeded 70, build-failed 24, syntax-invalid 3, redundant 3
Fitness: max 1(1), min 0.843(1), ave 0.968
Test execution time: sum 6551 ms, max 711 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:10:12 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-10-22 18:10:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 41 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0.98(52), min 0.569(1), ave 0.957
Test execution time: sum 5057 ms, max 209 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:10:23 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-10-22 18:10:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 53 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 8, redundant 3
Fitness: max 0.98(53), min 0.49(1), ave 0.95
Test execution time: sum 5370 ms, max 145 ms, min 56 ms
----------------------------------------------------------------

2023-10-22 18:10:36 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-10-22 18:10:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 4 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 9, redundant 4
Fitness: max 0.98(52), min 0.49(1), ave 0.963
Test execution time: sum 4903 ms, max 144 ms, min 53 ms
----------------------------------------------------------------

2023-10-22 18:10:47 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-10-22 18:10:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 16 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 8, redundant 7
Fitness: max 0.98(49), min 0.49(1), ave 0.96
Test execution time: sum 4941 ms, max 147 ms, min 49 ms
----------------------------------------------------------------

2023-10-22 18:10:58 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-10-22 18:11:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 27 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 5, redundant 8
Fitness: max 0.98(48), min 0.49(1), ave 0.959
Test execution time: sum 4666 ms, max 189 ms, min 51 ms
----------------------------------------------------------------

2023-10-22 18:11:10 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-10-22 18:11:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 39 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 6, redundant 5
Fitness: max 0.98(52), min 0.49(1), ave 0.962
Test execution time: sum 4988 ms, max 139 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:11:21 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-10-22 18:11:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 50 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 5, redundant 2
Fitness: max 0.98(52), min 0.549(1), ave 0.957
Test execution time: sum 5148 ms, max 182 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:11:33 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-10-22 18:11:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 2 seconds
Variants: generated 100, build-succeeded 65, build-failed 32, syntax-invalid 3, redundant 0
Fitness: max 0.98(58), min 0.49(1), ave 0.963
Test execution time: sum 5500 ms, max 141 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 18:11:45 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-10-22 18:11:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 15 seconds
Variants: generated 100, build-succeeded 65, build-failed 26, syntax-invalid 5, redundant 4
Fitness: max 0.98(59), min 0.863(2), ave 0.972
Test execution time: sum 5478 ms, max 141 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 18:11:58 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-10-22 18:12:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 27 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 6, redundant 3
Fitness: max 0.98(54), min 0.843(1), ave 0.972
Test execution time: sum 5181 ms, max 176 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:12:10 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-10-22 18:12:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 38 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 5, redundant 6
Fitness: max 0.98(50), min 0.667(1), ave 0.965
Test execution time: sum 4775 ms, max 136 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 18:12:20 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-10-22 18:12:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 49 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 5, redundant 8
Fitness: max 1(1), min 0.549(1), ave 0.96
Test execution time: sum 5085 ms, max 185 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 18:12:31 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-10-22 18:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 0 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 0.98(54), min 0.784(1), ave 0.966
Test execution time: sum 5207 ms, max 174 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 18:12:42 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-10-22 18:12:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 9 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0.49(1), ave 0.943
Test execution time: sum 4029 ms, max 137 ms, min 55 ms
----------------------------------------------------------------

2023-10-22 18:12:52 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-10-22 18:13:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 20 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 7, redundant 3
Fitness: max 0.98(51), min 0.667(1), ave 0.968
Test execution time: sum 4894 ms, max 264 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 18:13:03 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-10-22 18:13:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 31 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 9, redundant 5
Fitness: max 0.98(48), min 0.686(1), ave 0.966
Test execution time: sum 4494 ms, max 215 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 18:13:13 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-10-22 18:13:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 40 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 12, redundant 4
Fitness: max 0.98(46), min 0.549(1), ave 0.962
Test execution time: sum 4100 ms, max 104 ms, min 63 ms
----------------------------------------------------------------

2023-10-22 18:13:22 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-10-22 18:13:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 50 seconds
Variants: generated 100, build-succeeded 58, build-failed 34, syntax-invalid 5, redundant 3
Fitness: max 0.98(53), min 0.765(1), ave 0.968
Test execution time: sum 4891 ms, max 136 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 18:13:33 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-10-22 18:13:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 1 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 6, redundant 9
Fitness: max 0.98(44), min 0.549(1), ave 0.942
Test execution time: sum 4561 ms, max 137 ms, min 59 ms
----------------------------------------------------------------

2023-10-22 18:13:43 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-10-22 18:13:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 10 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 12, redundant 7
Fitness: max 0.98(48), min 0.765(2), ave 0.967
Test execution time: sum 4312 ms, max 110 ms, min 66 ms
----------------------------------------------------------------

2023-10-22 18:13:53 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-10-22 18:14:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 21 seconds
Variants: generated 100, build-succeeded 52, build-failed 29, syntax-invalid 9, redundant 10
Fitness: max 0.98(48), min 0.49(1), ave 0.965
Test execution time: sum 4493 ms, max 219 ms, min 66 ms
----------------------------------------------------------------

2023-10-22 18:14:03 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-10-22 18:14:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 32 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 1, redundant 9
Fitness: max 0.98(54), min 0.569(1), ave 0.973
Test execution time: sum 4764 ms, max 215 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 18:14:14 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-10-22 18:14:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 43 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 4, redundant 6
Fitness: max 0.98(58), min 0.471(1), ave 0.961
Test execution time: sum 5362 ms, max 224 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 18:14:26 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-10-22 18:14:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 54 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 2, redundant 7
Fitness: max 0.98(50), min 0.667(1), ave 0.969
Test execution time: sum 4851 ms, max 179 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 18:14:37 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-10-22 18:14:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 6 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 3, redundant 5
Fitness: max 0.98(55), min 0.843(1), ave 0.973
Test execution time: sum 5217 ms, max 191 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 18:14:48 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-10-22 18:15:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 17 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 4, redundant 5
Fitness: max 0.98(55), min 0.765(3), ave 0.965
Test execution time: sum 5245 ms, max 136 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 18:15:00 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-10-22 18:15:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 28 seconds
Variants: generated 100, build-succeeded 63, build-failed 21, syntax-invalid 8, redundant 8
Fitness: max 0.98(52), min 0.49(1), ave 0.956
Test execution time: sum 5318 ms, max 176 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 18:15:10 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-10-22 18:15:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 38 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 5, redundant 9
Fitness: max 0.98(49), min 0.49(1), ave 0.96
Test execution time: sum 4684 ms, max 124 ms, min 52 ms
----------------------------------------------------------------

2023-10-22 18:15:21 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-10-22 18:15:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 50 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 4, redundant 6
Fitness: max 0.98(57), min 0.49(1), ave 0.966
Test execution time: sum 5349 ms, max 142 ms, min 59 ms
----------------------------------------------------------------

2023-10-22 18:15:32 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-10-22 18:15:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 59 seconds
Variants: generated 100, build-succeeded 52, build-failed 29, syntax-invalid 8, redundant 11
Fitness: max 0.98(44), min 0.549(1), ave 0.962
Test execution time: sum 4353 ms, max 114 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 18:15:42 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-10-22 18:15:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 10 seconds
Variants: generated 100, build-succeeded 63, build-failed 25, syntax-invalid 4, redundant 8
Fitness: max 0.98(55), min 0.49(2), ave 0.948
Test execution time: sum 5272 ms, max 103 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 18:15:53 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-10-22 18:16:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 21 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 6, redundant 7
Fitness: max 0.98(49), min 0.588(1), ave 0.952
Test execution time: sum 5144 ms, max 128 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 18:16:03 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-10-22 18:16:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 31 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 4, redundant 7
Fitness: max 0.98(54), min 0.235(1), ave 0.948
Test execution time: sum 5003 ms, max 122 ms, min 59 ms
----------------------------------------------------------------

2023-10-22 18:16:14 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-10-22 18:16:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 41 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 7, redundant 7
Fitness: max 0.98(45), min 0.333(1), ave 0.938
Test execution time: sum 4812 ms, max 119 ms, min 56 ms
----------------------------------------------------------------

2023-10-22 18:16:24 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-10-22 18:16:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 52 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 9, redundant 5
Fitness: max 0.98(51), min 0.49(1), ave 0.96
Test execution time: sum 5193 ms, max 133 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 18:16:35 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-10-22 18:16:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 2 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 9, redundant 8
Fitness: max 0.98(52), min 0.745(1), ave 0.973
Test execution time: sum 4884 ms, max 132 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 18:16:45 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-10-22 18:16:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 14 seconds
Variants: generated 100, build-succeeded 53, build-failed 34, syntax-invalid 12, redundant 1
Fitness: max 0.98(46), min 0.824(1), ave 0.966
Test execution time: sum 4798 ms, max 146 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 18:16:56 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-10-22 18:17:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 24 seconds
Variants: generated 100, build-succeeded 57, build-failed 23, syntax-invalid 13, redundant 7
Fitness: max 0.98(50), min 0.49(1), ave 0.953
Test execution time: sum 4947 ms, max 117 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 18:17:06 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-10-22 18:17:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 34 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 9, redundant 6
Fitness: max 0.98(49), min 0.686(1), ave 0.966
Test execution time: sum 4841 ms, max 143 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 18:17:17 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-10-22 18:17:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 45 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0.49(1), ave 0.969
Test execution time: sum 5037 ms, max 156 ms, min 66 ms
----------------------------------------------------------------

2023-10-22 18:17:28 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-10-22 18:17:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 57 seconds
Variants: generated 100, build-succeeded 63, build-failed 24, syntax-invalid 8, redundant 5
Fitness: max 0.98(55), min 0.49(1), ave 0.951
Test execution time: sum 5776 ms, max 129 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 18:17:39 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-10-22 18:17:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 9 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 5, redundant 3
Fitness: max 0.98(51), min 0.549(1), ave 0.956
Test execution time: sum 5952 ms, max 144 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 18:17:52 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-10-22 18:18:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 22 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 5, redundant 7
Fitness: max 0.98(50), min 0.549(1), ave 0.966
Test execution time: sum 6188 ms, max 173 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 18:18:05 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-10-22 18:18:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 33 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 9, redundant 5
Fitness: max 0.98(49), min 0.588(1), ave 0.97
Test execution time: sum 4987 ms, max 139 ms, min 63 ms
----------------------------------------------------------------

2023-10-22 18:18:16 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-10-22 18:18:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 45 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 6, redundant 3
Fitness: max 0.98(55), min 0.49(1), ave 0.966
Test execution time: sum 5876 ms, max 137 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 18:18:28 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-10-22 18:18:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 57 seconds
Variants: generated 100, build-succeeded 58, build-failed 33, syntax-invalid 3, redundant 6
Fitness: max 0.98(55), min 0.843(1), ave 0.975
Test execution time: sum 5561 ms, max 148 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 18:18:40 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-10-22 18:18:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 13 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 6, redundant 7
Fitness: max 0.98(52), min 0.275(1), ave 0.959
Test execution time: sum 7831 ms, max 503 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 18:18:56 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-10-22 18:19:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 32 seconds
Variants: generated 100, build-succeeded 60, build-failed 23, syntax-invalid 7, redundant 10
Fitness: max 0.98(54), min 0.549(1), ave 0.967
Test execution time: sum 9764 ms, max 973 ms, min 87 ms
----------------------------------------------------------------

2023-10-22 18:19:15 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-10-22 18:19:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 49 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 6, redundant 5
Fitness: max 0.98(57), min 0.49(1), ave 0.963
Test execution time: sum 8039 ms, max 205 ms, min 102 ms
----------------------------------------------------------------

2023-10-22 18:19:31 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-10-22 18:19:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 5 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 5, redundant 7
Fitness: max 0.98(55), min 0.843(1), ave 0.973
Test execution time: sum 7361 ms, max 167 ms, min 109 ms
----------------------------------------------------------------

2023-10-22 18:19:47 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-10-22 18:20:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 20 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 12, redundant 5
Fitness: max 0.98(50), min 0.471(1), ave 0.963
Test execution time: sum 6903 ms, max 187 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 18:20:02 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-10-22 18:20:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 36 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 7, redundant 5
Fitness: max 0.98(56), min 0.49(2), ave 0.956
Test execution time: sum 7433 ms, max 167 ms, min 87 ms
----------------------------------------------------------------

2023-10-22 18:20:18 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-10-22 18:20:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 6, redundant 4
Fitness: max 0.98(58), min 0.902(1), ave 0.979
Test execution time: sum 7260 ms, max 180 ms, min 106 ms
----------------------------------------------------------------

2023-10-22 18:20:33 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-10-22 18:20:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 7 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 9, redundant 4
Fitness: max 0.98(54), min 0.745(1), ave 0.97
Test execution time: sum 7260 ms, max 188 ms, min 103 ms
----------------------------------------------------------------

2023-10-22 18:20:49 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-10-22 18:21:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 23 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 6, redundant 3
Fitness: max 0.98(54), min 0.49(2), ave 0.951
Test execution time: sum 7421 ms, max 208 ms, min 89 ms
----------------------------------------------------------------

2023-10-22 18:21:05 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-10-22 18:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 39 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 7305 ms, max 173 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 18:21:21 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-10-22 18:21:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 54 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 3, redundant 9
Fitness: max 0.98(57), min 0.333(1), ave 0.966
Test execution time: sum 7372 ms, max 158 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 18:21:37 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-10-22 18:21:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 10 seconds
Variants: generated 100, build-succeeded 56, build-failed 35, syntax-invalid 6, redundant 3
Fitness: max 0.98(52), min 0.471(1), ave 0.958
Test execution time: sum 6671 ms, max 198 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 18:21:53 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-10-22 18:22:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 25 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 8, redundant 7
Fitness: max 0.98(55), min 0.824(2), ave 0.973
Test execution time: sum 6730 ms, max 174 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:22:08 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-10-22 18:22:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 40 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 5, redundant 5
Fitness: max 0.98(55), min 0.765(1), ave 0.974
Test execution time: sum 6617 ms, max 185 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:22:23 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-10-22 18:22:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 55 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 6, redundant 7
Fitness: max 0.98(51), min 0.549(1), ave 0.96
Test execution time: sum 6692 ms, max 157 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 18:22:37 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-10-22 18:22:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 9 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0.667(1), ave 0.971
Test execution time: sum 6327 ms, max 137 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 18:22:52 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-10-22 18:23:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 26 seconds
Variants: generated 100, build-succeeded 68, build-failed 28, syntax-invalid 3, redundant 1
Fitness: max 0.98(61), min 0.275(1), ave 0.963
Test execution time: sum 7867 ms, max 169 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 18:23:08 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-10-22 18:23:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 40 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 11, redundant 6
Fitness: max 0.98(49), min 0.863(2), ave 0.973
Test execution time: sum 6362 ms, max 160 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 18:23:22 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-10-22 18:23:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 54 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 9, redundant 5
Fitness: max 0.98(51), min 0.863(1), ave 0.977
Test execution time: sum 6259 ms, max 170 ms, min 102 ms
----------------------------------------------------------------

2023-10-22 18:23:36 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-10-22 18:23:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 10 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 8, redundant 1
Fitness: max 0.98(54), min 0.49(1), ave 0.958
Test execution time: sum 7165 ms, max 150 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 18:23:52 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-10-22 18:24:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 25 seconds
Variants: generated 100, build-succeeded 63, build-failed 25, syntax-invalid 6, redundant 6
Fitness: max 0.98(57), min 0.51(1), ave 0.962
Test execution time: sum 7459 ms, max 180 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 18:24:08 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-10-22 18:24:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 41 seconds
Variants: generated 100, build-succeeded 64, build-failed 22, syntax-invalid 7, redundant 7
Fitness: max 0.98(54), min 0.353(1), ave 0.956
Test execution time: sum 7318 ms, max 169 ms, min 90 ms
----------------------------------------------------------------

2023-10-22 18:24:23 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-10-22 18:24:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 56 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 11, redundant 3
Fitness: max 0.98(50), min 0.353(1), ave 0.965
Test execution time: sum 6437 ms, max 181 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:24:38 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-10-22 18:24:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 11 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 14, redundant 3
Fitness: max 1(1), min 0.667(1), ave 0.959
Test execution time: sum 6679 ms, max 162 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:24:53 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-10-22 18:25:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 26 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 9, redundant 6
Fitness: max 0.98(55), min 0.49(1), ave 0.969
Test execution time: sum 7119 ms, max 170 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:25:09 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-10-22 18:25:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 42 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 12, redundant 7
Fitness: max 0.98(53), min 0.569(1), ave 0.969
Test execution time: sum 6807 ms, max 159 ms, min 88 ms
----------------------------------------------------------------

2023-10-22 18:25:24 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-10-22 18:25:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 57 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 11, redundant 5
Fitness: max 0.98(50), min 0.843(1), ave 0.968
Test execution time: sum 6649 ms, max 157 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:25:39 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-10-22 18:25:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 10 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 19, redundant 5
Fitness: max 0.98(43), min 0.49(1), ave 0.955
Test execution time: sum 5483 ms, max 151 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:25:53 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-10-22 18:26:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 14, redundant 5
Fitness: max 0.98(47), min 0.471(1), ave 0.959
Test execution time: sum 5641 ms, max 140 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 18:26:07 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-10-22 18:26:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 39 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 0.98(51), min 0.902(4), ave 0.975
Test execution time: sum 6361 ms, max 162 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:26:22 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-10-22 18:26:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 55 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 6, redundant 2
Fitness: max 0.98(58), min 0.765(2), ave 0.969
Test execution time: sum 7293 ms, max 164 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 18:26:38 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-10-22 18:26:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 10 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 6, redundant 9
Fitness: max 0.98(48), min 0.843(1), ave 0.976
Test execution time: sum 5885 ms, max 150 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 18:26:52 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-10-22 18:27:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 25 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 7, redundant 8
Fitness: max 0.98(53), min 0.157(1), ave 0.953
Test execution time: sum 6505 ms, max 162 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 18:27:07 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-10-22 18:27:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 41 seconds
Variants: generated 100, build-succeeded 62, build-failed 31, syntax-invalid 3, redundant 4
Fitness: max 0.98(56), min 0.765(1), ave 0.968
Test execution time: sum 7159 ms, max 165 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 18:27:23 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-10-22 18:27:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 58 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 5, redundant 4
Fitness: max 0.98(55), min 0.549(1), ave 0.966
Test execution time: sum 7033 ms, max 190 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:27:40 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-10-22 18:27:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 13 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 8, redundant 7
Fitness: max 0.98(53), min 0.333(1), ave 0.956
Test execution time: sum 6678 ms, max 265 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 18:27:56 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-10-22 18:28:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 29 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 5, redundant 6
Fitness: max 0.98(56), min 0.725(1), ave 0.968
Test execution time: sum 6910 ms, max 158 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:28:11 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-10-22 18:28:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 46 seconds
Variants: generated 100, build-succeeded 63, build-failed 31, syntax-invalid 2, redundant 4
Fitness: max 0.98(59), min 0.843(1), ave 0.974
Test execution time: sum 7292 ms, max 155 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 18:28:28 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-10-22 18:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 2 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 7, redundant 4
Fitness: max 0.98(56), min 0.549(1), ave 0.962
Test execution time: sum 7079 ms, max 158 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:28:44 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-10-22 18:28:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 17 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 10, redundant 4
Fitness: max 0.98(54), min 0.863(3), ave 0.974
Test execution time: sum 6362 ms, max 145 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:28:59 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-10-22 18:29:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 31 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 10, redundant 4
Fitness: max 0.98(48), min 0.588(1), ave 0.963
Test execution time: sum 5742 ms, max 161 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 18:29:13 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-10-22 18:29:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 46 seconds
Variants: generated 100, build-succeeded 62, build-failed 30, syntax-invalid 3, redundant 5
Fitness: max 1(1), min 0.333(1), ave 0.953
Test execution time: sum 6768 ms, max 147 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 18:29:29 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-10-22 18:29:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 2 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 6, redundant 5
Fitness: max 0.98(53), min 0.765(1), ave 0.965
Test execution time: sum 7052 ms, max 163 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:29:45 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-10-22 18:30:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 19 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 4, redundant 3
Fitness: max 0.98(61), min 0.49(1), ave 0.964
Test execution time: sum 7235 ms, max 156 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 18:30:01 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-10-22 18:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 34 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 7, redundant 6
Fitness: max 0.98(57), min 0.49(1), ave 0.961
Test execution time: sum 6816 ms, max 153 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 18:30:17 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-10-22 18:30:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 50 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 9, redundant 6
Fitness: max 0.98(49), min 0.49(1), ave 0.956
Test execution time: sum 6290 ms, max 176 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 18:30:32 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-10-22 18:30:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 5 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0.98(51), min 0.529(1), ave 0.956
Test execution time: sum 6619 ms, max 143 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 18:30:48 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-10-22 18:31:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 26 seconds
Variants: generated 100, build-succeeded 65, build-failed 23, syntax-invalid 6, redundant 6
Fitness: max 0.98(57), min 0.529(1), ave 0.961
Test execution time: sum 9070 ms, max 1056 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:31:08 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-10-22 18:31:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 45 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 7, redundant 4
Fitness: max 0.98(53), min 0.353(1), ave 0.941
Test execution time: sum 7825 ms, max 770 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 18:31:27 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-10-22 18:31:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 2 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 10, redundant 7
Fitness: max 0.98(53), min 0.49(1), ave 0.955
Test execution time: sum 6765 ms, max 178 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 18:31:44 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-10-22 18:32:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 18 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 11, redundant 5
Fitness: max 0.98(42), min 0.49(1), ave 0.954
Test execution time: sum 5863 ms, max 244 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 18:32:01 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-10-22 18:32:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 34 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 14, redundant 2
Fitness: max 0.98(48), min 0.549(1), ave 0.964
Test execution time: sum 5826 ms, max 222 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 18:32:16 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-10-22 18:32:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 8, redundant 6
Fitness: max 0.98(54), min 0.765(1), ave 0.97
Test execution time: sum 6717 ms, max 211 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:32:34 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-10-22 18:32:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 10 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 5, redundant 6
Fitness: max 0.98(56), min 0.549(1), ave 0.959
Test execution time: sum 7331 ms, max 223 ms, min 89 ms
----------------------------------------------------------------

2023-10-22 18:32:52 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-10-22 18:33:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 28 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 5, redundant 9
Fitness: max 0.98(56), min 0.706(1), ave 0.972
Test execution time: sum 6621 ms, max 215 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:33:10 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-10-22 18:33:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 45 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 12, redundant 2
Fitness: max 1(2), min 0.863(1), ave 0.975
Test execution time: sum 6333 ms, max 215 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:33:27 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-10-22 18:33:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 1 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 14, redundant 6
Fitness: max 0.98(44), min 0.255(1), ave 0.949
Test execution time: sum 5863 ms, max 205 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 18:33:44 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-10-22 18:34:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 18 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 14, redundant 1
Fitness: max 0.98(49), min 0.49(1), ave 0.951
Test execution time: sum 6420 ms, max 216 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 18:34:00 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-10-22 18:34:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 8, redundant 7
Fitness: max 0.98(48), min 0.49(2), ave 0.953
Test execution time: sum 6750 ms, max 282 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 18:34:18 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-10-22 18:34:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 54 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 13, redundant 3
Fitness: max 0.98(43), min 0.49(1), ave 0.949
Test execution time: sum 6641 ms, max 220 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 18:34:36 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-10-22 18:34:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 11 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 11, redundant 6
Fitness: max 0.98(50), min 0.569(1), ave 0.965
Test execution time: sum 6437 ms, max 180 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:34:54 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-10-22 18:35:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 29 seconds
Variants: generated 100, build-succeeded 57, build-failed 23, syntax-invalid 10, redundant 10
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 6357 ms, max 208 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 18:35:11 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-10-22 18:35:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 47 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 5, redundant 6
Fitness: max 0.98(58), min 0.549(1), ave 0.964
Test execution time: sum 7212 ms, max 213 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:35:30 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-10-22 18:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 6 seconds
Variants: generated 100, build-succeeded 63, build-failed 25, syntax-invalid 6, redundant 6
Fitness: max 0.98(55), min 0.49(1), ave 0.954
Test execution time: sum 7044 ms, max 218 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 18:35:48 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-10-22 18:36:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 23 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 7, redundant 8
Fitness: max 0.98(51), min 0.49(1), ave 0.952
Test execution time: sum 6383 ms, max 209 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 18:36:06 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-10-22 18:36:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 43 seconds
Variants: generated 100, build-succeeded 66, build-failed 25, syntax-invalid 5, redundant 4
Fitness: max 0.98(58), min 0.49(1), ave 0.961
Test execution time: sum 7390 ms, max 188 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 18:36:25 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-10-22 18:36:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 0 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 2, redundant 6
Fitness: max 0.98(58), min 0.49(1), ave 0.966
Test execution time: sum 6950 ms, max 228 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 18:36:43 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-10-22 18:37:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 18 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 5, redundant 4
Fitness: max 0.98(54), min 0.49(2), ave 0.945
Test execution time: sum 7142 ms, max 224 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 18:37:01 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-10-22 18:37:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 35 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 8, redundant 2
Fitness: max 0.98(51), min 0.784(1), ave 0.967
Test execution time: sum 6539 ms, max 225 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 18:37:18 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-10-22 18:37:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 52 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 9, redundant 6
Fitness: max 0.98(52), min 0.353(1), ave 0.965
Test execution time: sum 6209 ms, max 180 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 18:37:35 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-10-22 18:37:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 13 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 13, redundant 2
Fitness: max 0.98(53), min 0.667(1), ave 0.964
Test execution time: sum 8973 ms, max 1300 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 18:37:56 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-10-22 18:38:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 31 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 8, redundant 2
Fitness: max 0.98(57), min 0.863(1), ave 0.977
Test execution time: sum 6727 ms, max 218 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:38:13 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-10-22 18:38:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 48 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 11, redundant 8
Fitness: max 0.98(47), min 0.549(1), ave 0.96
Test execution time: sum 5972 ms, max 181 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:38:31 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-10-22 18:38:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 7 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 8, redundant 3
Fitness: max 0.98(52), min 0.549(1), ave 0.959
Test execution time: sum 6813 ms, max 176 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 18:38:50 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-10-22 18:39:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 24 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 11, redundant 0
Fitness: max 0.98(51), min 0.49(1), ave 0.963
Test execution time: sum 6296 ms, max 239 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 18:39:07 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-10-22 18:39:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 44 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 0.98(57), min 0.569(1), ave 0.967
Test execution time: sum 7266 ms, max 614 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:39:26 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-10-22 18:39:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 0 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 13, redundant 4
Fitness: max 0.98(50), min 0.314(1), ave 0.959
Test execution time: sum 5889 ms, max 178 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 18:39:43 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-10-22 18:40:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 19 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 7, redundant 6
Fitness: max 0.98(55), min 0.667(1), ave 0.961
Test execution time: sum 7036 ms, max 247 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:40:02 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-10-22 18:40:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 38 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 5, redundant 4
Fitness: max 0.98(57), min 0.98(57), ave 0.98
Test execution time: sum 6303 ms, max 180 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:40:20 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-10-22 18:40:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 54 seconds
Variants: generated 100, build-succeeded 52, build-failed 25, syntax-invalid 16, redundant 7
Fitness: max 0.98(47), min 0.49(1), ave 0.957
Test execution time: sum 5684 ms, max 186 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 18:40:37 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-10-22 18:40:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 13 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 6, redundant 4
Fitness: max 0.98(50), min 0.725(1), ave 0.965
Test execution time: sum 6566 ms, max 215 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:40:56 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-10-22 18:41:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 32 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 10, redundant 5
Fitness: max 1(2), min 0.882(2), ave 0.973
Test execution time: sum 6339 ms, max 185 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:41:14 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-10-22 18:41:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 25, syntax-invalid 12, redundant 4
Fitness: max 1(2), min 0.216(1), ave 0.949
Test execution time: sum 6614 ms, max 212 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 18:41:33 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-10-22 18:41:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 9 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 12, redundant 3
Fitness: max 1(1), min 0.49(1), ave 0.966
Test execution time: sum 5952 ms, max 192 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 18:41:51 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-10-22 18:42:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 27 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 10, redundant 7
Fitness: max 0.98(46), min 0.824(1), ave 0.967
Test execution time: sum 5982 ms, max 196 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:42:10 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-10-22 18:42:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 45 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 11, redundant 7
Fitness: max 0.98(41), min 0.49(1), ave 0.952
Test execution time: sum 5797 ms, max 183 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 18:42:28 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-10-22 18:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 4 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 9, redundant 4
Fitness: max 0.98(47), min 0.49(1), ave 0.961
Test execution time: sum 6423 ms, max 208 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:42:47 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-10-22 18:43:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 25 seconds
Variants: generated 100, build-succeeded 65, build-failed 24, syntax-invalid 5, redundant 6
Fitness: max 0.98(58), min 0.49(1), ave 0.963
Test execution time: sum 7712 ms, max 202 ms, min 90 ms
----------------------------------------------------------------

2023-10-22 18:43:08 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-10-22 18:43:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 45 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 9, redundant 5
Fitness: max 0.98(52), min 0.588(1), ave 0.963
Test execution time: sum 6817 ms, max 227 ms, min 103 ms
----------------------------------------------------------------

2023-10-22 18:43:28 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-10-22 18:43:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 5 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 12, redundant 2
Fitness: max 0.98(55), min 0.765(1), ave 0.972
Test execution time: sum 7170 ms, max 213 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 18:43:48 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-10-22 18:44:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 24 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0.49(1), ave 0.967
Test execution time: sum 6245 ms, max 192 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 18:44:07 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-10-22 18:44:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 44 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 7, redundant 2
Fitness: max 0.98(57), min 0.765(2), ave 0.97
Test execution time: sum 7056 ms, max 245 ms, min 90 ms
----------------------------------------------------------------

2023-10-22 18:44:26 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-10-22 18:44:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 2 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 13, redundant 2
Fitness: max 0.98(46), min 0.902(2), ave 0.977
Test execution time: sum 5832 ms, max 224 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 18:44:44 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-10-22 18:45:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 20 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 17, redundant 4
Fitness: max 1(1), min 0.765(1), ave 0.97
Test execution time: sum 6280 ms, max 184 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 18:45:02 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-10-22 18:45:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 40 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 6, redundant 5
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 7361 ms, max 224 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 18:45:22 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-10-22 18:45:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 0 seconds
Variants: generated 100, build-succeeded 66, build-failed 26, syntax-invalid 5, redundant 3
Fitness: max 1(1), min 0.765(1), ave 0.969
Test execution time: sum 7785 ms, max 168 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:45:42 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-10-22 18:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 19 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 8, redundant 5
Fitness: max 0.98(56), min 0.902(3), ave 0.976
Test execution time: sum 6911 ms, max 174 ms, min 103 ms
----------------------------------------------------------------

2023-10-22 18:46:02 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-10-22 18:46:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 38 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 10, redundant 4
Fitness: max 0.98(50), min 0.49(2), ave 0.953
Test execution time: sum 6859 ms, max 217 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:46:21 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-10-22 18:46:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 0 seconds
Variants: generated 100, build-succeeded 67, build-failed 24, syntax-invalid 5, redundant 4
Fitness: max 0.98(59), min 0.549(1), ave 0.96
Test execution time: sum 7931 ms, max 235 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 18:46:42 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-10-22 18:47:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 18 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 14, redundant 3
Fitness: max 0.98(49), min 0.157(1), ave 0.933
Test execution time: sum 6754 ms, max 184 ms, min 75 ms
----------------------------------------------------------------

2023-10-22 18:47:01 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-10-22 18:47:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 37 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0.49(2), ave 0.958
Test execution time: sum 6590 ms, max 175 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 18:47:20 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-10-22 18:47:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 10, redundant 7
Fitness: max 0.98(53), min 0.902(1), ave 0.979
Test execution time: sum 6579 ms, max 215 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 18:47:38 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-10-22 18:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 16 seconds
Variants: generated 100, build-succeeded 63, build-failed 24, syntax-invalid 7, redundant 6
Fitness: max 0.98(58), min 0.863(3), ave 0.972
Test execution time: sum 7486 ms, max 193 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:47:59 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-10-22 18:48:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 34 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 12, redundant 6
Fitness: max 0.98(46), min 0.49(1), ave 0.952
Test execution time: sum 6163 ms, max 254 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 18:48:17 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-10-22 18:48:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 52 seconds
Variants: generated 100, build-succeeded 49, build-failed 35, syntax-invalid 15, redundant 1
Fitness: max 0.98(42), min 0.765(1), ave 0.954
Test execution time: sum 5723 ms, max 263 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:48:34 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-10-22 18:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 11 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 6, redundant 5
Fitness: max 0.98(51), min 0.549(1), ave 0.96
Test execution time: sum 6547 ms, max 191 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:48:53 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-10-22 18:49:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 31 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 7, redundant 3
Fitness: max 0.98(56), min 0.569(1), ave 0.96
Test execution time: sum 7179 ms, max 235 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 18:49:13 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-10-22 18:49:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 51 seconds
Variants: generated 100, build-succeeded 69, build-failed 25, syntax-invalid 4, redundant 2
Fitness: max 0.98(61), min 0.765(1), ave 0.967
Test execution time: sum 7775 ms, max 179 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 18:49:34 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-10-22 18:49:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 9 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 11, redundant 6
Fitness: max 0.98(47), min 0.49(1), ave 0.968
Test execution time: sum 5973 ms, max 172 ms, min 88 ms
----------------------------------------------------------------

2023-10-22 18:49:51 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-10-22 18:50:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 27 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 9, redundant 4
Fitness: max 0.98(55), min 0.49(1), ave 0.967
Test execution time: sum 6792 ms, max 159 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 18:50:09 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-10-22 18:50:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 45 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 11, redundant 7
Fitness: max 0.98(50), min 0.549(1), ave 0.968
Test execution time: sum 6277 ms, max 188 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 18:50:27 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-10-22 18:50:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 3 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 7, redundant 3
Fitness: max 0.98(55), min 0.765(1), ave 0.973
Test execution time: sum 6783 ms, max 151 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 18:50:45 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-10-22 18:51:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 21 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 10, redundant 5
Fitness: max 0.98(55), min 0.863(1), ave 0.978
Test execution time: sum 6350 ms, max 151 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 18:51:04 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-10-22 18:51:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 39 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 10, redundant 6
Fitness: max 0.98(49), min 0.863(1), ave 0.975
Test execution time: sum 5879 ms, max 192 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:51:22 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-10-22 18:51:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 58 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 5, redundant 4
Fitness: max 0.98(53), min 0.843(1), ave 0.972
Test execution time: sum 6896 ms, max 162 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:51:41 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-10-22 18:51:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 15 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 16, redundant 4
Fitness: max 0.98(44), min 0.843(1), ave 0.969
Test execution time: sum 5419 ms, max 127 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:51:57 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-10-22 18:52:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 34 seconds
Variants: generated 100, build-succeeded 68, build-failed 20, syntax-invalid 5, redundant 7
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 7585 ms, max 164 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 18:52:16 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-10-22 18:52:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 53 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 6, redundant 3
Fitness: max 0.98(59), min 0.843(1), ave 0.975
Test execution time: sum 6977 ms, max 151 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:52:35 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-10-22 18:52:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 11 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 5, redundant 6
Fitness: max 0.98(56), min 0.843(1), ave 0.975
Test execution time: sum 6605 ms, max 147 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:52:53 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-10-22 18:53:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 30 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 7, redundant 3
Fitness: max 0.98(54), min 0.765(1), ave 0.968
Test execution time: sum 7042 ms, max 165 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 18:53:12 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-10-22 18:53:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 51 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 10, redundant 7
Fitness: max 0.98(54), min 0.765(1), ave 0.97
Test execution time: sum 7902 ms, max 1059 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:53:34 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-10-22 18:53:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 12 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 8, redundant 6
Fitness: max 0.98(53), min 0.843(1), ave 0.971
Test execution time: sum 6910 ms, max 272 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:53:54 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-10-22 18:54:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 15, redundant 4
Fitness: max 0.98(48), min 0.765(1), ave 0.975
Test execution time: sum 5757 ms, max 184 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 18:54:13 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-10-22 18:54:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 51 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 11, redundant 3
Fitness: max 0.98(51), min 0.667(1), ave 0.968
Test execution time: sum 6353 ms, max 182 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:54:34 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-10-22 18:54:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 12 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 9, redundant 3
Fitness: max 0.98(50), min 0.49(1), ave 0.955
Test execution time: sum 6679 ms, max 226 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 18:54:54 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-10-22 18:55:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 33 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 0.98(55), min 0.549(1), ave 0.967
Test execution time: sum 6929 ms, max 234 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 18:55:15 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-10-22 18:55:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 50 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 13, redundant 7
Fitness: max 0.98(45), min 0.725(1), ave 0.967
Test execution time: sum 5510 ms, max 184 ms, min 89 ms
----------------------------------------------------------------

2023-10-22 18:55:33 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-10-22 18:55:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 10, redundant 7
Fitness: max 0.98(52), min 0.588(1), ave 0.963
Test execution time: sum 6447 ms, max 251 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 18:55:51 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-10-22 18:56:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 7, redundant 3
Fitness: max 0.98(51), min 0.667(1), ave 0.962
Test execution time: sum 6503 ms, max 231 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 18:56:11 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-10-22 18:56:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 7, redundant 3
Fitness: max 0.98(51), min 0.353(1), ave 0.952
Test execution time: sum 6678 ms, max 223 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 18:56:30 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-10-22 18:56:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 8 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 7, redundant 4
Fitness: max 0.98(56), min 0.49(2), ave 0.957
Test execution time: sum 7041 ms, max 167 ms, min 75 ms
----------------------------------------------------------------

2023-10-22 18:56:50 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-10-22 18:57:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 27 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 12, redundant 6
Fitness: max 0.98(49), min 0.49(1), ave 0.959
Test execution time: sum 6137 ms, max 170 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 18:57:09 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-10-22 18:57:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 48 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 0.98(53), min 0.765(1), ave 0.967
Test execution time: sum 6951 ms, max 197 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 18:57:30 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-10-22 18:57:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 8 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 7, redundant 8
Fitness: max 1(1), min 0.667(1), ave 0.972
Test execution time: sum 6530 ms, max 231 ms, min 103 ms
----------------------------------------------------------------

2023-10-22 18:57:50 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-10-22 18:58:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 28 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 7, redundant 1
Fitness: max 0.98(53), min 0.765(1), ave 0.964
Test execution time: sum 7019 ms, max 184 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 18:58:11 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-10-22 18:58:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 49 seconds
Variants: generated 100, build-succeeded 65, build-failed 21, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.431(1), ave 0.962
Test execution time: sum 7444 ms, max 184 ms, min 90 ms
----------------------------------------------------------------

2023-10-22 18:58:31 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-10-22 18:58:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 10 seconds
Variants: generated 100, build-succeeded 65, build-failed 25, syntax-invalid 4, redundant 6
Fitness: max 0.98(54), min 0.765(1), ave 0.96
Test execution time: sum 7280 ms, max 180 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 18:58:52 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-10-22 18:59:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 26 seconds
Variants: generated 100, build-succeeded 42, build-failed 32, syntax-invalid 17, redundant 9
Fitness: max 0.98(41), min 0.863(1), ave 0.978
Test execution time: sum 4820 ms, max 188 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 18:59:09 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-10-22 18:59:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 34, syntax-invalid 7, redundant 4
Fitness: max 0.98(49), min 0.49(1), ave 0.957
Test execution time: sum 6104 ms, max 218 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 18:59:28 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-10-22 18:59:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 5 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 9, redundant 3
Fitness: max 1(2), min 0.765(1), ave 0.974
Test execution time: sum 6183 ms, max 195 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 18:59:47 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-10-22 19:00:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 23 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 8, redundant 7
Fitness: max 0.98(50), min 0.667(1), ave 0.968
Test execution time: sum 6079 ms, max 174 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 19:00:06 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-10-22 19:00:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 42 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 15, redundant 6
Fitness: max 0.98(50), min 0.725(1), ave 0.973
Test execution time: sum 5969 ms, max 166 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:00:24 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-10-22 19:00:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 2 seconds
Variants: generated 100, build-succeeded 64, build-failed 23, syntax-invalid 9, redundant 4
Fitness: max 0.98(58), min 0.765(1), ave 0.969
Test execution time: sum 7052 ms, max 167 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 19:00:44 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-10-22 19:01:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 20 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 15, redundant 3
Fitness: max 0.98(47), min 0.235(1), ave 0.951
Test execution time: sum 6298 ms, max 280 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 19:01:03 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-10-22 19:01:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 38 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 16, redundant 4
Fitness: max 0.98(51), min 0.765(2), ave 0.97
Test execution time: sum 6017 ms, max 143 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:01:20 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-10-22 19:01:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 55 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 14, redundant 4
Fitness: max 0.98(49), min 0.471(1), ave 0.968
Test execution time: sum 5665 ms, max 156 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 19:01:38 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-10-22 19:01:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 14 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 0.98(49), min 0.059(1), ave 0.944
Test execution time: sum 6301 ms, max 147 ms, min 27 ms
----------------------------------------------------------------

2023-10-22 19:01:56 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-10-22 19:02:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 14, redundant 1
Fitness: max 0.98(46), min 0.275(1), ave 0.938
Test execution time: sum 6227 ms, max 181 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 19:02:15 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-10-22 19:02:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 49 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 15, redundant 5
Fitness: max 0.98(43), min 0.765(1), ave 0.968
Test execution time: sum 5379 ms, max 156 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 19:02:32 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-10-22 19:02:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 7 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 17, redundant 0
Fitness: max 0.98(42), min 0.49(1), ave 0.948
Test execution time: sum 5670 ms, max 160 ms, min 87 ms
----------------------------------------------------------------

2023-10-22 19:02:49 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-10-22 19:03:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 24 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.569(1), ave 0.962
Test execution time: sum 5758 ms, max 169 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:03:06 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-10-22 19:03:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 41 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 16, redundant 2
Fitness: max 0.98(45), min 0.784(1), ave 0.969
Test execution time: sum 5402 ms, max 145 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:03:24 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-10-22 19:03:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 59 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 17, redundant 3
Fitness: max 0.98(48), min 0.549(1), ave 0.963
Test execution time: sum 6020 ms, max 181 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 19:03:41 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-10-22 19:03:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 17 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 10, redundant 4
Fitness: max 0.98(50), min 0.863(1), ave 0.973
Test execution time: sum 5939 ms, max 143 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:03:59 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-10-22 19:04:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 34 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 15, redundant 6
Fitness: max 0.98(41), min 0.569(1), ave 0.963
Test execution time: sum 5265 ms, max 171 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 19:04:16 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-10-22 19:04:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 51 seconds
Variants: generated 100, build-succeeded 54, build-failed 23, syntax-invalid 18, redundant 5
Fitness: max 0.98(46), min 0.49(1), ave 0.947
Test execution time: sum 5761 ms, max 146 ms, min 90 ms
----------------------------------------------------------------

2023-10-22 19:04:33 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-10-22 19:04:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 10 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 11, redundant 4
Fitness: max 0.98(51), min 0.765(1), ave 0.963
Test execution time: sum 6712 ms, max 161 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:04:52 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-10-22 19:05:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 29 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 13, redundant 6
Fitness: max 0.98(52), min 0.863(1), ave 0.974
Test execution time: sum 6295 ms, max 177 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:05:11 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-10-22 19:05:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 35, syntax-invalid 8, redundant 3
Fitness: max 0.98(47), min 0.431(1), ave 0.956
Test execution time: sum 5958 ms, max 166 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 19:05:30 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-10-22 19:05:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 6 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 12, redundant 3
Fitness: max 0.98(46), min 0.235(1), ave 0.95
Test execution time: sum 5870 ms, max 162 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 19:05:48 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-10-22 19:06:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 26 seconds
Variants: generated 100, build-succeeded 64, build-failed 23, syntax-invalid 9, redundant 4
Fitness: max 0.98(57), min 0.667(1), ave 0.968
Test execution time: sum 7055 ms, max 164 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 19:06:08 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-10-22 19:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 45 seconds
Variants: generated 100, build-succeeded 62, build-failed 24, syntax-invalid 7, redundant 7
Fitness: max 0.98(56), min 0.765(1), ave 0.968
Test execution time: sum 6899 ms, max 155 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:06:28 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-10-22 19:06:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 3 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 13, redundant 4
Fitness: max 0.98(48), min 0.765(1), ave 0.972
Test execution time: sum 5650 ms, max 174 ms, min 87 ms
----------------------------------------------------------------

2023-10-22 19:06:45 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-10-22 19:07:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 20 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 17, redundant 3
Fitness: max 0.98(48), min 0.784(1), ave 0.972
Test execution time: sum 5930 ms, max 156 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 19:07:03 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-10-22 19:07:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 38 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 18, redundant 2
Fitness: max 0.98(49), min 0.843(1), ave 0.975
Test execution time: sum 5777 ms, max 141 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:07:21 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-10-22 19:07:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 57 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 14, redundant 4
Fitness: max 0.98(51), min 0.49(1), ave 0.966
Test execution time: sum 6197 ms, max 153 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 19:07:39 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-10-22 19:08:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 18 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 21, redundant 1
Fitness: max 0.98(43), min 0.549(1), ave 0.96
Test execution time: sum 6929 ms, max 1338 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:08:00 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-10-22 19:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 39 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 14, redundant 1
Fitness: max 0.98(50), min 0.255(1), ave 0.948
Test execution time: sum 6354 ms, max 182 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 19:08:22 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-10-22 19:08:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 58 seconds
Variants: generated 100, build-succeeded 46, build-failed 25, syntax-invalid 22, redundant 7
Fitness: max 0.98(35), min 0.157(1), ave 0.935
Test execution time: sum 5304 ms, max 230 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 19:08:41 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-10-22 19:09:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 18 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 17, redundant 3
Fitness: max 0.98(39), min 0.49(1), ave 0.953
Test execution time: sum 5376 ms, max 189 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 19:09:01 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-10-22 19:09:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 41 seconds
Variants: generated 100, build-succeeded 59, build-failed 23, syntax-invalid 12, redundant 6
Fitness: max 0.98(52), min 0.725(1), ave 0.965
Test execution time: sum 6951 ms, max 186 ms, min 88 ms
----------------------------------------------------------------

2023-10-22 19:09:24 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-10-22 19:09:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 5 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 8, redundant 5
Fitness: max 1(1), min 0.549(1), ave 0.958
Test execution time: sum 7280 ms, max 212 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:09:47 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-10-22 19:10:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 27 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 13, redundant 1
Fitness: max 0.98(54), min 0.49(1), ave 0.96
Test execution time: sum 6996 ms, max 225 ms, min 89 ms
----------------------------------------------------------------

2023-10-22 19:10:09 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-10-22 19:10:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 50 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 11, redundant 3
Fitness: max 0.98(52), min 0.549(1), ave 0.966
Test execution time: sum 6591 ms, max 205 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:10:33 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-10-22 19:10:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 15 seconds
Variants: generated 100, build-succeeded 67, build-failed 27, syntax-invalid 5, redundant 1
Fitness: max 0.98(60), min 0.49(2), ave 0.959
Test execution time: sum 7806 ms, max 226 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 19:10:57 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-10-22 19:11:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 41 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 8, redundant 7
Fitness: max 0.98(53), min 0.549(1), ave 0.964
Test execution time: sum 8139 ms, max 813 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:11:23 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-10-22 19:11:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 6 seconds
Variants: generated 100, build-succeeded 67, build-failed 23, syntax-invalid 4, redundant 6
Fitness: max 0.98(59), min 0.314(1), ave 0.953
Test execution time: sum 7968 ms, max 182 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 19:11:48 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-10-22 19:12:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 31 seconds
Variants: generated 100, build-succeeded 64, build-failed 22, syntax-invalid 8, redundant 6
Fitness: max 0.98(55), min 0.49(1), ave 0.955
Test execution time: sum 7579 ms, max 231 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:12:13 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-10-22 19:12:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 53 seconds
Variants: generated 100, build-succeeded 58, build-failed 24, syntax-invalid 14, redundant 4
Fitness: max 0.98(51), min 0.431(1), ave 0.95
Test execution time: sum 6627 ms, max 229 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 19:12:35 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-10-22 19:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 14 seconds
Variants: generated 100, build-succeeded 51, build-failed 26, syntax-invalid 15, redundant 8
Fitness: max 0.98(47), min 0.863(2), ave 0.974
Test execution time: sum 5822 ms, max 188 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 19:12:56 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-10-22 19:13:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 36 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 10, redundant 2
Fitness: max 0.98(51), min 0.765(1), ave 0.97
Test execution time: sum 6591 ms, max 211 ms, min 87 ms
----------------------------------------------------------------

2023-10-22 19:13:19 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-10-22 19:13:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 58 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 15, redundant 0
Fitness: max 0.98(52), min 0.49(1), ave 0.966
Test execution time: sum 6439 ms, max 252 ms, min 87 ms
----------------------------------------------------------------

2023-10-22 19:13:41 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-10-22 19:14:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 18 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 17, redundant 5
Fitness: max 0.98(43), min 0.882(1), ave 0.975
Test execution time: sum 5458 ms, max 186 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:14:01 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-10-22 19:14:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 42 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 11, redundant 6
Fitness: max 0.98(49), min 0.353(1), ave 0.95
Test execution time: sum 6640 ms, max 266 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 19:14:24 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-10-22 19:14:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 3 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 18, redundant 4
Fitness: max 0.98(44), min 0.784(1), ave 0.968
Test execution time: sum 5813 ms, max 205 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:14:45 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-10-22 19:15:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 15, redundant 10
Fitness: max 0.98(45), min 0.549(1), ave 0.963
Test execution time: sum 5906 ms, max 197 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:15:06 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-10-22 19:15:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 45 seconds
Variants: generated 100, build-succeeded 49, build-failed 37, syntax-invalid 12, redundant 2
Fitness: max 0.98(44), min 0.824(1), ave 0.97
Test execution time: sum 5697 ms, max 185 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:15:27 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-10-22 19:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 5 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 12, redundant 6
Fitness: max 0.98(46), min 0.275(1), ave 0.957
Test execution time: sum 5764 ms, max 171 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:15:48 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-10-22 19:16:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 24 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 19, redundant 5
Fitness: max 0.98(45), min 0.333(1), ave 0.96
Test execution time: sum 5560 ms, max 173 ms, min 96 ms
----------------------------------------------------------------

2023-10-22 19:16:07 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-10-22 19:16:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 44 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 17, redundant 4
Fitness: max 0.98(42), min 0.529(1), ave 0.957
Test execution time: sum 5755 ms, max 182 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 19:16:27 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-10-22 19:16:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 6 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 14, redundant 2
Fitness: max 1(1), min 0.863(2), ave 0.971
Test execution time: sum 6012 ms, max 181 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:16:48 [main] [INFO]  KGenProgMain - entered the era of 339th generation.
2023-10-22 19:17:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 27 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 13, redundant 3
Fitness: max 0.98(46), min 0.765(1), ave 0.962
Test execution time: sum 6389 ms, max 202 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 19:17:09 [main] [INFO]  KGenProgMain - entered the era of 340th generation.
2023-10-22 19:17:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 50 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 7, redundant 3
Fitness: max 0.98(55), min 0.765(2), ave 0.967
Test execution time: sum 7103 ms, max 169 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 19:17:32 [main] [INFO]  KGenProgMain - entered the era of 341st generation.
2023-10-22 19:17:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 10 seconds
Variants: generated 100, build-succeeded 43, build-failed 34, syntax-invalid 17, redundant 6
Fitness: max 0.98(39), min 0.49(1), ave 0.961
Test execution time: sum 5106 ms, max 173 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 19:17:52 [main] [INFO]  KGenProgMain - entered the era of 342nd generation.
2023-10-22 19:18:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 32 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 12, redundant 3
Fitness: max 0.98(50), min 0.549(1), ave 0.957
Test execution time: sum 6755 ms, max 174 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 19:18:15 [main] [INFO]  KGenProgMain - entered the era of 343rd generation.
2023-10-22 19:18:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 53 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 13, redundant 4
Fitness: max 0.98(49), min 0.843(1), ave 0.975
Test execution time: sum 5947 ms, max 180 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:18:36 [main] [INFO]  KGenProgMain - entered the era of 344th generation.
2023-10-22 19:18:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 15 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 12, redundant 3
Fitness: max 0.98(45), min 0.843(1), ave 0.966
Test execution time: sum 6025 ms, max 183 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:18:58 [main] [INFO]  KGenProgMain - entered the era of 345th generation.
2023-10-22 19:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 40 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 15, redundant 2
Fitness: max 0.98(52), min 0.216(1), ave 0.958
Test execution time: sum 7535 ms, max 1225 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:19:22 [main] [INFO]  KGenProgMain - entered the era of 346th generation.
2023-10-22 19:19:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 6 seconds
Variants: generated 100, build-succeeded 68, build-failed 22, syntax-invalid 5, redundant 5
Fitness: max 0.98(60), min 0.49(1), ave 0.962
Test execution time: sum 8565 ms, max 210 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:19:49 [main] [INFO]  KGenProgMain - entered the era of 347th generation.
2023-10-22 19:20:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 31 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 6, redundant 4
Fitness: max 0.98(58), min 0.49(2), ave 0.963
Test execution time: sum 7327 ms, max 212 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:20:14 [main] [INFO]  KGenProgMain - entered the era of 348th generation.
2023-10-22 19:20:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 54 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 16, redundant 2
Fitness: max 0.98(49), min 0.765(1), ave 0.969
Test execution time: sum 6316 ms, max 212 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:20:36 [main] [INFO]  KGenProgMain - entered the era of 349th generation.
2023-10-22 19:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 17 seconds
Variants: generated 100, build-succeeded 62, build-failed 23, syntax-invalid 10, redundant 5
Fitness: max 0.98(56), min 0.49(1), ave 0.964
Test execution time: sum 7140 ms, max 179 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 19:20:59 [main] [INFO]  KGenProgMain - entered the era of 350th generation.
2023-10-22 19:21:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 40 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 15, redundant 5
Fitness: max 0.98(46), min 0.49(1), ave 0.963
Test execution time: sum 6214 ms, max 223 ms, min 95 ms
----------------------------------------------------------------

2023-10-22 19:21:22 [main] [INFO]  KGenProgMain - entered the era of 351st generation.
2023-10-22 19:21:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 4 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 13, redundant 4
Fitness: max 0.98(50), min 0.863(1), ave 0.975
Test execution time: sum 6456 ms, max 218 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:21:46 [main] [INFO]  KGenProgMain - entered the era of 352nd generation.
2023-10-22 19:22:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 25 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 17, redundant 2
Fitness: max 0.98(39), min 0.667(1), ave 0.961
Test execution time: sum 5259 ms, max 223 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 19:22:07 [main] [INFO]  KGenProgMain - entered the era of 353rd generation.
2023-10-22 19:22:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 48 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 9, redundant 2
Fitness: max 0.98(49), min 0.235(1), ave 0.942
Test execution time: sum 6541 ms, max 181 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 19:22:30 [main] [INFO]  KGenProgMain - entered the era of 354th generation.
2023-10-22 19:22:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 13 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 7, redundant 5
Fitness: max 0.98(53), min 0.353(1), ave 0.953
Test execution time: sum 6847 ms, max 227 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 19:22:55 [main] [INFO]  KGenProgMain - entered the era of 355th generation.
2023-10-22 19:23:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 35 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 14, redundant 1
Fitness: max 0.98(46), min 0.49(1), ave 0.951
Test execution time: sum 6192 ms, max 207 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 19:23:18 [main] [INFO]  KGenProgMain - entered the era of 356th generation.
2023-10-22 19:23:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 17, redundant 1
Fitness: max 0.98(48), min 0.725(1), ave 0.965
Test execution time: sum 8134 ms, max 1745 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:23:41 [main] [INFO]  KGenProgMain - entered the era of 357th generation.
2023-10-22 19:24:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 20 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 11, redundant 8
Fitness: max 0.98(43), min 0.49(1), ave 0.954
Test execution time: sum 5527 ms, max 180 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 19:24:02 [main] [INFO]  KGenProgMain - entered the era of 358th generation.
2023-10-22 19:24:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 40 seconds
Variants: generated 100, build-succeeded 46, build-failed 26, syntax-invalid 19, redundant 9
Fitness: max 0.98(40), min 0.863(3), ave 0.968
Test execution time: sum 5148 ms, max 209 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:24:23 [main] [INFO]  KGenProgMain - entered the era of 359th generation.
2023-10-22 19:24:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 1 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 15, redundant 6
Fitness: max 0.98(44), min 0.549(2), ave 0.958
Test execution time: sum 5433 ms, max 175 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 19:24:44 [main] [INFO]  KGenProgMain - entered the era of 360th generation.
2023-10-22 19:25:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 24 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 11, redundant 6
Fitness: max 0.98(51), min 0.824(1), ave 0.972
Test execution time: sum 6177 ms, max 219 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:25:06 [main] [INFO]  KGenProgMain - entered the era of 361st generation.
2023-10-22 19:25:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 14, redundant 5
Fitness: max 0.98(43), min 0.49(1), ave 0.955
Test execution time: sum 6118 ms, max 248 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:25:29 [main] [INFO]  KGenProgMain - entered the era of 362nd generation.
2023-10-22 19:25:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 9 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 15, redundant 4
Fitness: max 0.98(46), min 0.784(1), ave 0.964
Test execution time: sum 6082 ms, max 194 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:25:51 [main] [INFO]  KGenProgMain - entered the era of 363rd generation.
2023-10-22 19:26:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 32 seconds
Variants: generated 100, build-succeeded 58, build-failed 22, syntax-invalid 14, redundant 6
Fitness: max 0.98(50), min 0.784(1), ave 0.967
Test execution time: sum 6552 ms, max 199 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 19:26:14 [main] [INFO]  KGenProgMain - entered the era of 364th generation.
2023-10-22 19:26:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 54 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 11, redundant 4
Fitness: max 0.98(51), min 0.765(1), ave 0.972
Test execution time: sum 6338 ms, max 211 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:26:37 [main] [INFO]  KGenProgMain - entered the era of 365th generation.
2023-10-22 19:27:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 18 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 11, redundant 6
Fitness: max 0.98(53), min 0.824(1), ave 0.972
Test execution time: sum 6561 ms, max 200 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:27:01 [main] [INFO]  KGenProgMain - entered the era of 366th generation.
2023-10-22 19:27:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 39 seconds
Variants: generated 100, build-succeeded 45, build-failed 26, syntax-invalid 23, redundant 6
Fitness: max 0.98(37), min 0.549(1), ave 0.952
Test execution time: sum 5040 ms, max 171 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:27:22 [main] [INFO]  KGenProgMain - entered the era of 367th generation.
2023-10-22 19:27:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 0 seconds
Variants: generated 100, build-succeeded 47, build-failed 26, syntax-invalid 22, redundant 5
Fitness: max 0.98(38), min 0.549(1), ave 0.954
Test execution time: sum 5352 ms, max 177 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:27:43 [main] [INFO]  KGenProgMain - entered the era of 368th generation.
2023-10-22 19:28:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 21 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 19, redundant 5
Fitness: max 0.98(40), min 0.882(1), ave 0.971
Test execution time: sum 5270 ms, max 176 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:28:04 [main] [INFO]  KGenProgMain - entered the era of 369th generation.
2023-10-22 19:28:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 42 seconds
Variants: generated 100, build-succeeded 50, build-failed 23, syntax-invalid 20, redundant 7
Fitness: max 0.98(45), min 0.863(2), ave 0.973
Test execution time: sum 5547 ms, max 177 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:28:24 [main] [INFO]  KGenProgMain - entered the era of 370th generation.
2023-10-22 19:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 2 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 19, redundant 4
Fitness: max 0.98(41), min 0.49(1), ave 0.955
Test execution time: sum 5290 ms, max 215 ms, min 86 ms
----------------------------------------------------------------

2023-10-22 19:28:44 [main] [INFO]  KGenProgMain - entered the era of 371st generation.
2023-10-22 19:29:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 23 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 13, redundant 4
Fitness: max 0.98(45), min 0.549(1), ave 0.956
Test execution time: sum 5865 ms, max 156 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 19:29:05 [main] [INFO]  KGenProgMain - entered the era of 372nd generation.
2023-10-22 19:29:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 43 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 17, redundant 5
Fitness: max 0.98(44), min 0.49(1), ave 0.96
Test execution time: sum 5583 ms, max 172 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 19:29:26 [main] [INFO]  KGenProgMain - entered the era of 373rd generation.
2023-10-22 19:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 3 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 20, redundant 3
Fitness: max 1(1), min 0.843(1), ave 0.964
Test execution time: sum 5486 ms, max 183 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 19:29:46 [main] [INFO]  KGenProgMain - entered the era of 374th generation.
2023-10-22 19:30:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 26 seconds
Variants: generated 100, build-succeeded 53, build-failed 25, syntax-invalid 17, redundant 5
Fitness: max 0.98(49), min 0.863(1), ave 0.975
Test execution time: sum 6058 ms, max 198 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:30:08 [main] [INFO]  KGenProgMain - entered the era of 375th generation.
2023-10-22 19:30:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 45 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 20, redundant 2
Fitness: max 0.98(37), min 0.667(1), ave 0.952
Test execution time: sum 4843 ms, max 252 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:30:28 [main] [INFO]  KGenProgMain - entered the era of 376th generation.
2023-10-22 19:30:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 6 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 16, redundant 5
Fitness: max 0.98(41), min 0.863(5), ave 0.965
Test execution time: sum 5425 ms, max 176 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:30:49 [main] [INFO]  KGenProgMain - entered the era of 377th generation.
2023-10-22 19:31:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 27 seconds
Variants: generated 100, build-succeeded 46, build-failed 36, syntax-invalid 14, redundant 4
Fitness: max 0.98(42), min 0.843(1), ave 0.974
Test execution time: sum 5176 ms, max 181 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 19:31:09 [main] [INFO]  KGenProgMain - entered the era of 378th generation.
2023-10-22 19:31:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 49 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 0.98(50), min 0.373(1), ave 0.957
Test execution time: sum 6201 ms, max 175 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 19:31:31 [main] [INFO]  KGenProgMain - entered the era of 379th generation.
2023-10-22 19:31:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 12 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 0.98(48), min 0.49(1), ave 0.963
Test execution time: sum 6443 ms, max 226 ms, min 93 ms
----------------------------------------------------------------

2023-10-22 19:31:55 [main] [INFO]  KGenProgMain - entered the era of 380th generation.
2023-10-22 19:32:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 34 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 13, redundant 6
Fitness: max 0.98(44), min 0.49(1), ave 0.957
Test execution time: sum 5379 ms, max 195 ms, min 85 ms
----------------------------------------------------------------

2023-10-22 19:32:16 [main] [INFO]  KGenProgMain - entered the era of 381st generation.
2023-10-22 19:32:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 57 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 10, redundant 7
Fitness: max 0.98(52), min 0.863(3), ave 0.97
Test execution time: sum 6847 ms, max 189 ms, min 97 ms
----------------------------------------------------------------

2023-10-22 19:32:39 [main] [INFO]  KGenProgMain - entered the era of 382nd generation.
2023-10-22 19:33:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 22 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.843(1), ave 0.967
Test execution time: sum 7928 ms, max 1530 ms, min 101 ms
----------------------------------------------------------------

2023-10-22 19:33:05 [main] [INFO]  KGenProgMain - entered the era of 383rd generation.
2023-10-22 19:33:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 46 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 18, redundant 4
Fitness: max 0.98(45), min 0.49(1), ave 0.965
Test execution time: sum 6161 ms, max 221 ms, min 91 ms
----------------------------------------------------------------

2023-10-22 19:33:29 [main] [INFO]  KGenProgMain - entered the era of 384th generation.
2023-10-22 19:33:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 10 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 15, redundant 6
Fitness: max 0.98(45), min 0.569(1), ave 0.962
Test execution time: sum 6016 ms, max 197 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:33:52 [main] [INFO]  KGenProgMain - entered the era of 385th generation.
2023-10-22 19:34:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 33 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 14, redundant 1
Fitness: max 0.98(44), min 0.549(1), ave 0.964
Test execution time: sum 5708 ms, max 224 ms, min 90 ms
----------------------------------------------------------------

2023-10-22 19:34:15 [main] [INFO]  KGenProgMain - entered the era of 386th generation.
2023-10-22 19:34:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 58 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 16, redundant 3
Fitness: max 0.98(48), min 0.49(1), ave 0.957
Test execution time: sum 6760 ms, max 188 ms, min 92 ms
----------------------------------------------------------------

2023-10-22 19:34:41 [main] [INFO]  KGenProgMain - entered the era of 387th generation.
2023-10-22 19:35:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 25 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 11, redundant 6
Fitness: max 0.98(47), min 0.49(2), ave 0.953
Test execution time: sum 7981 ms, max 1475 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:35:08 [main] [INFO]  KGenProgMain - entered the era of 388th generation.
2023-10-22 19:35:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 48 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 17, redundant 3
Fitness: max 0.98(40), min 0.863(1), ave 0.973
Test execution time: sum 5506 ms, max 196 ms, min 100 ms
----------------------------------------------------------------

2023-10-22 19:35:31 [main] [INFO]  KGenProgMain - entered the era of 389th generation.
2023-10-22 19:35:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 11 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 19, redundant 5
Fitness: max 0.98(41), min 0.549(1), ave 0.955
Test execution time: sum 5541 ms, max 181 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 19:35:53 [main] [INFO]  KGenProgMain - entered the era of 390th generation.
2023-10-22 19:36:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 32 seconds
Variants: generated 100, build-succeeded 44, build-failed 26, syntax-invalid 22, redundant 8
Fitness: max 0.98(38), min 0.569(1), ave 0.959
Test execution time: sum 4962 ms, max 180 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:36:15 [main] [INFO]  KGenProgMain - entered the era of 391st generation.
2023-10-22 19:36:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 54 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 16, redundant 4
Fitness: max 0.98(41), min 0.765(1), ave 0.962
Test execution time: sum 5782 ms, max 224 ms, min 89 ms
----------------------------------------------------------------

2023-10-22 19:36:37 [main] [INFO]  KGenProgMain - entered the era of 392nd generation.
2023-10-22 19:37:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 19 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 16, redundant 2
Fitness: max 0.98(47), min 0.49(1), ave 0.951
Test execution time: sum 6440 ms, max 209 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 19:37:01 [main] [INFO]  KGenProgMain - entered the era of 393rd generation.
2023-10-22 19:37:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 45 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 9, redundant 2
Fitness: max 0.98(58), min 0.824(2), ave 0.972
Test execution time: sum 7357 ms, max 212 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:37:27 [main] [INFO]  KGenProgMain - entered the era of 394th generation.
2023-10-22 19:37:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 11 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 11, redundant 4
Fitness: max 0.98(54), min 0.569(1), ave 0.964
Test execution time: sum 6927 ms, max 197 ms, min 99 ms
----------------------------------------------------------------

2023-10-22 19:37:53 [main] [INFO]  KGenProgMain - entered the era of 395th generation.
2023-10-22 19:38:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 8, redundant 8
Fitness: max 0.98(53), min 0.549(1), ave 0.968
Test execution time: sum 6565 ms, max 184 ms, min 94 ms
----------------------------------------------------------------

2023-10-22 19:38:18 [main] [INFO]  KGenProgMain - entered the era of 396th generation.
2023-10-22 19:38:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 4 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 5, redundant 7
Fitness: max 0.98(51), min 0.333(1), ave 0.954
Test execution time: sum 7426 ms, max 366 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 19:38:46 [main] [INFO]  KGenProgMain - entered the era of 397th generation.
2023-10-22 19:39:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 31 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 10, redundant 5
Fitness: max 0.98(46), min 0.333(1), ave 0.961
Test execution time: sum 6974 ms, max 218 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 19:39:14 [main] [INFO]  KGenProgMain - entered the era of 398th generation.
2023-10-22 19:39:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 59 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 5, redundant 4
Fitness: max 0.98(51), min 0.843(3), ave 0.971
Test execution time: sum 7031 ms, max 223 ms, min 105 ms
----------------------------------------------------------------

2023-10-22 19:39:41 [main] [INFO]  KGenProgMain - entered the era of 399th generation.
2023-10-22 19:40:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 25 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 5, redundant 5
Fitness: max 0.98(54), min 0.824(2), ave 0.966
Test execution time: sum 7205 ms, max 237 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:40:07 [main] [INFO]  KGenProgMain - entered the era of 400th generation.
2023-10-22 19:40:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 49 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 13, redundant 6
Fitness: max 0.98(52), min 0.667(1), ave 0.97
Test execution time: sum 6676 ms, max 217 ms, min 102 ms
----------------------------------------------------------------

2023-10-22 19:40:31 [main] [INFO]  KGenProgMain - entered the era of 401st generation.
2023-10-22 19:40:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 14 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 10, redundant 3
Fitness: max 0.98(47), min 0.49(1), ave 0.959
Test execution time: sum 6300 ms, max 221 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:40:56 [main] [INFO]  KGenProgMain - entered the era of 402nd generation.
2023-10-22 19:41:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 37 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 11, redundant 9
Fitness: max 0.98(50), min 0.863(2), ave 0.976
Test execution time: sum 5992 ms, max 176 ms, min 98 ms
----------------------------------------------------------------

2023-10-22 19:41:19 [main] [INFO]  KGenProgMain - entered the era of 403rd generation.
2023-10-22 19:41:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 19, syntax-invalid 9, redundant 12
Fitness: max 0.98(55), min 0.49(1), ave 0.962
Test execution time: sum 6415 ms, max 168 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:41:42 [main] [INFO]  KGenProgMain - entered the era of 404th generation.
2023-10-22 19:42:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 18 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 6, redundant 6
Fitness: max 0.98(48), min 0.863(1), ave 0.974
Test execution time: sum 4697 ms, max 135 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:42:01 [main] [INFO]  KGenProgMain - entered the era of 405th generation.
2023-10-22 19:42:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 36 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 7, redundant 12
Fitness: max 0.98(49), min 0.706(1), ave 0.965
Test execution time: sum 4766 ms, max 138 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 19:42:19 [main] [INFO]  KGenProgMain - entered the era of 406th generation.
2023-10-22 19:42:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 54 seconds
Variants: generated 100, build-succeeded 41, build-failed 35, syntax-invalid 15, redundant 9
Fitness: max 0.98(38), min 0.902(3), ave 0.975
Test execution time: sum 3965 ms, max 185 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:42:37 [main] [INFO]  KGenProgMain - entered the era of 407th generation.
2023-10-22 19:42:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 13 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 8, redundant 13
Fitness: max 0.98(46), min 0.549(1), ave 0.966
Test execution time: sum 4618 ms, max 173 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 19:42:56 [main] [INFO]  KGenProgMain - entered the era of 408th generation.
2023-10-22 19:43:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 32 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 7, redundant 10
Fitness: max 0.98(45), min 0.843(1), ave 0.969
Test execution time: sum 4709 ms, max 217 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:43:14 [main] [INFO]  KGenProgMain - entered the era of 409th generation.
2023-10-22 19:43:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 49 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 8, redundant 10
Fitness: max 0.98(46), min 0.667(1), ave 0.961
Test execution time: sum 4750 ms, max 189 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 19:43:32 [main] [INFO]  KGenProgMain - entered the era of 410th generation.
2023-10-22 19:43:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 9 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 5, redundant 13
Fitness: max 0.98(45), min 0.549(1), ave 0.955
Test execution time: sum 5269 ms, max 222 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 19:43:51 [main] [INFO]  KGenProgMain - entered the era of 411th generation.
2023-10-22 19:44:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 27 seconds
Variants: generated 100, build-succeeded 48, build-failed 23, syntax-invalid 15, redundant 14
Fitness: max 1(1), min 0.49(2), ave 0.943
Test execution time: sum 4583 ms, max 148 ms, min 66 ms
----------------------------------------------------------------

2023-10-22 19:44:09 [main] [INFO]  KGenProgMain - entered the era of 412th generation.
2023-10-22 19:44:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 44 seconds
Variants: generated 100, build-succeeded 41, build-failed 30, syntax-invalid 12, redundant 17
Fitness: max 0.98(36), min 0.765(1), ave 0.963
Test execution time: sum 4098 ms, max 157 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 19:44:27 [main] [INFO]  KGenProgMain - entered the era of 413th generation.
2023-10-22 19:44:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 2 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 7, redundant 16
Fitness: max 0.98(44), min 0.275(1), ave 0.955
Test execution time: sum 4106 ms, max 143 ms, min 63 ms
----------------------------------------------------------------

2023-10-22 19:44:44 [main] [INFO]  KGenProgMain - entered the era of 414th generation.
2023-10-22 19:45:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 18 seconds
Variants: generated 100, build-succeeded 37, build-failed 26, syntax-invalid 13, redundant 24
Fitness: max 0.98(35), min 0.863(1), ave 0.975
Test execution time: sum 3251 ms, max 135 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 19:45:00 [main] [INFO]  KGenProgMain - entered the era of 415th generation.
2023-10-22 19:45:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 32 seconds
Variants: generated 100, build-succeeded 34, build-failed 30, syntax-invalid 23, redundant 13
Fitness: max 0.98(30), min 0.275(1), ave 0.938
Test execution time: sum 2904 ms, max 134 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 19:45:14 [main] [INFO]  KGenProgMain - entered the era of 416th generation.
2023-10-22 19:45:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 50 seconds
Variants: generated 100, build-succeeded 49, build-failed 26, syntax-invalid 9, redundant 16
Fitness: max 0.98(42), min 0.353(1), ave 0.944
Test execution time: sum 4174 ms, max 145 ms, min 60 ms
----------------------------------------------------------------

2023-10-22 19:45:32 [main] [INFO]  KGenProgMain - entered the era of 417th generation.
2023-10-22 19:45:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 5 seconds
Variants: generated 100, build-succeeded 44, build-failed 26, syntax-invalid 19, redundant 11
Fitness: max 1(1), min 0.765(1), ave 0.971
Test execution time: sum 3876 ms, max 191 ms, min 72 ms
----------------------------------------------------------------

2023-10-22 19:45:48 [main] [INFO]  KGenProgMain - entered the era of 418th generation.
2023-10-22 19:46:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 23 seconds
Variants: generated 100, build-succeeded 46, build-failed 27, syntax-invalid 10, redundant 17
Fitness: max 0.98(38), min 0.49(1), ave 0.95
Test execution time: sum 4999 ms, max 1062 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 19:46:06 [main] [INFO]  KGenProgMain - entered the era of 419th generation.
2023-10-22 19:46:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 43 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 3, redundant 11
Fitness: max 0.98(53), min 0.431(1), ave 0.955
Test execution time: sum 5067 ms, max 177 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 19:46:25 [main] [INFO]  KGenProgMain - entered the era of 420th generation.
2023-10-22 19:46:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 1 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 13, redundant 8
Fitness: max 0.98(46), min 0.353(1), ave 0.957
Test execution time: sum 4483 ms, max 223 ms, min 58 ms
----------------------------------------------------------------

2023-10-22 19:46:44 [main] [INFO]  KGenProgMain - entered the era of 421st generation.
2023-10-22 19:47:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 20 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 9, redundant 8
Fitness: max 0.98(43), min 0.49(1), ave 0.957
Test execution time: sum 4298 ms, max 170 ms, min 66 ms
----------------------------------------------------------------

2023-10-22 19:47:02 [main] [INFO]  KGenProgMain - entered the era of 422nd generation.
2023-10-22 19:47:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 38 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 9, redundant 12
Fitness: max 0.98(43), min 0.549(1), ave 0.953
Test execution time: sum 4536 ms, max 213 ms, min 70 ms
----------------------------------------------------------------

2023-10-22 19:47:21 [main] [INFO]  KGenProgMain - entered the era of 423rd generation.
2023-10-22 19:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 57 seconds
Variants: generated 100, build-succeeded 51, build-failed 24, syntax-invalid 14, redundant 11
Fitness: max 0.98(39), min 0.49(1), ave 0.946
Test execution time: sum 4410 ms, max 145 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 19:47:39 [main] [INFO]  KGenProgMain - entered the era of 424th generation.
2023-10-22 19:47:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 16 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 11, redundant 7
Fitness: max 0.98(45), min 0.725(1), ave 0.971
Test execution time: sum 4235 ms, max 196 ms, min 75 ms
----------------------------------------------------------------

2023-10-22 19:47:58 [main] [INFO]  KGenProgMain - entered the era of 425th generation.
2023-10-22 19:48:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 38 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 9, redundant 9
Fitness: max 0.98(44), min 0.863(2), ave 0.974
Test execution time: sum 6141 ms, max 1662 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:48:20 [main] [INFO]  KGenProgMain - entered the era of 426th generation.
2023-10-22 19:48:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 59 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 16, redundant 6
Fitness: max 0.98(41), min 0.569(1), ave 0.953
Test execution time: sum 5059 ms, max 233 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 19:48:41 [main] [INFO]  KGenProgMain - entered the era of 427th generation.
2023-10-22 19:49:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 18 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 15, redundant 7
Fitness: max 0.98(42), min 0.784(1), ave 0.964
Test execution time: sum 4307 ms, max 170 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 19:49:00 [main] [INFO]  KGenProgMain - entered the era of 428th generation.
2023-10-22 19:49:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 37 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 9, redundant 11
Fitness: max 1(1), min 0.765(1), ave 0.972
Test execution time: sum 4778 ms, max 174 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:49:20 [main] [INFO]  KGenProgMain - entered the era of 429th generation.
2023-10-22 19:49:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 58 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 11, redundant 6
Fitness: max 0.98(49), min 0.824(1), ave 0.972
Test execution time: sum 5002 ms, max 247 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:49:40 [main] [INFO]  KGenProgMain - entered the era of 430th generation.
2023-10-22 19:50:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 22, syntax-invalid 13, redundant 11
Fitness: max 0.98(47), min 0.569(1), ave 0.964
Test execution time: sum 4778 ms, max 141 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 19:50:00 [main] [INFO]  KGenProgMain - entered the era of 431st generation.
2023-10-22 19:50:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 36 seconds
Variants: generated 100, build-succeeded 47, build-failed 26, syntax-invalid 20, redundant 7
Fitness: max 0.98(41), min 0.49(1), ave 0.961
Test execution time: sum 4229 ms, max 191 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 19:50:18 [main] [INFO]  KGenProgMain - entered the era of 432nd generation.
2023-10-22 19:50:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 55 seconds
Variants: generated 100, build-succeeded 48, build-failed 23, syntax-invalid 19, redundant 10
Fitness: max 0.98(44), min 0.863(2), ave 0.972
Test execution time: sum 4639 ms, max 175 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:50:38 [main] [INFO]  KGenProgMain - entered the era of 433rd generation.
2023-10-22 19:50:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 17 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 15, redundant 6
Fitness: max 0.98(45), min 0.569(1), ave 0.958
Test execution time: sum 5401 ms, max 186 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:50:59 [main] [INFO]  KGenProgMain - entered the era of 434th generation.
2023-10-22 19:51:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 38 seconds
Variants: generated 100, build-succeeded 52, build-failed 24, syntax-invalid 20, redundant 4
Fitness: max 0.98(43), min 0.765(1), ave 0.961
Test execution time: sum 4981 ms, max 159 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:51:20 [main] [INFO]  KGenProgMain - entered the era of 435th generation.
2023-10-22 19:51:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 57 seconds
Variants: generated 100, build-succeeded 42, build-failed 31, syntax-invalid 17, redundant 10
Fitness: max 0.98(41), min 0.784(1), ave 0.976
Test execution time: sum 4484 ms, max 185 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 19:51:40 [main] [INFO]  KGenProgMain - entered the era of 436th generation.
2023-10-22 19:51:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 16 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 20, redundant 5
Fitness: max 0.98(41), min 0.843(2), ave 0.962
Test execution time: sum 4671 ms, max 177 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:51:59 [main] [INFO]  KGenProgMain - entered the era of 437th generation.
2023-10-22 19:52:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 35 seconds
Variants: generated 100, build-succeeded 49, build-failed 25, syntax-invalid 18, redundant 8
Fitness: max 0.98(42), min 0.667(1), ave 0.963
Test execution time: sum 4452 ms, max 165 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 19:52:17 [main] [INFO]  KGenProgMain - entered the era of 438th generation.
2023-10-22 19:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 54 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 11, redundant 8
Fitness: max 0.98(54), min 0.902(2), ave 0.977
Test execution time: sum 5052 ms, max 190 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:52:37 [main] [INFO]  KGenProgMain - entered the era of 439th generation.
2023-10-22 19:53:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 17 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 14, redundant 6
Fitness: max 0.98(44), min 0.843(1), ave 0.97
Test execution time: sum 7041 ms, max 2369 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:53:00 [main] [INFO]  KGenProgMain - entered the era of 440th generation.
2023-10-22 19:53:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 36 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0.353(1), ave 0.965
Test execution time: sum 4776 ms, max 196 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 19:53:19 [main] [INFO]  KGenProgMain - entered the era of 441st generation.
2023-10-22 19:53:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 57 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 15, redundant 3
Fitness: max 0.98(50), min 0.549(2), ave 0.957
Test execution time: sum 5070 ms, max 174 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 19:53:39 [main] [INFO]  KGenProgMain - entered the era of 442nd generation.
2023-10-22 19:53:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 17 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 12, redundant 9
Fitness: max 0.98(49), min 0.667(1), ave 0.97
Test execution time: sum 4797 ms, max 172 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 19:53:59 [main] [INFO]  KGenProgMain - entered the era of 443rd generation.
2023-10-22 19:54:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 34 seconds
Variants: generated 100, build-succeeded 42, build-failed 33, syntax-invalid 19, redundant 6
Fitness: max 0.98(38), min 0.549(1), ave 0.948
Test execution time: sum 3784 ms, max 168 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 19:54:17 [main] [INFO]  KGenProgMain - entered the era of 444th generation.
2023-10-22 19:54:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 55 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 13, redundant 6
Fitness: max 0.98(50), min 0.549(2), ave 0.955
Test execution time: sum 5122 ms, max 212 ms, min 74 ms
----------------------------------------------------------------

2023-10-22 19:54:38 [main] [INFO]  KGenProgMain - entered the era of 445th generation.
2023-10-22 19:54:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 15 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 10, redundant 8
Fitness: max 0.98(48), min 0.49(1), ave 0.948
Test execution time: sum 4863 ms, max 140 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 19:54:58 [main] [INFO]  KGenProgMain - entered the era of 446th generation.
2023-10-22 19:55:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 36 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 14, redundant 4
Fitness: max 0.98(49), min 0.49(1), ave 0.953
Test execution time: sum 5054 ms, max 177 ms, min 62 ms
----------------------------------------------------------------

2023-10-22 19:55:18 [main] [INFO]  KGenProgMain - entered the era of 447th generation.
2023-10-22 19:55:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 56 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 11, redundant 6
Fitness: max 0.98(46), min 0.784(1), ave 0.968
Test execution time: sum 4836 ms, max 141 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:55:38 [main] [INFO]  KGenProgMain - entered the era of 448th generation.
2023-10-22 19:55:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 14, redundant 7
Fitness: max 0.98(49), min 0.843(1), ave 0.973
Test execution time: sum 4844 ms, max 168 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:55:58 [main] [INFO]  KGenProgMain - entered the era of 449th generation.
2023-10-22 19:56:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 15, redundant 4
Fitness: max 0.98(42), min 0.863(1), ave 0.975
Test execution time: sum 4049 ms, max 142 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:56:18 [main] [INFO]  KGenProgMain - entered the era of 450th generation.
2023-10-22 19:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 17, redundant 5
Fitness: max 0.98(44), min 0.588(1), ave 0.96
Test execution time: sum 4592 ms, max 185 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 19:56:37 [main] [INFO]  KGenProgMain - entered the era of 451st generation.
2023-10-22 19:56:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 15 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 11, redundant 2
Fitness: max 0.98(50), min 0.863(2), ave 0.968
Test execution time: sum 5194 ms, max 190 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:56:57 [main] [INFO]  KGenProgMain - entered the era of 452nd generation.
2023-10-22 19:57:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 36 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 11, redundant 7
Fitness: max 0.98(46), min 0.784(1), ave 0.967
Test execution time: sum 4816 ms, max 150 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:57:18 [main] [INFO]  KGenProgMain - entered the era of 453rd generation.
2023-10-22 19:57:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 54 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 22, redundant 5
Fitness: max 0.98(40), min 0.843(1), ave 0.973
Test execution time: sum 3996 ms, max 226 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:57:37 [main] [INFO]  KGenProgMain - entered the era of 454th generation.
2023-10-22 19:57:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 13 seconds
Variants: generated 100, build-succeeded 45, build-failed 32, syntax-invalid 17, redundant 6
Fitness: max 0.98(34), min 0.588(1), ave 0.95
Test execution time: sum 4126 ms, max 180 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 19:57:56 [main] [INFO]  KGenProgMain - entered the era of 455th generation.
2023-10-22 19:58:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 35 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 10, redundant 11
Fitness: max 0.98(49), min 0.863(1), ave 0.974
Test execution time: sum 5161 ms, max 186 ms, min 80 ms
----------------------------------------------------------------

2023-10-22 19:58:18 [main] [INFO]  KGenProgMain - entered the era of 456th generation.
2023-10-22 19:58:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 54 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 14, redundant 1
Fitness: max 0.98(45), min 0.549(1), ave 0.958
Test execution time: sum 4742 ms, max 193 ms, min 79 ms
----------------------------------------------------------------

2023-10-22 19:58:37 [main] [INFO]  KGenProgMain - entered the era of 457th generation.
2023-10-22 19:58:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 14 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 13, redundant 10
Fitness: max 0.98(47), min 0.843(1), ave 0.976
Test execution time: sum 4503 ms, max 136 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 19:58:57 [main] [INFO]  KGenProgMain - entered the era of 458th generation.
2023-10-22 19:59:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 34 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 13, redundant 4
Fitness: max 0.98(49), min 0.353(1), ave 0.962
Test execution time: sum 4936 ms, max 148 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 19:59:17 [main] [INFO]  KGenProgMain - entered the era of 459th generation.
2023-10-22 19:59:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 57 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 21, redundant 1
Fitness: max 0.98(46), min 0.49(1), ave 0.955
Test execution time: sum 6306 ms, max 1259 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 19:59:39 [main] [INFO]  KGenProgMain - entered the era of 460th generation.
2023-10-22 20:00:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 17 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 19, redundant 3
Fitness: max 0.98(42), min 0.098(1), ave 0.94
Test execution time: sum 4685 ms, max 188 ms, min 57 ms
----------------------------------------------------------------

2023-10-22 20:00:00 [main] [INFO]  KGenProgMain - entered the era of 461st generation.
2023-10-22 20:00:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 37 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 17, redundant 4
Fitness: max 0.98(44), min 0.843(1), ave 0.973
Test execution time: sum 4305 ms, max 182 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:00:19 [main] [INFO]  KGenProgMain - entered the era of 462nd generation.
2023-10-22 20:00:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 55 seconds
Variants: generated 100, build-succeeded 44, build-failed 28, syntax-invalid 25, redundant 3
Fitness: max 0.98(38), min 0.882(3), ave 0.97
Test execution time: sum 3972 ms, max 146 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:00:38 [main] [INFO]  KGenProgMain - entered the era of 463rd generation.
2023-10-22 20:00:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 16 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 20, redundant 1
Fitness: max 0.98(37), min 0.216(1), ave 0.944
Test execution time: sum 4404 ms, max 152 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 20:00:58 [main] [INFO]  KGenProgMain - entered the era of 464th generation.
2023-10-22 20:01:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 34 seconds
Variants: generated 100, build-succeeded 43, build-failed 31, syntax-invalid 21, redundant 5
Fitness: max 0.98(39), min 0.765(1), ave 0.967
Test execution time: sum 3874 ms, max 175 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 20:01:17 [main] [INFO]  KGenProgMain - entered the era of 465th generation.
2023-10-22 20:01:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 54 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 18, redundant 4
Fitness: max 0.98(42), min 0.863(3), ave 0.969
Test execution time: sum 4271 ms, max 148 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:01:36 [main] [INFO]  KGenProgMain - entered the era of 466th generation.
2023-10-22 20:01:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 12 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 21, redundant 4
Fitness: max 0.98(35), min 0.471(1), ave 0.943
Test execution time: sum 3952 ms, max 174 ms, min 63 ms
----------------------------------------------------------------

2023-10-22 20:01:55 [main] [INFO]  KGenProgMain - entered the era of 467th generation.
2023-10-22 20:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 30 seconds
Variants: generated 100, build-succeeded 43, build-failed 29, syntax-invalid 26, redundant 2
Fitness: max 0.98(38), min 0.49(1), ave 0.957
Test execution time: sum 3928 ms, max 171 ms, min 69 ms
----------------------------------------------------------------

2023-10-22 20:02:12 [main] [INFO]  KGenProgMain - entered the era of 468th generation.
2023-10-22 20:02:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 49 seconds
Variants: generated 100, build-succeeded 45, build-failed 33, syntax-invalid 19, redundant 3
Fitness: max 0.98(44), min 0.902(1), ave 0.979
Test execution time: sum 4114 ms, max 143 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:02:32 [main] [INFO]  KGenProgMain - entered the era of 469th generation.
2023-10-22 20:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 9 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 23, redundant 2
Fitness: max 1(1), min 0.549(3), ave 0.945
Test execution time: sum 6003 ms, max 1859 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 20:02:52 [main] [INFO]  KGenProgMain - entered the era of 470th generation.
2023-10-22 20:03:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 26 seconds
Variants: generated 100, build-succeeded 41, build-failed 29, syntax-invalid 24, redundant 6
Fitness: max 0.98(36), min 0.51(1), ave 0.951
Test execution time: sum 3709 ms, max 145 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 20:03:09 [main] [INFO]  KGenProgMain - entered the era of 471st generation.
2023-10-22 20:03:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 46 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 21, redundant 4
Fitness: max 0.98(40), min 0.824(1), ave 0.963
Test execution time: sum 4346 ms, max 138 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 20:03:28 [main] [INFO]  KGenProgMain - entered the era of 472nd generation.
2023-10-22 20:03:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 4 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 23, redundant 6
Fitness: max 0.98(36), min 0.529(1), ave 0.947
Test execution time: sum 3868 ms, max 145 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 20:03:47 [main] [INFO]  KGenProgMain - entered the era of 473rd generation.
2023-10-22 20:04:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 28 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 0.98(49), min 0.275(1), ave 0.952
Test execution time: sum 5846 ms, max 185 ms, min 64 ms
----------------------------------------------------------------

2023-10-22 20:04:10 [main] [INFO]  KGenProgMain - entered the era of 474th generation.
2023-10-22 20:04:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 47 seconds
Variants: generated 100, build-succeeded 38, build-failed 33, syntax-invalid 25, redundant 4
Fitness: max 0.98(34), min 0.843(1), ave 0.969
Test execution time: sum 3956 ms, max 216 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 20:04:29 [main] [INFO]  KGenProgMain - entered the era of 475th generation.
2023-10-22 20:04:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 9 seconds
Variants: generated 100, build-succeeded 54, build-failed 20, syntax-invalid 17, redundant 9
Fitness: max 1(1), min 0.569(1), ave 0.962
Test execution time: sum 5157 ms, max 178 ms, min 77 ms
----------------------------------------------------------------

2023-10-22 20:04:51 [main] [INFO]  KGenProgMain - entered the era of 476th generation.
2023-10-22 20:05:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 34 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 12, redundant 5
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 5752 ms, max 348 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 20:05:16 [main] [INFO]  KGenProgMain - entered the era of 477th generation.
2023-10-22 20:05:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 57 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 16, redundant 3
Fitness: max 1(1), min 0.784(1), ave 0.968
Test execution time: sum 5623 ms, max 189 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:05:40 [main] [INFO]  KGenProgMain - entered the era of 478th generation.
2023-10-22 20:05:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 17 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 20, redundant 0
Fitness: max 0.98(35), min 0.588(1), ave 0.953
Test execution time: sum 4165 ms, max 140 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 20:05:59 [main] [INFO]  KGenProgMain - entered the era of 479th generation.
2023-10-22 20:06:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 38 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 14, redundant 2
Fitness: max 1(1), min 0.549(1), ave 0.959
Test execution time: sum 4870 ms, max 153 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 20:06:20 [main] [INFO]  KGenProgMain - entered the era of 480th generation.
2023-10-22 20:06:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 58 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 19, redundant 5
Fitness: max 0.98(39), min 0.765(1), ave 0.968
Test execution time: sum 4281 ms, max 139 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 20:06:40 [main] [INFO]  KGenProgMain - entered the era of 481st generation.
2023-10-22 20:07:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 20 seconds
Variants: generated 100, build-succeeded 59, build-failed 21, syntax-invalid 12, redundant 8
Fitness: max 0.98(53), min 0.804(1), ave 0.969
Test execution time: sum 5296 ms, max 146 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:07:02 [main] [INFO]  KGenProgMain - entered the era of 482nd generation.
2023-10-22 20:07:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 42 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 11, redundant 2
Fitness: max 0.98(46), min 0.667(1), ave 0.96
Test execution time: sum 5523 ms, max 208 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 20:07:25 [main] [INFO]  KGenProgMain - entered the era of 483rd generation.
2023-10-22 20:07:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 7 seconds
Variants: generated 100, build-succeeded 59, build-failed 35, syntax-invalid 4, redundant 2
Fitness: max 0.98(52), min 0.686(1), ave 0.969
Test execution time: sum 5765 ms, max 204 ms, min 82 ms
----------------------------------------------------------------

2023-10-22 20:07:49 [main] [INFO]  KGenProgMain - entered the era of 484th generation.
2023-10-22 20:08:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 29 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 8, redundant 3
Fitness: max 0.98(48), min 0.49(1), ave 0.954
Test execution time: sum 5270 ms, max 201 ms, min 61 ms
----------------------------------------------------------------

2023-10-22 20:08:11 [main] [INFO]  KGenProgMain - entered the era of 485th generation.
2023-10-22 20:08:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 50 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 10, redundant 3
Fitness: max 0.98(56), min 0.549(1), ave 0.964
Test execution time: sum 5531 ms, max 149 ms, min 75 ms
----------------------------------------------------------------

2023-10-22 20:08:33 [main] [INFO]  KGenProgMain - entered the era of 486th generation.
2023-10-22 20:08:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 12 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 15, redundant 3
Fitness: max 0.98(44), min 0.49(1), ave 0.957
Test execution time: sum 4848 ms, max 167 ms, min 68 ms
----------------------------------------------------------------

2023-10-22 20:08:54 [main] [INFO]  KGenProgMain - entered the era of 487th generation.
2023-10-22 20:09:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 32 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 14, redundant 3
Fitness: max 0.98(44), min 0.765(1), ave 0.967
Test execution time: sum 4572 ms, max 198 ms, min 73 ms
----------------------------------------------------------------

2023-10-22 20:09:15 [main] [INFO]  KGenProgMain - entered the era of 488th generation.
2023-10-22 20:09:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 53 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 15, redundant 4
Fitness: max 0.98(46), min 0.765(2), ave 0.961
Test execution time: sum 4974 ms, max 146 ms, min 75 ms
----------------------------------------------------------------

2023-10-22 20:09:36 [main] [INFO]  KGenProgMain - entered the era of 489th generation.
2023-10-22 20:09:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 14 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 4672 ms, max 190 ms, min 65 ms
----------------------------------------------------------------

2023-10-22 20:09:57 [main] [INFO]  KGenProgMain - entered the era of 490th generation.
2023-10-22 20:10:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 35 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 12, redundant 4
Fitness: max 0.98(48), min 0.49(1), ave 0.967
Test execution time: sum 4554 ms, max 140 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 20:10:17 [main] [INFO]  KGenProgMain - entered the era of 491st generation.
2023-10-22 20:10:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 56 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 13, redundant 4
Fitness: max 0.98(53), min 0.863(1), ave 0.974
Test execution time: sum 5102 ms, max 140 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 20:10:39 [main] [INFO]  KGenProgMain - entered the era of 492nd generation.
2023-10-22 20:11:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 13, redundant 7
Fitness: max 0.98(47), min 0.686(1), ave 0.964
Test execution time: sum 4991 ms, max 186 ms, min 81 ms
----------------------------------------------------------------

2023-10-22 20:11:01 [main] [INFO]  KGenProgMain - entered the era of 493rd generation.
2023-10-22 20:11:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 40 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 13, redundant 5
Fitness: max 0.98(49), min 0.824(1), ave 0.973
Test execution time: sum 4972 ms, max 224 ms, min 76 ms
----------------------------------------------------------------

2023-10-22 20:11:23 [main] [INFO]  KGenProgMain - entered the era of 494th generation.
2023-10-22 20:11:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 4 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 11, redundant 2
Fitness: max 0.98(53), min 0.471(1), ave 0.958
Test execution time: sum 5477 ms, max 188 ms, min 67 ms
----------------------------------------------------------------

2023-10-22 20:11:46 [main] [INFO]  KGenProgMain - entered the era of 495th generation.
2023-10-22 20:12:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 26 seconds
Variants: generated 100, build-succeeded 59, build-failed 20, syntax-invalid 10, redundant 11
Fitness: max 0.98(54), min 0.824(1), ave 0.972
Test execution time: sum 5576 ms, max 188 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 20:12:08 [main] [INFO]  KGenProgMain - entered the era of 496th generation.
2023-10-22 20:12:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 48 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 14, redundant 7
Fitness: max 0.98(47), min 0.216(1), ave 0.957
Test execution time: sum 5179 ms, max 177 ms, min 84 ms
----------------------------------------------------------------

2023-10-22 20:12:30 [main] [INFO]  KGenProgMain - entered the era of 497th generation.
2023-10-22 20:12:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 10 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 17, redundant 1
Fitness: max 0.98(47), min 0.843(1), ave 0.969
Test execution time: sum 5252 ms, max 177 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 20:12:53 [main] [INFO]  KGenProgMain - entered the era of 498th generation.
2023-10-22 20:13:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 34 seconds
Variants: generated 100, build-succeeded 53, build-failed 37, syntax-invalid 7, redundant 3
Fitness: max 0.98(49), min 0.863(1), ave 0.976
Test execution time: sum 5278 ms, max 231 ms, min 83 ms
----------------------------------------------------------------

2023-10-22 20:13:16 [main] [INFO]  KGenProgMain - entered the era of 499th generation.
2023-10-22 20:13:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 57 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 8, redundant 5
Fitness: max 0.98(53), min 0.49(1), ave 0.961
Test execution time: sum 5486 ms, max 209 ms, min 71 ms
----------------------------------------------------------------

2023-10-22 20:13:40 [main] [INFO]  KGenProgMain - entered the era of 500th generation.
2023-10-22 20:14:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 34, syntax-invalid 9, redundant 2
Fitness: max 0.98(50), min 0.667(1), ave 0.969
Test execution time: sum 5368 ms, max 211 ms, min 78 ms
----------------------------------------------------------------

2023-10-22 20:14:03 [main] [INFO]  KGenProgMain - GA stopped
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1050,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v366)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v413)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,7 +406,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v462)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1049,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v556)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,8 +1050,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v597)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -407,7 +444,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1086,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v653)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:03 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1051,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v656)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -458,7 +458,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -973,7 +1010,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1088)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,8 +1049,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1153)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -493,6 +530,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1089,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1263)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1272)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -407,7 +444,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1275)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -469,6 +469,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			x = x >> 4;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1052,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1282)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -469,9 +468,11 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			x = x >> 4;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				return;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1385)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1463)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1053,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -470,7 +507,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int result = DECODE_TABLE[b];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +530,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1561)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -492,7 +491,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,7 +470,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int result = DECODE_TABLE[b];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1597)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1598)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1053,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1654)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -493,6 +530,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1664)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,80 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -469,6 +543,7 @@
             // Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
+			x = x >> 4;
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
@@ -493,6 +568,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1049,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1667)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1050,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1669)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -492,6 +529,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1089,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1670)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -407,7 +406,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -470,7 +468,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int result = DECODE_TABLE[b];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1699)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -493,6 +530,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1700)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -383,7 +420,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -470,7 +506,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int result = DECODE_TABLE[b];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +529,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1765)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1052,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1768)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1787)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,7 +470,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int result = DECODE_TABLE[b];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1799)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +446,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -493,6 +531,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1872)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -407,11 +444,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +528,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1970)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,8 +1051,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1983)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1052,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v1991)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -382,7 +419,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -493,6 +529,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2078)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -492,7 +493,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2089)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
     }
 
     /**
@@ -470,7 +471,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int result = DECODE_TABLE[b];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2090)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,80 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -973,7 +1047,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2168)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +446,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -493,6 +531,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1013,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2170)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2188)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2294)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,80 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -493,6 +567,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +1048,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v2397)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,6 +473,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				resizeBuffer();
                 pos += lineSeparator.length;
             }
         } else {
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +830,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int bytesCopied = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1057,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4053)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,43 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -383,7 +420,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +445,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -493,6 +531,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1020,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v4738)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,9 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -466,12 +469,14 @@
                     }
                     break;
             }
-            // Don't want to append the CRLF two times in a row, so make sure previous
+            System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+			// Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +498,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +980,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int readLen = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5113)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,44 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -383,7 +421,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -406,10 +443,13 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
-            System.arraycopy(buffer, readPos, b, bPos, len);
+            buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -466,12 +506,14 @@
                     }
                     break;
             }
-            // Don't want to append the CRLF two times in a row, so make sure previous
+            System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+			// Don't want to append the CRLF two times in a row, so make sure previous
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +535,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -972,7 +1015,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (len == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v5928)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,44 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -406,10 +444,15 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
-            System.arraycopy(buffer, readPos, b, bPos, len);
+            buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +514,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+				resizeBuffer();
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1019,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6731)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,47 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -406,10 +447,13 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
-            System.arraycopy(buffer, readPos, b, bPos, len);
+            buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +515,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1019,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v6989)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,45 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +448,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +511,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +536,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1026,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8421)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,10 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -406,10 +410,12 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
-            System.arraycopy(buffer, readPos, b, bPos, len);
+            buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +477,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+				resizeBuffer();
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +502,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v8515)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,82 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -406,10 +482,13 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
-            System.arraycopy(buffer, readPos, b, bPos, len);
+            buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +550,12 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+				resizeBuffer();
+				resizeBuffer();
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1057,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v9933)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,86 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -471,7 +551,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1063,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11135)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,49 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +452,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +515,12 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+				resizeBuffer();
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -967,13 +1016,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v11329)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,12 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -471,7 +477,16 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v13926)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,269 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +672,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +737,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1241,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v15533)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,159 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +562,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +627,12 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1140,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16113)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,269 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +672,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +736,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1248,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v16942)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,121 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +524,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +593,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1105,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,89 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +492,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +559,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1063,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20138)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,89 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +492,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +561,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -978,7 +1070,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20144)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,91 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -384,6 +469,11 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +499,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +564,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1075,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v20742)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,17 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +420,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +489,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -967,13 +988,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22753)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,16 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +419,16 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +490,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +993,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22760)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,55 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -409,7 +458,17 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -973,7 +1032,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22860)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,126 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -409,7 +529,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +598,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1102,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22869)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,56 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +459,13 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +527,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1030,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v22972)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,239 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -409,7 +642,13 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -493,7 +732,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,9 +1207,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1216,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23649)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,163 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +566,18 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +639,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1148,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v23901)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,92 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			pos = 0;
+			readPos = 0;
+		}
+		eof = true;
     }
 
     /**
@@ -409,7 +495,20 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +570,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1080,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24026)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,95 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +498,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +567,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1070,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24125)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,133 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -409,7 +536,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +605,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1114,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v24644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,61 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +464,13 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +532,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1037,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v26207)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,134 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +537,12 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +604,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1114,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v27905)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,167 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +570,15 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +640,12 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1147,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28150)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,89 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		resizeBuffer();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +492,16 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -441,7 +533,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +562,14 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1077,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28506)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,61 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +464,13 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +532,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1043,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v28542)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,89 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +492,18 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -449,6 +543,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +566,14 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1081,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v29633)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,19 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		resizeBuffer();
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +422,17 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +494,18 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1013,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v31724)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,166 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
     }
 
     /**
@@ -409,7 +569,18 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                pos = 0;
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +642,17 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1160,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v33630)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,52 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -409,7 +455,18 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +528,20 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1049,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v37120)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,126 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +529,20 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +604,16 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -978,7 +1120,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v38023)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,22 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +425,19 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +499,23 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1017,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v40948)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,20 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		pos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +423,19 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +497,24 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1016,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v41519)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,20 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +423,24 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +502,20 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = (x << 8) + b;
+				x = (x << 8) + b;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -980,6 +1024,7 @@
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
+				return 0;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v42615)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,27 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		pos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +430,21 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +506,19 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = (x << 8) + b;
+				x = (x << 8) + b;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1020,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v43803)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,24 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		readPos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +427,22 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +504,14 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = (x << 8) + b;
+				x = x >> 1;
+				x = (x << 8) + b;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1013,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v46739)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,28 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		readPos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
+		pos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +431,19 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +505,15 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1015,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47301)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,30 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +433,21 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +509,16 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1020,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47429)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,24 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		readPos = 0;
+		eof = true;
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		readPos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +427,25 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +507,15 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1017,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47529)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,27 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +430,24 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +509,19 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = (x << 8) + b;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1029,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v47707)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,36 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		modulus = (++modulus) % 4;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		pos = 0;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +439,19 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +513,20 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -975,7 +1030,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (pArray == null || pArray.length == 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  PatchLogExporter - patch (v48723)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-10-22 20:14:04 [main] [INFO]  KGenProgMain - Summary
Reached generation = 500
Generated variants = 49900
Syntax valid variants = 44626
Build succeeded variants = 26923
Time elapsed = 2 hours 18 minutes 21 seconds
Exit status = FAILURE (maximum generation)
