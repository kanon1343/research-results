2023-08-07 01:39:50 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-07 01:39:50 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-07 01:39:50 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-07 01:39:50 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math46/kgenprog-46.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math46 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.complex.ComplexTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 4 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-07 01:40:14 [main] [INFO]  KGenProgMain - initial failed tests (2/116)
org.apache.commons.math.complex.ComplexTest.testDivideZero: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
org.apache.commons.math.complex.ComplexTest.testAtanI: null

2023-08-07 01:40:14 [main] [INFO]  KGenProgMain - GA started
2023-08-07 01:40:14 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-07 01:40:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 50, build-succeeded 3, build-failed 30, syntax-invalid 1, redundant 16
Fitness: max 0.991(1), min 0.966(2), ave 0.974
Test execution time: sum 3339 ms, max 1384 ms, min 832 ms
----------------------------------------------------------------

2023-08-07 01:40:22 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-07 01:40:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 50, build-succeeded 5, build-failed 29, syntax-invalid 2, redundant 14
Fitness: max 1(1), min 0.966(1), ave 0.988
Test execution time: sum 3653 ms, max 1057 ms, min 503 ms
----------------------------------------------------------------

2023-08-07 01:40:29 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-07 01:40:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 100, build-succeeded 12, build-failed 28, syntax-invalid 13, redundant 47
Fitness: max 0.991(6), min 0.966(4), ave 0.981
Test execution time: sum 6940 ms, max 854 ms, min 434 ms
----------------------------------------------------------------

2023-08-07 01:40:40 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-07 01:40:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 seconds
Variants: generated 100, build-succeeded 18, build-failed 27, syntax-invalid 11, redundant 44
Fitness: max 1(1), min 0.957(2), ave 0.98
Test execution time: sum 8594 ms, max 592 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 01:40:54 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-07 01:41:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 seconds
Variants: generated 100, build-succeeded 18, build-failed 22, syntax-invalid 24, redundant 36
Fitness: max 0.991(6), min 0.957(1), ave 0.983
Test execution time: sum 8612 ms, max 628 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 01:41:07 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-07 01:41:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 3 seconds
Variants: generated 100, build-succeeded 14, build-failed 22, syntax-invalid 18, redundant 46
Fitness: max 1(1), min 0.966(1), ave 0.987
Test execution time: sum 6756 ms, max 729 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 01:41:17 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-07 01:41:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 13 seconds
Variants: generated 100, build-succeeded 14, build-failed 30, syntax-invalid 18, redundant 38
Fitness: max 0.991(11), min 0.966(2), ave 0.987
Test execution time: sum 6578 ms, max 559 ms, min 407 ms
----------------------------------------------------------------

2023-08-07 01:41:28 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-07 01:41:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 20 seconds
Variants: generated 100, build-succeeded 8, build-failed 28, syntax-invalid 17, redundant 47
Fitness: max 1(1), min 0.991(7), ave 0.992
Test execution time: sum 3846 ms, max 728 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 01:41:35 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-07 01:41:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 31 seconds
Variants: generated 100, build-succeeded 13, build-failed 21, syntax-invalid 28, redundant 38
Fitness: max 0.991(9), min 0.966(3), ave 0.985
Test execution time: sum 6715 ms, max 794 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 01:41:45 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-07 01:41:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 42 seconds
Variants: generated 100, build-succeeded 18, build-failed 21, syntax-invalid 30, redundant 31
Fitness: max 0.991(12), min 0.914(1), ave 0.982
Test execution time: sum 8131 ms, max 517 ms, min 388 ms
----------------------------------------------------------------

2023-08-07 01:41:57 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-07 01:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 54 seconds
Variants: generated 100, build-succeeded 17, build-failed 26, syntax-invalid 37, redundant 20
Fitness: max 1(2), min 0.966(3), ave 0.988
Test execution time: sum 7719 ms, max 512 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 01:42:09 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-07 01:42:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 6 seconds
Variants: generated 100, build-succeeded 20, build-failed 21, syntax-invalid 34, redundant 25
Fitness: max 0.991(14), min 0.966(2), ave 0.987
Test execution time: sum 8939 ms, max 497 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 01:42:21 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-07 01:42:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 18 seconds
Variants: generated 100, build-succeeded 17, build-failed 23, syntax-invalid 26, redundant 34
Fitness: max 0.991(12), min 0.966(2), ave 0.986
Test execution time: sum 7729 ms, max 527 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 01:42:32 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-07 01:42:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 30 seconds
Variants: generated 100, build-succeeded 18, build-failed 26, syntax-invalid 28, redundant 28
Fitness: max 0.991(18), min 0.991(18), ave 0.991
Test execution time: sum 8083 ms, max 491 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 01:42:44 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-07 01:42:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 42 seconds
Variants: generated 100, build-succeeded 17, build-failed 25, syntax-invalid 25, redundant 33
Fitness: max 0.991(13), min 0.966(2), ave 0.987
Test execution time: sum 7911 ms, max 823 ms, min 396 ms
----------------------------------------------------------------

2023-08-07 01:42:56 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-07 01:43:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 57 seconds
Variants: generated 100, build-succeeded 25, build-failed 24, syntax-invalid 27, redundant 24
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 11548 ms, max 718 ms, min 395 ms
----------------------------------------------------------------

2023-08-07 01:43:12 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-07 01:43:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 11 seconds
Variants: generated 100, build-succeeded 20, build-failed 24, syntax-invalid 32, redundant 24
Fitness: max 1(1), min 0.931(1), ave 0.988
Test execution time: sum 9116 ms, max 496 ms, min 390 ms
----------------------------------------------------------------

2023-08-07 01:43:25 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-07 01:43:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 26 seconds
Variants: generated 100, build-succeeded 24, build-failed 26, syntax-invalid 30, redundant 20
Fitness: max 1(1), min 0.957(1), ave 0.988
Test execution time: sum 10848 ms, max 517 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 01:43:40 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-07 01:43:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 39 seconds
Variants: generated 100, build-succeeded 19, build-failed 24, syntax-invalid 29, redundant 28
Fitness: max 0.991(16), min 0.94(1), ave 0.986
Test execution time: sum 8762 ms, max 604 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 01:43:53 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-07 01:44:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 56 seconds
Variants: generated 100, build-succeeded 24, build-failed 21, syntax-invalid 26, redundant 29
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 12627 ms, max 871 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 01:44:11 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-07 01:44:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 13 seconds
Variants: generated 100, build-succeeded 22, build-failed 21, syntax-invalid 37, redundant 20
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 10756 ms, max 780 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 01:44:27 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-07 01:44:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 26 seconds
Variants: generated 100, build-succeeded 16, build-failed 18, syntax-invalid 39, redundant 27
Fitness: max 0.991(11), min 0.966(2), ave 0.986
Test execution time: sum 8013 ms, max 879 ms, min 390 ms
----------------------------------------------------------------

2023-08-07 01:44:40 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-07 01:44:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 40 seconds
Variants: generated 100, build-succeeded 21, build-failed 24, syntax-invalid 25, redundant 30
Fitness: max 1(1), min 0.974(3), ave 0.989
Test execution time: sum 10286 ms, max 805 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 01:44:55 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-07 01:45:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 58 seconds
Variants: generated 100, build-succeeded 24, build-failed 31, syntax-invalid 27, redundant 18
Fitness: max 1(2), min 0.966(2), ave 0.989
Test execution time: sum 12738 ms, max 851 ms, min 402 ms
----------------------------------------------------------------

2023-08-07 01:45:13 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-07 01:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 14 seconds
Variants: generated 100, build-succeeded 20, build-failed 27, syntax-invalid 36, redundant 17
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 10709 ms, max 755 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 01:45:29 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-07 01:45:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 25 seconds
Variants: generated 100, build-succeeded 13, build-failed 25, syntax-invalid 37, redundant 25
Fitness: max 0.991(12), min 0.983(1), ave 0.991
Test execution time: sum 6868 ms, max 755 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 01:45:40 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-07 01:45:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 40 seconds
Variants: generated 100, build-succeeded 18, build-failed 29, syntax-invalid 29, redundant 24
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 10207 ms, max 946 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 01:45:55 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-07 01:46:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 58 seconds
Variants: generated 100, build-succeeded 24, build-failed 28, syntax-invalid 33, redundant 15
Fitness: max 1(1), min 0.957(1), ave 0.986
Test execution time: sum 13496 ms, max 819 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 01:46:13 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-07 01:46:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 16 seconds
Variants: generated 100, build-succeeded 23, build-failed 22, syntax-invalid 36, redundant 19
Fitness: max 1(1), min 0.966(3), ave 0.988
Test execution time: sum 12213 ms, max 855 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 01:46:30 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-07 01:46:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 31 seconds
Variants: generated 100, build-succeeded 18, build-failed 25, syntax-invalid 37, redundant 20
Fitness: max 1(1), min 0.966(4), ave 0.986
Test execution time: sum 10343 ms, max 755 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 01:46:46 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-07 01:46:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 43 seconds
Variants: generated 100, build-succeeded 15, build-failed 23, syntax-invalid 39, redundant 23
Fitness: max 0.991(13), min 0.966(2), ave 0.988
Test execution time: sum 8173 ms, max 834 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 01:46:58 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-07 01:47:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 57 seconds
Variants: generated 100, build-succeeded 16, build-failed 28, syntax-invalid 47, redundant 9
Fitness: max 0.991(10), min 0.966(5), ave 0.983
Test execution time: sum 9281 ms, max 902 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 01:47:12 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-07 01:47:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 13 seconds
Variants: generated 100, build-succeeded 19, build-failed 28, syntax-invalid 39, redundant 14
Fitness: max 0.991(14), min 0.966(3), ave 0.986
Test execution time: sum 11159 ms, max 848 ms, min 406 ms
----------------------------------------------------------------

2023-08-07 01:47:28 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-07 01:47:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 28 seconds
Variants: generated 100, build-succeeded 16, build-failed 26, syntax-invalid 39, redundant 19
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 9278 ms, max 806 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 01:47:42 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-07 01:48:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 46 seconds
Variants: generated 100, build-succeeded 22, build-failed 19, syntax-invalid 41, redundant 18
Fitness: max 0.991(17), min 0.931(1), ave 0.985
Test execution time: sum 12928 ms, max 800 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 01:48:00 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-07 01:48:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 0 seconds
Variants: generated 100, build-succeeded 15, build-failed 24, syntax-invalid 38, redundant 23
Fitness: max 0.991(12), min 0.966(2), ave 0.987
Test execution time: sum 9222 ms, max 823 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 01:48:15 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-07 01:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 17 seconds
Variants: generated 100, build-succeeded 18, build-failed 24, syntax-invalid 42, redundant 16
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 12106 ms, max 924 ms, min 463 ms
----------------------------------------------------------------

2023-08-07 01:48:32 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-07 01:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 39 seconds
Variants: generated 100, build-succeeded 23, build-failed 25, syntax-invalid 35, redundant 17
Fitness: max 0.991(18), min 0.957(1), ave 0.987
Test execution time: sum 15569 ms, max 843 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 01:48:53 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-07 01:49:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 0 seconds
Variants: generated 100, build-succeeded 22, build-failed 24, syntax-invalid 33, redundant 21
Fitness: max 0.991(18), min 0.966(2), ave 0.988
Test execution time: sum 15107 ms, max 924 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 01:49:14 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-07 01:49:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 22 seconds
Variants: generated 100, build-succeeded 23, build-failed 26, syntax-invalid 33, redundant 18
Fitness: max 0.991(16), min 0.957(1), ave 0.985
Test execution time: sum 15426 ms, max 857 ms, min 510 ms
----------------------------------------------------------------

2023-08-07 01:49:37 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-07 01:49:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 40 seconds
Variants: generated 100, build-succeeded 23, build-failed 24, syntax-invalid 34, redundant 19
Fitness: max 0.991(18), min 0.974(1), ave 0.989
Test execution time: sum 12432 ms, max 1003 ms, min 391 ms
----------------------------------------------------------------

2023-08-07 01:49:55 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-07 01:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 58 seconds
Variants: generated 100, build-succeeded 26, build-failed 31, syntax-invalid 31, redundant 12
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 13080 ms, max 786 ms, min 393 ms
----------------------------------------------------------------

2023-08-07 01:50:13 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-07 01:50:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 15 seconds
Variants: generated 100, build-succeeded 24, build-failed 24, syntax-invalid 38, redundant 14
Fitness: max 0.991(21), min 0.966(1), ave 0.99
Test execution time: sum 12205 ms, max 797 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 01:50:30 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-07 01:50:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 33 seconds
Variants: generated 100, build-succeeded 25, build-failed 29, syntax-invalid 30, redundant 16
Fitness: max 0.991(23), min 0.966(2), ave 0.989
Test execution time: sum 12422 ms, max 844 ms, min 384 ms
----------------------------------------------------------------

2023-08-07 01:50:47 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-07 01:51:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 49 seconds
Variants: generated 100, build-succeeded 22, build-failed 28, syntax-invalid 35, redundant 15
Fitness: max 0.991(17), min 0.948(1), ave 0.986
Test execution time: sum 10778 ms, max 749 ms, min 392 ms
----------------------------------------------------------------

2023-08-07 01:51:04 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-07 01:51:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 9 seconds
Variants: generated 100, build-succeeded 27, build-failed 29, syntax-invalid 29, redundant 15
Fitness: max 0.991(26), min 0.983(1), ave 0.991
Test execution time: sum 14083 ms, max 811 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 01:51:23 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-07 01:51:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 23 seconds
Variants: generated 100, build-succeeded 18, build-failed 30, syntax-invalid 37, redundant 15
Fitness: max 0.991(14), min 0.966(1), ave 0.988
Test execution time: sum 9327 ms, max 853 ms, min 402 ms
----------------------------------------------------------------

2023-08-07 01:51:38 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-07 01:51:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 41 seconds
Variants: generated 100, build-succeeded 23, build-failed 37, syntax-invalid 33, redundant 7
Fitness: max 0.991(21), min 0.966(1), ave 0.99
Test execution time: sum 12171 ms, max 835 ms, min 396 ms
----------------------------------------------------------------

2023-08-07 01:51:56 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-07 01:52:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 57 seconds
Variants: generated 100, build-succeeded 21, build-failed 31, syntax-invalid 38, redundant 10
Fitness: max 0.991(20), min 0.983(1), ave 0.991
Test execution time: sum 11112 ms, max 731 ms, min 391 ms
----------------------------------------------------------------

2023-08-07 01:52:12 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-07 01:52:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 15 seconds
Variants: generated 100, build-succeeded 19, build-failed 30, syntax-invalid 37, redundant 14
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 11520 ms, max 879 ms, min 389 ms
----------------------------------------------------------------

2023-08-07 01:52:30 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-07 01:52:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 34 seconds
Variants: generated 100, build-succeeded 24, build-failed 35, syntax-invalid 34, redundant 7
Fitness: max 0.991(22), min 0.966(2), ave 0.989
Test execution time: sum 13217 ms, max 810 ms, min 394 ms
----------------------------------------------------------------

2023-08-07 01:52:49 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-07 01:53:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 55 seconds
Variants: generated 100, build-succeeded 27, build-failed 34, syntax-invalid 31, redundant 8
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 14914 ms, max 888 ms, min 407 ms
----------------------------------------------------------------

2023-08-07 01:53:10 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-07 01:53:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 14 seconds
Variants: generated 100, build-succeeded 23, build-failed 37, syntax-invalid 29, redundant 11
Fitness: max 1(2), min 0.974(1), ave 0.99
Test execution time: sum 12552 ms, max 722 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 01:53:28 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-07 01:53:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 30 seconds
Variants: generated 100, build-succeeded 18, build-failed 31, syntax-invalid 40, redundant 11
Fitness: max 0.991(15), min 0.966(2), ave 0.988
Test execution time: sum 10524 ms, max 825 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 01:53:44 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-07 01:53:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 44 seconds
Variants: generated 100, build-succeeded 15, build-failed 27, syntax-invalid 45, redundant 13
Fitness: max 0.991(13), min 0.966(1), ave 0.989
Test execution time: sum 8679 ms, max 772 ms, min 385 ms
----------------------------------------------------------------

2023-08-07 01:53:59 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-07 01:54:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 58 seconds
Variants: generated 100, build-succeeded 16, build-failed 32, syntax-invalid 39, redundant 13
Fitness: max 0.991(12), min 0.966(1), ave 0.988
Test execution time: sum 9094 ms, max 787 ms, min 438 ms
----------------------------------------------------------------

2023-08-07 01:54:13 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-07 01:54:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 14 seconds
Variants: generated 100, build-succeeded 17, build-failed 25, syntax-invalid 46, redundant 12
Fitness: max 0.991(15), min 0.966(1), ave 0.989
Test execution time: sum 10865 ms, max 898 ms, min 426 ms
----------------------------------------------------------------

2023-08-07 01:54:29 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-07 01:54:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 29 seconds
Variants: generated 100, build-succeeded 15, build-failed 38, syntax-invalid 37, redundant 10
Fitness: max 0.991(12), min 0.974(1), ave 0.989
Test execution time: sum 9022 ms, max 830 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 01:54:44 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-07 01:55:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 46 seconds
Variants: generated 100, build-succeeded 16, build-failed 34, syntax-invalid 39, redundant 11
Fitness: max 0.991(14), min 0.966(2), ave 0.988
Test execution time: sum 10314 ms, max 829 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 01:55:01 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-07 01:55:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 3 seconds
Variants: generated 100, build-succeeded 16, build-failed 32, syntax-invalid 43, redundant 9
Fitness: max 0.991(11), min 0.957(1), ave 0.983
Test execution time: sum 10511 ms, max 866 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 01:55:18 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-07 01:55:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 20 seconds
Variants: generated 100, build-succeeded 13, build-failed 30, syntax-invalid 45, redundant 12
Fitness: max 0.991(7), min 0.957(1), ave 0.984
Test execution time: sum 9905 ms, max 929 ms, min 565 ms
----------------------------------------------------------------

2023-08-07 01:55:35 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-07 01:55:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 34 seconds
Variants: generated 100, build-succeeded 14, build-failed 26, syntax-invalid 45, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 8961 ms, max 866 ms, min 434 ms
----------------------------------------------------------------

2023-08-07 01:55:49 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-07 01:56:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 46 seconds
Variants: generated 100, build-succeeded 11, build-failed 24, syntax-invalid 45, redundant 20
Fitness: max 0.991(10), min 0.845(1), ave 0.978
Test execution time: sum 6416 ms, max 823 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 01:56:00 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-07 01:56:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 1 seconds
Variants: generated 100, build-succeeded 15, build-failed 28, syntax-invalid 45, redundant 12
Fitness: max 0.991(13), min 0.983(2), ave 0.99
Test execution time: sum 8894 ms, max 821 ms, min 442 ms
----------------------------------------------------------------

2023-08-07 01:56:15 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-07 01:56:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 14 seconds
Variants: generated 100, build-succeeded 12, build-failed 25, syntax-invalid 49, redundant 14
Fitness: max 0.991(11), min 0.966(1), ave 0.989
Test execution time: sum 8326 ms, max 816 ms, min 482 ms
----------------------------------------------------------------

2023-08-07 01:56:29 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-07 01:56:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 33 seconds
Variants: generated 100, build-succeeded 17, build-failed 33, syntax-invalid 44, redundant 6
Fitness: max 0.991(11), min 0.966(3), ave 0.985
Test execution time: sum 11922 ms, max 932 ms, min 512 ms
----------------------------------------------------------------

2023-08-07 01:56:48 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-07 01:57:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 46 seconds
Variants: generated 100, build-succeeded 10, build-failed 36, syntax-invalid 44, redundant 10
Fitness: max 0.991(7), min 0.845(1), ave 0.974
Test execution time: sum 6807 ms, max 786 ms, min 551 ms
----------------------------------------------------------------

2023-08-07 01:57:01 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-07 01:57:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 57 seconds
Variants: generated 100, build-succeeded 8, build-failed 31, syntax-invalid 43, redundant 18
Fitness: max 1(1), min 0.991(7), ave 0.992
Test execution time: sum 4756 ms, max 849 ms, min 415 ms
----------------------------------------------------------------

2023-08-07 01:57:12 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-07 01:57:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 7 seconds
Variants: generated 100, build-succeeded 10, build-failed 23, syntax-invalid 54, redundant 13
Fitness: max 0.991(6), min 0.966(1), ave 0.986
Test execution time: sum 5881 ms, max 789 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 01:57:22 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-07 01:57:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 20 seconds
Variants: generated 100, build-succeeded 16, build-failed 31, syntax-invalid 46, redundant 7
Fitness: max 0.991(10), min 0.974(3), ave 0.987
Test execution time: sum 8848 ms, max 816 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 01:57:35 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-07 01:57:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 32 seconds
Variants: generated 100, build-succeeded 12, build-failed 31, syntax-invalid 47, redundant 10
Fitness: max 0.991(9), min 0.966(1), ave 0.986
Test execution time: sum 6253 ms, max 798 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 01:57:46 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-07 01:57:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 41 seconds
Variants: generated 100, build-succeeded 8, build-failed 33, syntax-invalid 48, redundant 11
Fitness: max 0.991(6), min 0.983(2), ave 0.989
Test execution time: sum 4467 ms, max 840 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 01:57:56 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-07 01:58:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 50 seconds
Variants: generated 100, build-succeeded 7, build-failed 35, syntax-invalid 45, redundant 13
Fitness: max 0.991(7), min 0.991(7), ave 0.991
Test execution time: sum 3855 ms, max 835 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 01:58:04 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-07 01:58:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 1 seconds
Variants: generated 100, build-succeeded 10, build-failed 36, syntax-invalid 42, redundant 12
Fitness: max 0.991(8), min 0.948(1), ave 0.986
Test execution time: sum 5937 ms, max 863 ms, min 428 ms
----------------------------------------------------------------

2023-08-07 01:58:16 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-07 01:58:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 14 seconds
Variants: generated 100, build-succeeded 13, build-failed 32, syntax-invalid 47, redundant 8
Fitness: max 0.991(7), min 0.974(1), ave 0.987
Test execution time: sum 8147 ms, max 896 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 01:58:29 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-07 01:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 26 seconds
Variants: generated 100, build-succeeded 11, build-failed 35, syntax-invalid 46, redundant 8
Fitness: max 0.991(7), min 0.957(1), ave 0.986
Test execution time: sum 6890 ms, max 892 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 01:58:40 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-07 01:58:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 37 seconds
Variants: generated 100, build-succeeded 11, build-failed 24, syntax-invalid 52, redundant 13
Fitness: max 0.991(9), min 0.966(2), ave 0.987
Test execution time: sum 6165 ms, max 774 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 01:58:51 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-07 01:59:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 47 seconds
Variants: generated 100, build-succeeded 10, build-failed 33, syntax-invalid 46, redundant 11
Fitness: max 0.991(7), min 0.974(1), ave 0.988
Test execution time: sum 5621 ms, max 743 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 01:59:02 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-07 01:59:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 3 seconds
Variants: generated 100, build-succeeded 16, build-failed 30, syntax-invalid 43, redundant 11
Fitness: max 0.991(14), min 0.983(2), ave 0.99
Test execution time: sum 9764 ms, max 828 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 01:59:17 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-07 01:59:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 17 seconds
Variants: generated 100, build-succeeded 14, build-failed 34, syntax-invalid 43, redundant 9
Fitness: max 1(1), min 0.948(1), ave 0.987
Test execution time: sum 8975 ms, max 860 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 01:59:32 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-07 01:59:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 29 seconds
Variants: generated 100, build-succeeded 11, build-failed 33, syntax-invalid 48, redundant 8
Fitness: max 0.991(11), min 0.991(11), ave 0.991
Test execution time: sum 6754 ms, max 885 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 01:59:44 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-07 02:00:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 48 seconds
Variants: generated 100, build-succeeded 17, build-failed 36, syntax-invalid 39, redundant 8
Fitness: max 0.991(15), min 0.974(1), ave 0.99
Test execution time: sum 11308 ms, max 906 ms, min 493 ms
----------------------------------------------------------------

2023-08-07 02:00:03 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-07 02:00:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 3 seconds
Variants: generated 100, build-succeeded 14, build-failed 29, syntax-invalid 48, redundant 9
Fitness: max 0.991(13), min 0.983(1), ave 0.991
Test execution time: sum 9060 ms, max 909 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 02:00:18 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-07 02:00:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 20 seconds
Variants: generated 100, build-succeeded 16, build-failed 30, syntax-invalid 44, redundant 10
Fitness: max 0.991(14), min 0.966(1), ave 0.989
Test execution time: sum 10832 ms, max 859 ms, min 474 ms
----------------------------------------------------------------

2023-08-07 02:00:35 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-07 02:00:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 37 seconds
Variants: generated 100, build-succeeded 14, build-failed 40, syntax-invalid 40, redundant 6
Fitness: max 0.991(13), min 0.983(1), ave 0.991
Test execution time: sum 9745 ms, max 835 ms, min 518 ms
----------------------------------------------------------------

2023-08-07 02:00:51 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-07 02:01:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 58 seconds
Variants: generated 100, build-succeeded 21, build-failed 28, syntax-invalid 41, redundant 10
Fitness: max 0.991(18), min 0.957(1), ave 0.988
Test execution time: sum 13928 ms, max 829 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 02:01:12 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-07 02:01:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 14 seconds
Variants: generated 100, build-succeeded 14, build-failed 29, syntax-invalid 46, redundant 11
Fitness: max 0.991(10), min 0.974(2), ave 0.988
Test execution time: sum 9389 ms, max 835 ms, min 480 ms
----------------------------------------------------------------

2023-08-07 02:01:29 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-07 02:01:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 29 seconds
Variants: generated 100, build-succeeded 11, build-failed 34, syntax-invalid 46, redundant 9
Fitness: max 0.991(8), min 0.974(1), ave 0.988
Test execution time: sum 8101 ms, max 887 ms, min 512 ms
----------------------------------------------------------------

2023-08-07 02:01:44 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-07 02:01:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 38 seconds
Variants: generated 100, build-succeeded 4, build-failed 33, syntax-invalid 47, redundant 16
Fitness: max 1(1), min 0.991(3), ave 0.994
Test execution time: sum 2312 ms, max 728 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 02:01:53 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-07 02:02:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 48 seconds
Variants: generated 100, build-succeeded 13, build-failed 33, syntax-invalid 41, redundant 13
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 5627 ms, max 522 ms, min 398 ms
----------------------------------------------------------------

2023-08-07 02:02:03 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-07 02:02:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 0 seconds
Variants: generated 100, build-succeeded 14, build-failed 28, syntax-invalid 41, redundant 17
Fitness: max 0.991(9), min 0.966(2), ave 0.986
Test execution time: sum 7245 ms, max 698 ms, min 395 ms
----------------------------------------------------------------

2023-08-07 02:02:15 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-07 02:02:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 13 seconds
Variants: generated 100, build-succeeded 14, build-failed 29, syntax-invalid 42, redundant 15
Fitness: max 1(1), min 0.845(1), ave 0.98
Test execution time: sum 6456 ms, max 727 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 02:02:27 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-07 02:02:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 26 seconds
Variants: generated 100, build-succeeded 15, build-failed 30, syntax-invalid 39, redundant 16
Fitness: max 0.991(13), min 0.983(2), ave 0.99
Test execution time: sum 7575 ms, max 823 ms, min 380 ms
----------------------------------------------------------------

2023-08-07 02:02:41 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-07 02:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 38 seconds
Variants: generated 100, build-succeeded 12, build-failed 29, syntax-invalid 49, redundant 10
Fitness: max 1(1), min 0.991(11), ave 0.992
Test execution time: sum 5819 ms, max 743 ms, min 396 ms
----------------------------------------------------------------

2023-08-07 02:02:52 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-07 02:03:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 52 seconds
Variants: generated 100, build-succeeded 15, build-failed 33, syntax-invalid 40, redundant 12
Fitness: max 0.991(13), min 0.931(1), ave 0.986
Test execution time: sum 7530 ms, max 808 ms, min 387 ms
----------------------------------------------------------------

2023-08-07 02:03:07 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-07 02:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 6 seconds
Variants: generated 100, build-succeeded 14, build-failed 36, syntax-invalid 42, redundant 8
Fitness: max 0.991(12), min 0.966(1), ave 0.989
Test execution time: sum 7049 ms, max 739 ms, min 396 ms
----------------------------------------------------------------

2023-08-07 02:03:21 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-07 02:03:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 20 seconds
Variants: generated 100, build-succeeded 16, build-failed 22, syntax-invalid 42, redundant 20
Fitness: max 0.991(15), min 0.966(1), ave 0.99
Test execution time: sum 8071 ms, max 742 ms, min 385 ms
----------------------------------------------------------------

2023-08-07 02:03:35 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-07 02:03:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 34 seconds
Variants: generated 100, build-succeeded 15, build-failed 28, syntax-invalid 42, redundant 15
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 7065 ms, max 750 ms, min 384 ms
----------------------------------------------------------------

2023-08-07 02:03:49 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-07 02:04:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 47 seconds
Variants: generated 100, build-succeeded 12, build-failed 31, syntax-invalid 44, redundant 13
Fitness: max 1(3), min 0.983(1), ave 0.993
Test execution time: sum 6224 ms, max 911 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 02:04:01 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-07 02:04:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 2 seconds
Variants: generated 100, build-succeeded 16, build-failed 26, syntax-invalid 45, redundant 13
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 8556 ms, max 804 ms, min 394 ms
----------------------------------------------------------------

2023-08-07 02:04:17 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-07 02:04:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 17 seconds
Variants: generated 100, build-succeeded 12, build-failed 35, syntax-invalid 43, redundant 10
Fitness: max 1(1), min 0.845(1), ave 0.978
Test execution time: sum 5746 ms, max 698 ms, min 397 ms
----------------------------------------------------------------

2023-08-07 02:04:32 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-07 02:04:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 32 seconds
Variants: generated 100, build-succeeded 16, build-failed 22, syntax-invalid 46, redundant 16
Fitness: max 0.991(15), min 0.957(1), ave 0.989
Test execution time: sum 7980 ms, max 841 ms, min 386 ms
----------------------------------------------------------------

2023-08-07 02:04:47 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-07 02:05:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 46 seconds
Variants: generated 100, build-succeeded 12, build-failed 36, syntax-invalid 41, redundant 11
Fitness: max 0.991(8), min 0.922(1), ave 0.978
Test execution time: sum 6512 ms, max 865 ms, min 378 ms
----------------------------------------------------------------

2023-08-07 02:05:01 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-07 02:05:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 0 seconds
Variants: generated 100, build-succeeded 13, build-failed 30, syntax-invalid 47, redundant 10
Fitness: max 0.991(11), min 0.983(2), ave 0.99
Test execution time: sum 6884 ms, max 776 ms, min 396 ms
----------------------------------------------------------------

2023-08-07 02:05:15 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-07 02:05:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 14 seconds
Variants: generated 100, build-succeeded 11, build-failed 27, syntax-invalid 50, redundant 12
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 5345 ms, max 881 ms, min 370 ms
----------------------------------------------------------------

2023-08-07 02:05:28 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-07 02:05:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 27 seconds
Variants: generated 100, build-succeeded 10, build-failed 35, syntax-invalid 44, redundant 11
Fitness: max 0.991(6), min 0.948(1), ave 0.982
Test execution time: sum 5081 ms, max 728 ms, min 389 ms
----------------------------------------------------------------

2023-08-07 02:05:41 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-07 02:05:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 41 seconds
Variants: generated 100, build-succeeded 12, build-failed 30, syntax-invalid 48, redundant 10
Fitness: max 0.991(10), min 0.931(1), ave 0.986
Test execution time: sum 6637 ms, max 748 ms, min 385 ms
----------------------------------------------------------------

2023-08-07 02:05:55 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-07 02:06:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 55 seconds
Variants: generated 100, build-succeeded 10, build-failed 35, syntax-invalid 43, redundant 12
Fitness: max 1(1), min 0.888(1), ave 0.981
Test execution time: sum 5058 ms, max 780 ms, min 395 ms
----------------------------------------------------------------

2023-08-07 02:06:10 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-07 02:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 9 seconds
Variants: generated 100, build-succeeded 12, build-failed 35, syntax-invalid 40, redundant 13
Fitness: max 0.991(9), min 0.836(1), ave 0.976
Test execution time: sum 6287 ms, max 917 ms, min 394 ms
----------------------------------------------------------------

2023-08-07 02:06:24 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-07 02:06:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 23 seconds
Variants: generated 100, build-succeeded 11, build-failed 31, syntax-invalid 47, redundant 11
Fitness: max 1(2), min 0.991(9), ave 0.993
Test execution time: sum 5923 ms, max 768 ms, min 391 ms
----------------------------------------------------------------

2023-08-07 02:06:38 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-07 02:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 37 seconds
Variants: generated 100, build-succeeded 11, build-failed 31, syntax-invalid 45, redundant 13
Fitness: max 0.991(8), min 0.966(1), ave 0.987
Test execution time: sum 5843 ms, max 811 ms, min 383 ms
----------------------------------------------------------------

2023-08-07 02:06:52 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-07 02:07:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 51 seconds
Variants: generated 100, build-succeeded 11, build-failed 29, syntax-invalid 45, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.986
Test execution time: sum 5849 ms, max 817 ms, min 386 ms
----------------------------------------------------------------

2023-08-07 02:07:06 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-07 02:07:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 5 seconds
Variants: generated 100, build-succeeded 10, build-failed 34, syntax-invalid 43, redundant 13
Fitness: max 1(1), min 0.991(9), ave 0.992
Test execution time: sum 5913 ms, max 784 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 02:07:19 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-07 02:07:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 14 seconds
Variants: generated 100, build-succeeded 4, build-failed 33, syntax-invalid 44, redundant 19
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 2205 ms, max 630 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 02:07:29 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-07 02:07:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 25 seconds
Variants: generated 100, build-succeeded 5, build-failed 31, syntax-invalid 45, redundant 19
Fitness: max 0.991(5), min 0.991(5), ave 0.991
Test execution time: sum 3068 ms, max 727 ms, min 388 ms
----------------------------------------------------------------

2023-08-07 02:07:40 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-07 02:07:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 38 seconds
Variants: generated 100, build-succeeded 7, build-failed 35, syntax-invalid 48, redundant 10
Fitness: max 0.991(7), min 0.991(7), ave 0.991
Test execution time: sum 4275 ms, max 743 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 02:07:53 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-07 02:08:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 54 seconds
Variants: generated 100, build-succeeded 10, build-failed 29, syntax-invalid 48, redundant 13
Fitness: max 0.991(9), min 0.983(1), ave 0.991
Test execution time: sum 6082 ms, max 848 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 02:08:08 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-07 02:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 10 seconds
Variants: generated 100, build-succeeded 12, build-failed 34, syntax-invalid 43, redundant 11
Fitness: max 0.991(8), min 0.966(2), ave 0.986
Test execution time: sum 6817 ms, max 784 ms, min 383 ms
----------------------------------------------------------------

2023-08-07 02:08:25 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-07 02:08:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 27 seconds
Variants: generated 100, build-succeeded 11, build-failed 31, syntax-invalid 48, redundant 10
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 6909 ms, max 882 ms, min 419 ms
----------------------------------------------------------------

2023-08-07 02:08:42 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-07 02:08:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 42 seconds
Variants: generated 100, build-succeeded 11, build-failed 29, syntax-invalid 49, redundant 11
Fitness: max 0.991(9), min 0.966(1), ave 0.988
Test execution time: sum 6729 ms, max 837 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 02:08:57 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-07 02:09:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 57 seconds
Variants: generated 100, build-succeeded 9, build-failed 28, syntax-invalid 54, redundant 9
Fitness: max 0.991(8), min 0.983(1), ave 0.99
Test execution time: sum 5088 ms, max 736 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 02:09:11 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-07 02:09:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 11 seconds
Variants: generated 100, build-succeeded 10, build-failed 30, syntax-invalid 50, redundant 10
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 5860 ms, max 751 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 02:09:26 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-07 02:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 29 seconds
Variants: generated 100, build-succeeded 13, build-failed 24, syntax-invalid 54, redundant 9
Fitness: max 0.991(8), min 0.931(1), ave 0.984
Test execution time: sum 7857 ms, max 901 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 02:09:43 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-07 02:09:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 43 seconds
Variants: generated 100, build-succeeded 9, build-failed 24, syntax-invalid 54, redundant 13
Fitness: max 0.991(7), min 0.974(1), ave 0.989
Test execution time: sum 5407 ms, max 910 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 02:09:58 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-07 02:10:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 56 seconds
Variants: generated 100, build-succeeded 6, build-failed 32, syntax-invalid 47, redundant 15
Fitness: max 0.991(5), min 0.966(1), ave 0.987
Test execution time: sum 3309 ms, max 802 ms, min 450 ms
----------------------------------------------------------------

2023-08-07 02:10:11 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-07 02:10:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 10 seconds
Variants: generated 100, build-succeeded 5, build-failed 39, syntax-invalid 46, redundant 10
Fitness: max 0.991(3), min 0.914(1), ave 0.971
Test execution time: sum 2776 ms, max 703 ms, min 452 ms
----------------------------------------------------------------

2023-08-07 02:10:25 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-07 02:10:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 24 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 55, redundant 12
Fitness: max 0.991(6), min 0.966(1), ave 0.988
Test execution time: sum 4492 ms, max 840 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 02:10:39 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-07 02:11:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 47 seconds
Variants: generated 100, build-succeeded 12, build-failed 32, syntax-invalid 47, redundant 9
Fitness: max 0.991(11), min 0.966(1), ave 0.989
Test execution time: sum 9517 ms, max 969 ms, min 571 ms
----------------------------------------------------------------

2023-08-07 02:11:02 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-07 02:11:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 2 seconds
Variants: generated 100, build-succeeded 6, build-failed 31, syntax-invalid 51, redundant 12
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3641 ms, max 729 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 02:11:17 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-07 02:11:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 17 seconds
Variants: generated 100, build-succeeded 8, build-failed 30, syntax-invalid 51, redundant 11
Fitness: max 0.991(3), min 0.922(1), ave 0.974
Test execution time: sum 5268 ms, max 818 ms, min 477 ms
----------------------------------------------------------------

2023-08-07 02:11:32 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-07 02:11:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 32 seconds
Variants: generated 100, build-succeeded 8, build-failed 25, syntax-invalid 52, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 4689 ms, max 716 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 02:11:47 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-07 02:12:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 46 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 56, redundant 7
Fitness: max 0.991(7), min 0.991(7), ave 0.991
Test execution time: sum 4273 ms, max 776 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 02:12:01 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-07 02:12:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 4 seconds
Variants: generated 100, build-succeeded 14, build-failed 26, syntax-invalid 52, redundant 8
Fitness: max 0.991(13), min 0.931(1), ave 0.987
Test execution time: sum 8978 ms, max 878 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 02:12:19 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-07 02:12:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 17 seconds
Variants: generated 100, build-succeeded 4, build-failed 28, syntax-invalid 54, redundant 14
Fitness: max 0.991(3), min 0.966(1), ave 0.985
Test execution time: sum 2365 ms, max 740 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:12:32 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-07 02:12:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 30 seconds
Variants: generated 100, build-succeeded 7, build-failed 28, syntax-invalid 54, redundant 11
Fitness: max 0.991(5), min 0.966(2), ave 0.984
Test execution time: sum 4245 ms, max 913 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 02:12:45 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-07 02:12:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 44 seconds
Variants: generated 100, build-succeeded 8, build-failed 30, syntax-invalid 52, redundant 10
Fitness: max 1(1), min 0.974(1), ave 0.988
Test execution time: sum 5395 ms, max 828 ms, min 484 ms
----------------------------------------------------------------

2023-08-07 02:12:59 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-07 02:13:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 2 seconds
Variants: generated 100, build-succeeded 13, build-failed 19, syntax-invalid 50, redundant 18
Fitness: max 1(1), min 0.845(1), ave 0.973
Test execution time: sum 8354 ms, max 832 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 02:13:17 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-07 02:13:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 14 seconds
Variants: generated 100, build-succeeded 6, build-failed 17, syntax-invalid 56, redundant 21
Fitness: max 0.991(5), min 0.966(1), ave 0.987
Test execution time: sum 3711 ms, max 765 ms, min 464 ms
----------------------------------------------------------------

2023-08-07 02:13:29 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-07 02:13:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 28 seconds
Variants: generated 100, build-succeeded 5, build-failed 36, syntax-invalid 49, redundant 10
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 3504 ms, max 849 ms, min 569 ms
----------------------------------------------------------------

2023-08-07 02:13:43 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-07 02:13:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 43 seconds
Variants: generated 100, build-succeeded 8, build-failed 30, syntax-invalid 54, redundant 8
Fitness: max 0.991(6), min 0.966(1), ave 0.987
Test execution time: sum 5043 ms, max 811 ms, min 426 ms
----------------------------------------------------------------

2023-08-07 02:13:57 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-07 02:14:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 59 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 53, redundant 10
Fitness: max 0.991(3), min 0.836(1), ave 0.963
Test execution time: sum 4943 ms, max 959 ms, min 578 ms
----------------------------------------------------------------

2023-08-07 02:14:13 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-07 02:14:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 13 seconds
Variants: generated 100, build-succeeded 4, build-failed 33, syntax-invalid 51, redundant 12
Fitness: max 0.991(3), min 0.966(1), ave 0.985
Test execution time: sum 2721 ms, max 870 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 02:14:28 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-07 02:14:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 28 seconds
Variants: generated 100, build-succeeded 12, build-failed 21, syntax-invalid 55, redundant 12
Fitness: max 0.991(10), min 0.966(1), ave 0.989
Test execution time: sum 6613 ms, max 764 ms, min 374 ms
----------------------------------------------------------------

2023-08-07 02:14:42 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-07 02:14:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 42 seconds
Variants: generated 100, build-succeeded 9, build-failed 26, syntax-invalid 58, redundant 7
Fitness: max 0.991(5), min 0.957(2), ave 0.979
Test execution time: sum 5196 ms, max 835 ms, min 387 ms
----------------------------------------------------------------

2023-08-07 02:14:57 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-07 02:15:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 52 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 57, redundant 14
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1277 ms, max 451 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 02:15:06 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-07 02:15:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 2 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 56, redundant 11
Fitness: max 0.991(4), min 0.957(1), ave 0.984
Test execution time: sum 3497 ms, max 841 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 02:15:17 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-07 02:15:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 15 seconds
Variants: generated 100, build-succeeded 9, build-failed 22, syntax-invalid 54, redundant 15
Fitness: max 0.991(8), min 0.974(1), ave 0.989
Test execution time: sum 4887 ms, max 791 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 02:15:30 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-07 02:15:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 30 seconds
Variants: generated 100, build-succeeded 11, build-failed 24, syntax-invalid 54, redundant 11
Fitness: max 0.991(9), min 0.966(1), ave 0.988
Test execution time: sum 6054 ms, max 765 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 02:15:45 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-07 02:15:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 44 seconds
Variants: generated 100, build-succeeded 10, build-failed 24, syntax-invalid 57, redundant 9
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 5578 ms, max 716 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 02:15:59 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-07 02:16:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 56 seconds
Variants: generated 100, build-succeeded 5, build-failed 22, syntax-invalid 58, redundant 15
Fitness: max 1(1), min 0.991(4), ave 0.993
Test execution time: sum 3103 ms, max 891 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 02:16:11 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-07 02:16:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 9 seconds
Variants: generated 100, build-succeeded 8, build-failed 28, syntax-invalid 54, redundant 10
Fitness: max 1(1), min 0.966(2), ave 0.986
Test execution time: sum 4247 ms, max 795 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:16:24 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-07 02:16:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 24 seconds
Variants: generated 100, build-succeeded 11, build-failed 20, syntax-invalid 55, redundant 14
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 6066 ms, max 872 ms, min 398 ms
----------------------------------------------------------------

2023-08-07 02:16:39 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-07 02:16:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 37 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 57, redundant 14
Fitness: max 0.991(5), min 0.966(1), ave 0.987
Test execution time: sum 3800 ms, max 780 ms, min 501 ms
----------------------------------------------------------------

2023-08-07 02:16:51 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-07 02:17:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 50 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 53, redundant 10
Fitness: max 0.991(5), min 0.931(1), ave 0.982
Test execution time: sum 4170 ms, max 952 ms, min 397 ms
----------------------------------------------------------------

2023-08-07 02:17:04 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-07 02:17:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 5 seconds
Variants: generated 100, build-succeeded 10, build-failed 21, syntax-invalid 55, redundant 14
Fitness: max 1(1), min 0.966(1), ave 0.987
Test execution time: sum 6322 ms, max 884 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 02:17:19 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-07 02:17:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 22 seconds
Variants: generated 100, build-succeeded 9, build-failed 28, syntax-invalid 56, redundant 7
Fitness: max 0.991(5), min 0.914(1), ave 0.976
Test execution time: sum 6442 ms, max 1015 ms, min 500 ms
----------------------------------------------------------------

2023-08-07 02:17:37 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-07 02:17:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 34 seconds
Variants: generated 100, build-succeeded 6, build-failed 22, syntax-invalid 52, redundant 20
Fitness: max 0.991(6), min 0.991(6), ave 0.991
Test execution time: sum 3776 ms, max 964 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 02:17:49 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-07 02:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 46 seconds
Variants: generated 100, build-succeeded 4, build-failed 28, syntax-invalid 52, redundant 16
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 2346 ms, max 766 ms, min 409 ms
----------------------------------------------------------------

2023-08-07 02:18:01 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-07 02:18:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 58 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 51, redundant 19
Fitness: max 0.991(3), min 0.914(1), ave 0.974
Test execution time: sum 3059 ms, max 835 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:18:13 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-07 02:18:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 11 seconds
Variants: generated 100, build-succeeded 5, build-failed 31, syntax-invalid 52, redundant 12
Fitness: max 1(1), min 0.991(4), ave 0.993
Test execution time: sum 3236 ms, max 985 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 02:18:26 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-07 02:18:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 25 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 52, redundant 11
Fitness: max 0.991(5), min 0.966(2), ave 0.984
Test execution time: sum 4340 ms, max 770 ms, min 464 ms
----------------------------------------------------------------

2023-08-07 02:18:40 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-07 02:18:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 39 seconds
Variants: generated 100, build-succeeded 5, build-failed 33, syntax-invalid 52, redundant 10
Fitness: max 0.991(4), min 0.966(1), ave 0.986
Test execution time: sum 3402 ms, max 1016 ms, min 434 ms
----------------------------------------------------------------

2023-08-07 02:18:54 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-07 02:19:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 54 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 54, redundant 13
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 4241 ms, max 942 ms, min 599 ms
----------------------------------------------------------------

2023-08-07 02:19:09 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-07 02:19:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 6 seconds
Variants: generated 100, build-succeeded 4, build-failed 32, syntax-invalid 54, redundant 10
Fitness: max 1(1), min 0.966(1), ave 0.987
Test execution time: sum 2592 ms, max 865 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 02:19:21 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-07 02:19:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 20 seconds
Variants: generated 100, build-succeeded 8, build-failed 24, syntax-invalid 53, redundant 15
Fitness: max 1(1), min 0.991(7), ave 0.992
Test execution time: sum 5166 ms, max 852 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:19:35 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-07 02:19:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 35 seconds
Variants: generated 100, build-succeeded 9, build-failed 27, syntax-invalid 54, redundant 10
Fitness: max 0.991(8), min 0.931(1), ave 0.985
Test execution time: sum 5506 ms, max 943 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 02:19:50 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-07 02:20:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 49 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 55, redundant 13
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3554 ms, max 844 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 02:20:04 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-07 02:20:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 2 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 51, redundant 17
Fitness: max 0.991(4), min 0.914(1), ave 0.977
Test execution time: sum 3315 ms, max 773 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 02:20:17 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-07 02:20:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 17 seconds
Variants: generated 100, build-succeeded 7, build-failed 25, syntax-invalid 53, redundant 15
Fitness: max 1(1), min 0.983(3), ave 0.989
Test execution time: sum 3509 ms, max 718 ms, min 397 ms
----------------------------------------------------------------

2023-08-07 02:20:31 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-07 02:20:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 33 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 51, redundant 16
Fitness: max 0.991(6), min 0.836(1), ave 0.969
Test execution time: sum 4162 ms, max 1055 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 02:20:47 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-07 02:20:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 43 seconds
Variants: generated 100, build-succeeded 2, build-failed 31, syntax-invalid 54, redundant 13
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1633 ms, max 988 ms, min 645 ms
----------------------------------------------------------------

2023-08-07 02:20:58 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-07 02:21:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 56 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 56, redundant 14
Fitness: max 0.991(5), min 0.991(5), ave 0.991
Test execution time: sum 3578 ms, max 1054 ms, min 505 ms
----------------------------------------------------------------

2023-08-07 02:21:11 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-07 02:21:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 7 seconds
Variants: generated 100, build-succeeded 2, build-failed 27, syntax-invalid 55, redundant 16
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1014 ms, max 596 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:21:22 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-07 02:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 21 seconds
Variants: generated 100, build-succeeded 8, build-failed 30, syntax-invalid 53, redundant 9
Fitness: max 0.991(8), min 0.991(8), ave 0.991
Test execution time: sum 5064 ms, max 906 ms, min 416 ms
----------------------------------------------------------------

2023-08-07 02:21:36 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-07 02:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 33 seconds
Variants: generated 100, build-succeeded 4, build-failed 23, syntax-invalid 59, redundant 14
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 2633 ms, max 906 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 02:21:48 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-07 02:22:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 50 seconds
Variants: generated 100, build-succeeded 11, build-failed 21, syntax-invalid 51, redundant 17
Fitness: max 1(1), min 0.957(1), ave 0.984
Test execution time: sum 6854 ms, max 857 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 02:22:05 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-07 02:22:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 3 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 55, redundant 12
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 3874 ms, max 791 ms, min 514 ms
----------------------------------------------------------------

2023-08-07 02:22:18 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-07 02:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 13 seconds
Variants: generated 100, build-succeeded 1, build-failed 26, syntax-invalid 56, redundant 17
Fitness: max 0.966(1), min 0.966(1), ave 0.966
Test execution time: sum 494 ms, max 494 ms, min 494 ms
----------------------------------------------------------------

2023-08-07 02:22:27 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-07 02:22:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 26 seconds
Variants: generated 100, build-succeeded 7, build-failed 23, syntax-invalid 52, redundant 18
Fitness: max 0.991(4), min 0.957(2), ave 0.98
Test execution time: sum 4037 ms, max 939 ms, min 409 ms
----------------------------------------------------------------

2023-08-07 02:22:41 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-07 02:22:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 40 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 55, redundant 13
Fitness: max 1(3), min 0.991(3), ave 0.996
Test execution time: sum 4319 ms, max 997 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:22:55 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-07 02:23:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 52 seconds
Variants: generated 100, build-succeeded 2, build-failed 27, syntax-invalid 57, redundant 14
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1523 ms, max 930 ms, min 593 ms
----------------------------------------------------------------

2023-08-07 02:23:07 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-07 02:23:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 4 seconds
Variants: generated 100, build-succeeded 4, build-failed 23, syntax-invalid 55, redundant 18
Fitness: max 1(1), min 0.983(2), ave 0.989
Test execution time: sum 3166 ms, max 1009 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 02:23:19 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-07 02:23:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 17 seconds
Variants: generated 100, build-succeeded 6, build-failed 28, syntax-invalid 54, redundant 12
Fitness: max 0.991(3), min 0.974(2), ave 0.984
Test execution time: sum 3725 ms, max 782 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 02:23:32 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-07 02:23:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 32 seconds
Variants: generated 100, build-succeeded 4, build-failed 28, syntax-invalid 52, redundant 16
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 2938 ms, max 912 ms, min 559 ms
----------------------------------------------------------------

2023-08-07 02:23:46 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-07 02:24:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 45 seconds
Variants: generated 100, build-succeeded 6, build-failed 22, syntax-invalid 52, redundant 20
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3506 ms, max 670 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:24:00 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-07 02:24:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 58 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 54, redundant 17
Fitness: max 0.991(3), min 0.983(1), ave 0.989
Test execution time: sum 2322 ms, max 654 ms, min 462 ms
----------------------------------------------------------------

2023-08-07 02:24:13 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-07 02:24:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 12 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 54, redundant 16
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 3092 ms, max 766 ms, min 406 ms
----------------------------------------------------------------

2023-08-07 02:24:27 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-07 02:24:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 27 seconds
Variants: generated 100, build-succeeded 7, build-failed 24, syntax-invalid 55, redundant 14
Fitness: max 0.991(6), min 0.931(1), ave 0.983
Test execution time: sum 4525 ms, max 866 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:24:42 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-07 02:24:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 42 seconds
Variants: generated 100, build-succeeded 4, build-failed 31, syntax-invalid 54, redundant 11
Fitness: max 0.991(2), min 0.914(1), ave 0.97
Test execution time: sum 2824 ms, max 996 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:24:56 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-07 02:25:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 57 seconds
Variants: generated 100, build-succeeded 8, build-failed 23, syntax-invalid 59, redundant 10
Fitness: max 0.991(7), min 0.966(1), ave 0.988
Test execution time: sum 4374 ms, max 782 ms, min 393 ms
----------------------------------------------------------------

2023-08-07 02:25:12 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-07 02:25:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 13 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 52, redundant 15
Fitness: max 0.991(3), min 0.966(2), ave 0.98
Test execution time: sum 3566 ms, max 674 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 02:25:27 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-07 02:25:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 28 seconds
Variants: generated 100, build-succeeded 8, build-failed 22, syntax-invalid 53, redundant 17
Fitness: max 0.991(4), min 0.871(1), ave 0.967
Test execution time: sum 4180 ms, max 659 ms, min 416 ms
----------------------------------------------------------------

2023-08-07 02:25:43 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-07 02:25:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 42 seconds
Variants: generated 100, build-succeeded 5, build-failed 24, syntax-invalid 55, redundant 16
Fitness: max 0.991(3), min 0.966(1), ave 0.984
Test execution time: sum 3478 ms, max 787 ms, min 463 ms
----------------------------------------------------------------

2023-08-07 02:25:57 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-07 02:26:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 57 seconds
Variants: generated 100, build-succeeded 5, build-failed 31, syntax-invalid 54, redundant 10
Fitness: max 0.991(3), min 0.957(1), ave 0.983
Test execution time: sum 2410 ms, max 634 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 02:26:12 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-07 02:26:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 13 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 51, redundant 12
Fitness: max 0.991(5), min 0.931(1), ave 0.979
Test execution time: sum 4383 ms, max 833 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 02:26:28 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-07 02:26:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 26 seconds
Variants: generated 100, build-succeeded 4, build-failed 29, syntax-invalid 53, redundant 14
Fitness: max 0.991(3), min 0.957(1), ave 0.983
Test execution time: sum 2557 ms, max 735 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 02:26:40 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-07 02:26:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 44 seconds
Variants: generated 100, build-succeeded 8, build-failed 26, syntax-invalid 53, redundant 13
Fitness: max 0.991(4), min 0.931(2), ave 0.97
Test execution time: sum 5484 ms, max 1169 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 02:26:59 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-07 02:27:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 59 seconds
Variants: generated 100, build-succeeded 7, build-failed 25, syntax-invalid 52, redundant 16
Fitness: max 0.991(4), min 0.966(1), ave 0.984
Test execution time: sum 4259 ms, max 782 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:27:14 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-07 02:27:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 13 seconds
Variants: generated 100, build-succeeded 4, build-failed 28, syntax-invalid 54, redundant 14
Fitness: max 0.991(3), min 0.966(1), ave 0.985
Test execution time: sum 2694 ms, max 781 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 02:27:28 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-07 02:27:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 27 seconds
Variants: generated 100, build-succeeded 5, build-failed 23, syntax-invalid 54, redundant 18
Fitness: max 1(1), min 0.983(2), ave 0.99
Test execution time: sum 3303 ms, max 857 ms, min 435 ms
----------------------------------------------------------------

2023-08-07 02:27:42 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-07 02:27:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 41 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 50, redundant 16
Fitness: max 1(1), min 0.991(4), ave 0.993
Test execution time: sum 3757 ms, max 899 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 02:27:56 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-07 02:28:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 56 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 54, redundant 14
Fitness: max 0.991(4), min 0.974(1), ave 0.988
Test execution time: sum 2846 ms, max 718 ms, min 419 ms
----------------------------------------------------------------

2023-08-07 02:28:11 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-07 02:28:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 9 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 55, redundant 16
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 2304 ms, max 669 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 02:28:24 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-07 02:28:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 24 seconds
Variants: generated 100, build-succeeded 6, build-failed 19, syntax-invalid 56, redundant 19
Fitness: max 1(1), min 0.991(5), ave 0.993
Test execution time: sum 3259 ms, max 811 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 02:28:38 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-07 02:28:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 40 seconds
Variants: generated 100, build-succeeded 9, build-failed 27, syntax-invalid 54, redundant 10
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 4858 ms, max 826 ms, min 397 ms
----------------------------------------------------------------

2023-08-07 02:28:55 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-07 02:29:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 55 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 54, redundant 13
Fitness: max 0.991(5), min 0.845(1), ave 0.967
Test execution time: sum 3244 ms, max 760 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 02:29:09 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-07 02:29:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 6 seconds
Variants: generated 100, build-succeeded 2, build-failed 19, syntax-invalid 58, redundant 21
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1167 ms, max 749 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:29:20 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-07 02:29:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 19 seconds
Variants: generated 100, build-succeeded 5, build-failed 20, syntax-invalid 53, redundant 22
Fitness: max 1(1), min 0.991(4), ave 0.993
Test execution time: sum 2713 ms, max 790 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 02:29:34 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-07 02:29:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 32 seconds
Variants: generated 100, build-succeeded 3, build-failed 22, syntax-invalid 50, redundant 25
Fitness: max 0.983(1), min 0.966(1), ave 0.974
Test execution time: sum 1782 ms, max 699 ms, min 541 ms
----------------------------------------------------------------

2023-08-07 02:29:47 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-07 02:30:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 46 seconds
Variants: generated 100, build-succeeded 2, build-failed 23, syntax-invalid 55, redundant 20
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1373 ms, max 936 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 02:30:01 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-07 02:30:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 59 seconds
Variants: generated 100, build-succeeded 3, build-failed 24, syntax-invalid 56, redundant 17
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1807 ms, max 694 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:30:14 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-07 02:30:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 12 seconds
Variants: generated 100, build-succeeded 4, build-failed 22, syntax-invalid 53, redundant 21
Fitness: max 0.991(3), min 0.957(1), ave 0.983
Test execution time: sum 2707 ms, max 886 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 02:30:27 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-07 02:30:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 26 seconds
Variants: generated 100, build-succeeded 4, build-failed 26, syntax-invalid 53, redundant 17
Fitness: max 1(1), min 0.991(3), ave 0.994
Test execution time: sum 1967 ms, max 584 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 02:30:41 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-07 02:30:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 38 seconds
Variants: generated 100, build-succeeded 4, build-failed 23, syntax-invalid 54, redundant 19
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 1812 ms, max 511 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 02:30:53 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-07 02:31:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 50 seconds
Variants: generated 100, build-succeeded 1, build-failed 28, syntax-invalid 54, redundant 17
Fitness: max 0.966(1), min 0.966(1), ave 0.966
Test execution time: sum 583 ms, max 583 ms, min 583 ms
----------------------------------------------------------------

2023-08-07 02:31:05 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-07 02:31:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 5 seconds
Variants: generated 100, build-succeeded 8, build-failed 18, syntax-invalid 57, redundant 17
Fitness: max 0.991(5), min 0.845(1), ave 0.971
Test execution time: sum 4391 ms, max 874 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 02:31:19 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-07 02:31:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 18 seconds
Variants: generated 100, build-succeeded 5, build-failed 26, syntax-invalid 55, redundant 14
Fitness: max 0.991(3), min 0.974(1), ave 0.986
Test execution time: sum 2581 ms, max 666 ms, min 367 ms
----------------------------------------------------------------

2023-08-07 02:31:33 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-07 02:31:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 34 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 54, redundant 13
Fitness: max 0.991(5), min 0.931(1), ave 0.979
Test execution time: sum 4258 ms, max 738 ms, min 426 ms
----------------------------------------------------------------

2023-08-07 02:31:49 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-07 02:32:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 48 seconds
Variants: generated 100, build-succeeded 4, build-failed 26, syntax-invalid 57, redundant 13
Fitness: max 1(1), min 0.991(3), ave 0.994
Test execution time: sum 2449 ms, max 803 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 02:32:03 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-07 02:32:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 0 seconds
Variants: generated 100, build-succeeded 4, build-failed 29, syntax-invalid 55, redundant 12
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 2178 ms, max 772 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 02:32:15 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-07 02:32:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 14 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 53, redundant 18
Fitness: max 1(1), min 0.991(2), ave 0.994
Test execution time: sum 2143 ms, max 914 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 02:32:28 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-07 02:32:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 24 seconds
Variants: generated 100, build-succeeded 2, build-failed 28, syntax-invalid 53, redundant 17
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 870 ms, max 477 ms, min 393 ms
----------------------------------------------------------------

2023-08-07 02:32:39 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-07 02:32:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 38 seconds
Variants: generated 100, build-succeeded 3, build-failed 23, syntax-invalid 58, redundant 16
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 1603 ms, max 690 ms, min 450 ms
----------------------------------------------------------------

2023-08-07 02:32:52 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-07 02:33:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 54 seconds
Variants: generated 100, build-succeeded 6, build-failed 30, syntax-invalid 55, redundant 9
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 3455 ms, max 759 ms, min 406 ms
----------------------------------------------------------------

2023-08-07 02:33:09 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-07 02:33:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 8 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 51, redundant 20
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1927 ms, max 774 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 02:33:23 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-07 02:33:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 21 seconds
Variants: generated 100, build-succeeded 4, build-failed 29, syntax-invalid 51, redundant 16
Fitness: max 0.991(3), min 0.966(1), ave 0.985
Test execution time: sum 2124 ms, max 795 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 02:33:36 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-07 02:33:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 35 seconds
Variants: generated 100, build-succeeded 5, build-failed 24, syntax-invalid 54, redundant 17
Fitness: max 0.991(3), min 0.836(1), ave 0.955
Test execution time: sum 2623 ms, max 690 ms, min 398 ms
----------------------------------------------------------------

2023-08-07 02:33:50 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-07 02:34:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 50 seconds
Variants: generated 100, build-succeeded 7, build-failed 23, syntax-invalid 54, redundant 16
Fitness: max 1(1), min 0.836(1), ave 0.957
Test execution time: sum 3981 ms, max 776 ms, min 435 ms
----------------------------------------------------------------

2023-08-07 02:34:05 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-07 02:34:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 3 seconds
Variants: generated 100, build-succeeded 3, build-failed 24, syntax-invalid 54, redundant 19
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1764 ms, max 643 ms, min 524 ms
----------------------------------------------------------------

2023-08-07 02:34:18 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-07 02:34:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 16 seconds
Variants: generated 100, build-succeeded 3, build-failed 27, syntax-invalid 58, redundant 12
Fitness: max 0.991(2), min 0.974(1), ave 0.986
Test execution time: sum 1972 ms, max 830 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 02:34:31 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-07 02:34:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 31 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 57, redundant 9
Fitness: max 1(2), min 0.991(3), ave 0.995
Test execution time: sum 3160 ms, max 910 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:34:46 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-07 02:35:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 46 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 55, redundant 16
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3570 ms, max 809 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 02:35:01 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-07 02:35:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 0 seconds
Variants: generated 100, build-succeeded 5, build-failed 28, syntax-invalid 54, redundant 13
Fitness: max 0.991(3), min 0.931(1), ave 0.974
Test execution time: sum 2896 ms, max 771 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 02:35:15 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-07 02:35:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 13 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 57, redundant 14
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1909 ms, max 760 ms, min 447 ms
----------------------------------------------------------------

2023-08-07 02:35:28 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-07 02:35:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 27 seconds
Variants: generated 100, build-succeeded 3, build-failed 27, syntax-invalid 60, redundant 10
Fitness: max 0.991(2), min 0.983(1), ave 0.989
Test execution time: sum 1424 ms, max 627 ms, min 396 ms
----------------------------------------------------------------

2023-08-07 02:35:42 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-07 02:35:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 40 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 54, redundant 14
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 2614 ms, max 752 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 02:35:54 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-07 02:36:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 56 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 53, redundant 14
Fitness: max 1(2), min 0.991(4), ave 0.994
Test execution time: sum 4465 ms, max 885 ms, min 625 ms
----------------------------------------------------------------

2023-08-07 02:36:11 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-07 02:36:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 11 seconds
Variants: generated 100, build-succeeded 5, build-failed 32, syntax-invalid 52, redundant 11
Fitness: max 0.991(3), min 0.966(1), ave 0.984
Test execution time: sum 2801 ms, max 789 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 02:36:26 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-07 02:36:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 27 seconds
Variants: generated 100, build-succeeded 7, build-failed 20, syntax-invalid 56, redundant 17
Fitness: max 0.991(3), min 0.966(1), ave 0.984
Test execution time: sum 4068 ms, max 780 ms, min 416 ms
----------------------------------------------------------------

2023-08-07 02:36:41 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-07 02:36:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 43 seconds
Variants: generated 100, build-succeeded 8, build-failed 25, syntax-invalid 51, redundant 16
Fitness: max 0.991(8), min 0.991(8), ave 0.991
Test execution time: sum 4448 ms, max 736 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 02:36:58 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-07 02:37:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 58 seconds
Variants: generated 100, build-succeeded 4, build-failed 26, syntax-invalid 54, redundant 16
Fitness: max 1(1), min 0.948(1), ave 0.976
Test execution time: sum 2386 ms, max 760 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 02:37:12 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-07 02:37:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 11 seconds
Variants: generated 100, build-succeeded 3, build-failed 32, syntax-invalid 57, redundant 8
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 1623 ms, max 622 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 02:37:26 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-07 02:37:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 27 seconds
Variants: generated 100, build-succeeded 6, build-failed 33, syntax-invalid 54, redundant 7
Fitness: max 0.991(3), min 0.966(1), ave 0.984
Test execution time: sum 3150 ms, max 753 ms, min 398 ms
----------------------------------------------------------------

2023-08-07 02:37:42 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-07 02:37:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 40 seconds
Variants: generated 100, build-succeeded 5, build-failed 26, syntax-invalid 56, redundant 13
Fitness: max 1(1), min 0.974(1), ave 0.986
Test execution time: sum 2758 ms, max 666 ms, min 395 ms
----------------------------------------------------------------

2023-08-07 02:37:55 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-07 02:38:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 54 seconds
Variants: generated 100, build-succeeded 3, build-failed 35, syntax-invalid 52, redundant 10
Fitness: max 0.991(2), min 0.983(1), ave 0.989
Test execution time: sum 1950 ms, max 687 ms, min 630 ms
----------------------------------------------------------------

2023-08-07 02:38:08 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-07 02:38:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 6 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 54, redundant 15
Fitness: max 1(1), min 0.845(1), ave 0.946
Test execution time: sum 2144 ms, max 790 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 02:38:21 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-07 02:38:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 21 seconds
Variants: generated 100, build-succeeded 5, build-failed 28, syntax-invalid 52, redundant 15
Fitness: max 0.991(2), min 0.966(2), ave 0.978
Test execution time: sum 2998 ms, max 685 ms, min 479 ms
----------------------------------------------------------------

2023-08-07 02:38:36 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-07 02:38:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 33 seconds
Variants: generated 100, build-succeeded 2, build-failed 28, syntax-invalid 54, redundant 16
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 951 ms, max 481 ms, min 470 ms
----------------------------------------------------------------

2023-08-07 02:38:48 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-07 02:39:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 47 seconds
Variants: generated 100, build-succeeded 3, build-failed 32, syntax-invalid 54, redundant 11
Fitness: max 0.983(1), min 0.853(1), ave 0.911
Test execution time: sum 1687 ms, max 613 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 02:39:01 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-07 02:39:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 6 seconds
Variants: generated 100, build-succeeded 8, build-failed 23, syntax-invalid 56, redundant 13
Fitness: max 0.991(6), min 0.845(1), ave 0.972
Test execution time: sum 5330 ms, max 846 ms, min 405 ms
----------------------------------------------------------------

2023-08-07 02:39:20 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-07 02:39:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 22 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 54, redundant 15
Fitness: max 0.991(2), min 0.914(1), ave 0.963
Test execution time: sum 2547 ms, max 849 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 02:39:37 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-07 02:39:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 35 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 53, redundant 18
Fitness: max 0.991(3), min 0.94(1), ave 0.978
Test execution time: sum 2279 ms, max 816 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 02:39:49 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-07 02:40:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 50 seconds
Variants: generated 100, build-succeeded 8, build-failed 28, syntax-invalid 56, redundant 8
Fitness: max 0.991(3), min 0.836(1), ave 0.957
Test execution time: sum 4690 ms, max 737 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 02:40:05 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-07 02:40:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 seconds
Variants: generated 100, build-succeeded 3, build-failed 29, syntax-invalid 52, redundant 16
Fitness: max 0.991(2), min 0.983(1), ave 0.989
Test execution time: sum 2209 ms, max 927 ms, min 450 ms
----------------------------------------------------------------

2023-08-07 02:40:19 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-07 02:40:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 54, redundant 16
Fitness: max 0.991(3), min 0.966(2), ave 0.981
Test execution time: sum 2514 ms, max 729 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 02:40:32 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-07 02:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 seconds
Variants: generated 100, build-succeeded 2, build-failed 36, syntax-invalid 54, redundant 8
Fitness: max 0.991(1), min 0.983(1), ave 0.987
Test execution time: sum 1074 ms, max 648 ms, min 426 ms
----------------------------------------------------------------

2023-08-07 02:40:45 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-07 02:40:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 seconds
Variants: generated 100, build-succeeded 3, build-failed 24, syntax-invalid 61, redundant 12
Fitness: max 0.991(2), min 0.983(1), ave 0.989
Test execution time: sum 1800 ms, max 869 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 02:40:58 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-07 02:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 52, redundant 16
Fitness: max 0.991(4), min 0.957(1), ave 0.984
Test execution time: sum 2541 ms, max 732 ms, min 392 ms
----------------------------------------------------------------

2023-08-07 02:41:11 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-07 02:41:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 11 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 56, redundant 10
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 3334 ms, max 881 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 02:41:26 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-07 02:41:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 28 seconds
Variants: generated 100, build-succeeded 9, build-failed 25, syntax-invalid 53, redundant 13
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 5404 ms, max 776 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 02:41:42 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-07 02:41:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 44 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 55, redundant 9
Fitness: max 0.991(5), min 0.966(1), ave 0.985
Test execution time: sum 3915 ms, max 827 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:41:59 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-07 02:42:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 1 seconds
Variants: generated 100, build-succeeded 10, build-failed 27, syntax-invalid 53, redundant 10
Fitness: max 0.991(9), min 0.966(1), ave 0.989
Test execution time: sum 5299 ms, max 761 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 02:42:16 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-07 02:42:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 15 seconds
Variants: generated 100, build-succeeded 3, build-failed 24, syntax-invalid 55, redundant 18
Fitness: max 0.991(2), min 0.931(1), ave 0.971
Test execution time: sum 1662 ms, max 609 ms, min 526 ms
----------------------------------------------------------------

2023-08-07 02:42:30 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-07 02:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 32 seconds
Variants: generated 100, build-succeeded 9, build-failed 25, syntax-invalid 55, redundant 11
Fitness: max 1(2), min 0.957(1), ave 0.987
Test execution time: sum 5106 ms, max 748 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 02:42:47 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-07 02:43:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 47 seconds
Variants: generated 100, build-succeeded 2, build-failed 33, syntax-invalid 52, redundant 13
Fitness: max 0.991(1), min 0.983(1), ave 0.987
Test execution time: sum 1627 ms, max 870 ms, min 757 ms
----------------------------------------------------------------

2023-08-07 02:43:01 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-07 02:43:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 2 seconds
Variants: generated 100, build-succeeded 5, build-failed 24, syntax-invalid 55, redundant 16
Fitness: max 0.991(4), min 0.966(1), ave 0.986
Test execution time: sum 2736 ms, max 759 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 02:43:16 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-07 02:43:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 17 seconds
Variants: generated 100, build-succeeded 6, build-failed 25, syntax-invalid 55, redundant 14
Fitness: max 0.991(5), min 0.983(1), ave 0.99
Test execution time: sum 3241 ms, max 879 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 02:43:32 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-07 02:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 31 seconds
Variants: generated 100, build-succeeded 4, build-failed 22, syntax-invalid 56, redundant 18
Fitness: max 0.991(3), min 0.974(1), ave 0.987
Test execution time: sum 2014 ms, max 774 ms, min 395 ms
----------------------------------------------------------------

2023-08-07 02:43:46 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-07 02:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 46 seconds
Variants: generated 100, build-succeeded 4, build-failed 34, syntax-invalid 54, redundant 8
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 1932 ms, max 666 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 02:44:01 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-07 02:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 0 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 51, redundant 17
Fitness: max 1(2), min 0.966(1), ave 0.988
Test execution time: sum 2407 ms, max 674 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 02:44:15 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-07 02:44:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 19 seconds
Variants: generated 100, build-succeeded 10, build-failed 23, syntax-invalid 52, redundant 15
Fitness: max 0.991(8), min 0.966(2), ave 0.986
Test execution time: sum 5705 ms, max 742 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 02:44:34 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-07 02:44:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 37 seconds
Variants: generated 100, build-succeeded 9, build-failed 22, syntax-invalid 52, redundant 17
Fitness: max 1(3), min 0.957(1), ave 0.989
Test execution time: sum 4417 ms, max 731 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 02:44:52 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-07 02:45:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 56 seconds
Variants: generated 100, build-succeeded 9, build-failed 30, syntax-invalid 53, redundant 8
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 5158 ms, max 807 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 02:45:11 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-07 02:45:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 15 seconds
Variants: generated 100, build-succeeded 11, build-failed 25, syntax-invalid 53, redundant 11
Fitness: max 0.991(10), min 0.836(1), ave 0.977
Test execution time: sum 6049 ms, max 805 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 02:45:30 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-07 02:45:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 35 seconds
Variants: generated 100, build-succeeded 9, build-failed 23, syntax-invalid 53, redundant 15
Fitness: max 0.991(6), min 0.836(1), ave 0.972
Test execution time: sum 6184 ms, max 979 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 02:45:50 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-07 02:46:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 57 seconds
Variants: generated 100, build-succeeded 13, build-failed 22, syntax-invalid 52, redundant 13
Fitness: max 0.991(12), min 0.983(1), ave 0.991
Test execution time: sum 7522 ms, max 856 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:46:12 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-07 02:46:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 15 seconds
Variants: generated 100, build-succeeded 5, build-failed 30, syntax-invalid 55, redundant 10
Fitness: max 0.991(5), min 0.991(5), ave 0.991
Test execution time: sum 2770 ms, max 715 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 02:46:30 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-07 02:46:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 32 seconds
Variants: generated 100, build-succeeded 4, build-failed 30, syntax-invalid 53, redundant 13
Fitness: max 1(1), min 0.991(3), ave 0.994
Test execution time: sum 2439 ms, max 794 ms, min 457 ms
----------------------------------------------------------------

2023-08-07 02:46:46 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-07 02:47:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 47 seconds
Variants: generated 100, build-succeeded 2, build-failed 35, syntax-invalid 55, redundant 8
Fitness: max 0.991(1), min 0.974(1), ave 0.983
Test execution time: sum 977 ms, max 556 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 02:47:02 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-08-07 02:47:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 7 seconds
Variants: generated 100, build-succeeded 8, build-failed 31, syntax-invalid 53, redundant 8
Fitness: max 0.991(6), min 0.974(1), ave 0.988
Test execution time: sum 4389 ms, max 771 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 02:47:21 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-08-07 02:47:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 25 seconds
Variants: generated 100, build-succeeded 7, build-failed 32, syntax-invalid 53, redundant 8
Fitness: max 0.991(5), min 0.983(2), ave 0.989
Test execution time: sum 3979 ms, max 812 ms, min 403 ms
----------------------------------------------------------------

2023-08-07 02:47:40 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-08-07 02:47:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 42 seconds
Variants: generated 100, build-succeeded 5, build-failed 21, syntax-invalid 55, redundant 19
Fitness: max 0.991(4), min 0.974(1), ave 0.988
Test execution time: sum 2991 ms, max 840 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 02:47:57 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-08-07 02:48:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 0 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 51, redundant 12
Fitness: max 0.991(6), min 0.974(1), ave 0.989
Test execution time: sum 3837 ms, max 833 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 02:48:15 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-08-07 02:48:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 21 seconds
Variants: generated 100, build-succeeded 10, build-failed 29, syntax-invalid 50, redundant 11
Fitness: max 1(2), min 0.991(8), ave 0.993
Test execution time: sum 5715 ms, max 683 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 02:48:36 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-08-07 02:48:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 33 seconds
Variants: generated 30, build-succeeded 7, build-failed 10, syntax-invalid 6, redundant 7
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 3861 ms, max 790 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 02:48:48 [main] [INFO]  KGenProgMain - GA stopped
2023-08-07 02:48:55 [main] [INFO]  PatchLogExporter - patch (v51)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:55 [main] [INFO]  PatchLogExporter - patch (v51)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:55 [main] [INFO]  PatchLogExporter - patch (v51)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:55 [main] [INFO]  PatchLogExporter - patch (v51)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:55 [main] [INFO]  PatchLogExporter - patch (v51)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:55 [main] [INFO]  PatchLogExporter - patch (v51)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v226)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v226)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v226)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v226)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v226)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v226)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v419)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v419)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v419)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v419)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v649)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v930)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v930)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v930)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v930)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v949)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v949)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v949)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v949)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1475)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1475)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1475)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1475)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1475)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1475)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1529)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1529)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1529)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1529)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1529)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +908,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1529)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1665)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1665)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1665)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1665)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1665)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1665)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1803)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1803)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1803)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1803)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1803)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1803)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1842)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1842)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1842)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1842)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1842)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1842)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1931)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1931)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1931)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1931)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1931)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v1931)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2106)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2106)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2106)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2106)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2219)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2219)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2219)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2219)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2219)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2219)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2232)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2338)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2338)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2338)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2338)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2338)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2338)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2547)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2547)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2547)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2547)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2547)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:56 [main] [INFO]  PatchLogExporter - patch (v2547)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2626)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2626)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2626)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2626)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2626)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2626)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2745)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2745)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2745)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2745)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2745)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2745)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2821)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2821)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2821)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2821)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v2821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			MathUtils.checkNotNull(divisor);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3206)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3516)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3516)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3516)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3516)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3516)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v3516)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4021)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4021)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4021)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4021)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4805)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4805)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4805)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4805)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v4805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5002)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5039)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5039)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5039)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5039)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5039)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5039)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5134)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5134)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5134)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5134)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5134)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5134)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5184)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5184)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5184)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5184)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5184)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v5184)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6082)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6082)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6082)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6082)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6082)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +293,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +913,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6082)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v6606)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:57 [main] [INFO]  PatchLogExporter - patch (v7830)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -983,7 +981,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8847)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8847)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8847)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8847)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8847)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +908,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v8847)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9040)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +980,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9231)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -250,14 +251,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +292,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9603)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2911,7 +2910,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +257,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,6 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9779)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +289,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2952,7 +2952,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,6 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9781)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,10 +292,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +981,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,6 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +908,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2911,7 +2910,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v9947)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10338)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +908,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2911,9 +2910,8 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
-        yb = yb * epsA2 + 0.11111095942313305;
+        final double sintA = SINE_TABLE_A[idx];
         yb = yb * epsA2 + -0.1428571423679182;
         yb = yb * epsA2 + 0.19999999999923582;
         yb = yb * epsA2 + -0.33333333333333287;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10613)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +980,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2911,7 +2910,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
@@ -3073,6 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10829)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +288,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:58 [main] [INFO]  PatchLogExporter - patch (v10836)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -3073,6 +3073,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11004)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +980,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2911,7 +2911,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
@@ -2947,7 +2946,6 @@
             final double pia = 1.5707963267948966*2.0;
             final double pib = 6.123233995736766E-17*2.0;
 
-            za = pia - result;
             zb = -(za - pia + result);
             zb += pib - resultb;
 
@@ -3073,6 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
+		double logSum = 0;
         rb = -(temp - ra - rb);
         ra = temp;
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,10 +292,10 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +257,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +265,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +294,15 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -983,7 +986,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,6 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v11710)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -250,14 +251,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +288,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2952,7 +2952,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12046)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v12941)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +288,15 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +983,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13432)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +257,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +265,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +294,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -983,7 +984,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,6 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +981,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +288,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +913,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14806)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,9 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            double q = imaginary / real;
+			double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +258,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +266,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +295,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -983,7 +986,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,6 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v14945)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,10 +292,10 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,6 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15041)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +288,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +913,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15312)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +257,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +265,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +294,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -983,7 +984,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,6 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:48:59 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -98,6 +98,7 @@
      */
     public Complex(double real, double imaginary) {
         this.real = real;
+		double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         this.imaginary = imaginary;
 
         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
@@ -256,8 +257,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +289,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16206)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -98,6 +98,7 @@
      */
     public Complex(double real, double imaginary) {
         this.real = real;
+		double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         this.imaginary = imaginary;
 
         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
@@ -256,8 +257,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +289,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +983,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16332)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -98,6 +98,7 @@
      */
     public Complex(double real, double imaginary) {
         this.real = real;
+		double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         this.imaginary = imaginary;
 
         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
@@ -256,8 +257,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +289,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +983,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v16723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17446)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,20 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +913,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -98,6 +98,7 @@
      */
     public Complex(double real, double imaginary) {
         this.real = real;
+		double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         this.imaginary = imaginary;
 
         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
@@ -256,8 +257,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,14 +289,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
@@ -983,7 +983,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17541)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3154,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3235,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17818)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +912,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -3073,7 +3072,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3155,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v17826)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v18035)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v19942)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:00 [main] [INFO]  PatchLogExporter - patch (v20612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21143)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3154,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3235,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21744)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v21944)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3154,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3235,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -2067,7 +2058,6 @@
 
         t = costA * sinEpsA;
         c = a + t;
-        d = -(c - a - t);
         a = c;
         b = b + d;
 
@@ -3073,7 +3063,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3146,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22912)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3154,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3235,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23502)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3154,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3235,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +908,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24232)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v24427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -917,8 +908,6 @@
         double za = epsilon;
         double temp = za + zb;
         zb = -(temp - za - zb);
-        za = temp;
-
         temp = za * HEX_40000000;
         temp = za + temp - temp;
         zb += za - temp;
@@ -2067,7 +2056,6 @@
 
         t = costA * sinEpsA;
         c = a + t;
-        d = -(c - a - t);
         a = c;
         b = b + d;
 
@@ -2926,9 +2914,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -3073,7 +3058,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3141,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v25837)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -917,8 +908,6 @@
         double za = epsilon;
         double temp = za + zb;
         zb = -(temp - za - zb);
-        za = temp;
-
         temp = za * HEX_40000000;
         temp = za + temp - temp;
         zb += za - temp;
@@ -2067,7 +2056,6 @@
 
         t = costA * sinEpsA;
         c = a + t;
-        d = -(c - a - t);
         a = c;
         b = b + d;
 
@@ -2911,7 +2899,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
@@ -3073,7 +3060,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3143,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26203)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -917,8 +908,6 @@
         double za = epsilon;
         double temp = za + zb;
         zb = -(temp - za - zb);
-        za = temp;
-
         temp = za * HEX_40000000;
         temp = za + temp - temp;
         zb += za - temp;
@@ -2067,7 +2056,6 @@
 
         t = costA * sinEpsA;
         c = a + t;
-        d = -(c - a - t);
         a = c;
         b = b + d;
 
@@ -3073,7 +3061,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3144,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,7 +908,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double imaginary2 = 2.0 * imaginary;
+		StringBuffer imAppendTo = new StringBuffer();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v26813)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			int sign = 0;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2935,7 +2934,6 @@
         //result = yb + eighths[idx] + ya;
         double za = EIGHTHS[idx] + ya;
         double zb = -(za - EIGHTHS[idx] - ya);
-        temp = za + yb;
         zb += -(temp - za - yb);
         za = temp;
 
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27004)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		StringBuffer imAppendTo = new StringBuffer();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27006)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2935,7 +2934,6 @@
         //result = yb + eighths[idx] + ya;
         double za = EIGHTHS[idx] + ya;
         double zb = -(za - EIGHTHS[idx] - ya);
-        temp = za + yb;
         zb += -(temp - za - yb);
         za = temp;
 
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27011)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		StringBuffer imAppendTo = new StringBuffer();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +910,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -1472,7 +1463,6 @@
         b = b + d;
 
         c = a + lnzb;
-        d = -(c - a - lnzb);
         a = c;
         b = b + d;
 
@@ -3073,7 +3063,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3146,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27147)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,19 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		StringBuffer imAppendTo = new StringBuffer();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,7 +911,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -749,15 +748,7 @@
                 return 0.0;
             }
 
-            if (intVal > 709) {
-                /* This will produce a subnormal output */
-                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 285040095144011776.0;
-                    hiPrec[1] /= 285040095144011776.0;
-                }
-                return result;
-            }
+            if (intVal > 709)
 
             if (intVal == 709) {
                 /* exp(1.494140625) is nearly a machine number... */
@@ -3073,7 +3064,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3147,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v27647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,18 +250,15 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
-            return ZERO;
+            return Complex.ZERO;
         }
 
         final double c = divisor.getReal();
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2935,7 +2934,6 @@
         //result = yb + eighths[idx] + ya;
         double za = EIGHTHS[idx] + ya;
         double zb = -(za - EIGHTHS[idx] - ya);
-        temp = za + yb;
         zb += -(temp - za - yb);
         za = temp;
 
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28202)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,18 +250,15 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
-            return ZERO;
+            return Complex.ZERO;
         }
 
         final double c = divisor.getReal();
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2935,7 +2934,6 @@
         //result = yb + eighths[idx] + ya;
         double za = EIGHTHS[idx] + ya;
         double zb = -(za - EIGHTHS[idx] - ya);
-        temp = za + yb;
         zb += -(temp - za - yb);
         za = temp;
 
@@ -2952,7 +2950,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3070,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3153,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3234,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:01 [main] [INFO]  PatchLogExporter - patch (v28207)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -460,7 +460,6 @@
       }
 
       if (negate) {
-          result = -result;
       }
 
       return result;
@@ -1427,7 +1426,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -2599,7 +2597,8 @@
 
         switch (quadrant) {
             case 0:
-                return sinQ(xa, xb);
+			double temps[] = new double[2];
+			return sinQ(xa, xb);
             case 1:
                 return cosQ(xa, xb);
             case 2:
@@ -2952,7 +2951,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
@@ -3073,7 +3071,7 @@
         rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
 
         double temp = ra + rb;
-        rb = -(temp - ra - rb);
+		double logSum = 0;
         ra = temp;
 
         if (ra == 0) { // Fix up the sign so atan works correctly
@@ -3156,7 +3154,6 @@
       rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, false);
@@ -3238,7 +3235,6 @@
       rb += yb / x;  // Add in effect additional bits of sqrt.
 
       temp = ra + rb;
-      rb = -(temp - ra - rb);
       ra = temp;
 
       return atan(ra, rb, x<0);
2023-08-07 02:49:02 [main] [INFO]  PatchLogExporter - patch (v28330)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 02:49:02 [main] [INFO]  KGenProgMain - Summary
Reached generation = 285
Generated variants = 28330
Syntax valid variants = 14903
Build succeeded variants = 2838
Time elapsed = 1 hours 8 minutes 47 seconds
Exit status = SUCCESS
