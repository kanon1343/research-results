2023-08-06 22:41:36 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 22:41:36 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 22:41:36 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 22:41:37 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math46/kgenprog-46.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math46 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.complex.ComplexTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 1 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-06 22:41:57 [main] [INFO]  KGenProgMain - initial failed tests (2/116)
org.apache.commons.math.complex.ComplexTest.testDivideZero: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
org.apache.commons.math.complex.ComplexTest.testAtanI: null

2023-08-06 22:41:58 [main] [INFO]  KGenProgMain - GA started
2023-08-06 22:41:58 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 22:42:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 50, build-succeeded 4, build-failed 30, syntax-invalid 3, redundant 13
Fitness: max 0.991(3), min 0.966(1), ave 0.985
Test execution time: sum 3589 ms, max 1125 ms, min 671 ms
----------------------------------------------------------------

2023-08-06 22:42:06 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 22:42:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 50, build-succeeded 8, build-failed 30, syntax-invalid 3, redundant 9
Fitness: max 1(1), min 0.966(3), ave 0.983
Test execution time: sum 4834 ms, max 972 ms, min 438 ms
----------------------------------------------------------------

2023-08-06 22:42:15 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 22:42:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 seconds
Variants: generated 100, build-succeeded 16, build-failed 25, syntax-invalid 9, redundant 50
Fitness: max 1(1), min 0.914(1), ave 0.98
Test execution time: sum 8582 ms, max 694 ms, min 432 ms
----------------------------------------------------------------

2023-08-06 22:42:29 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 22:42:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 seconds
Variants: generated 100, build-succeeded 15, build-failed 37, syntax-invalid 2, redundant 46
Fitness: max 0.991(10), min 0.931(1), ave 0.982
Test execution time: sum 7475 ms, max 808 ms, min 417 ms
----------------------------------------------------------------

2023-08-06 22:42:42 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 22:42:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 seconds
Variants: generated 100, build-succeeded 12, build-failed 25, syntax-invalid 11, redundant 52
Fitness: max 0.991(10), min 0.966(1), ave 0.989
Test execution time: sum 6071 ms, max 610 ms, min 433 ms
----------------------------------------------------------------

2023-08-06 22:42:52 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 22:43:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 6 seconds
Variants: generated 100, build-succeeded 17, build-failed 34, syntax-invalid 10, redundant 39
Fitness: max 0.991(13), min 0.966(2), ave 0.987
Test execution time: sum 7764 ms, max 556 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 22:43:05 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 22:43:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 19 seconds
Variants: generated 100, build-succeeded 20, build-failed 24, syntax-invalid 14, redundant 42
Fitness: max 1(1), min 0.966(3), ave 0.987
Test execution time: sum 9049 ms, max 487 ms, min 425 ms
----------------------------------------------------------------

2023-08-06 22:43:18 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 22:43:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 38 seconds
Variants: generated 100, build-succeeded 32, build-failed 20, syntax-invalid 15, redundant 33
Fitness: max 1(1), min 0.966(4), ave 0.987
Test execution time: sum 14642 ms, max 784 ms, min 393 ms
----------------------------------------------------------------

2023-08-06 22:43:36 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 22:44:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 1 seconds
Variants: generated 100, build-succeeded 34, build-failed 23, syntax-invalid 12, redundant 31
Fitness: max 1(1), min 0.922(1), ave 0.98
Test execution time: sum 19238 ms, max 948 ms, min 391 ms
----------------------------------------------------------------

2023-08-06 22:44:00 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 22:44:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 22 seconds
Variants: generated 100, build-succeeded 29, build-failed 26, syntax-invalid 24, redundant 21
Fitness: max 1(1), min 0.966(3), ave 0.988
Test execution time: sum 14913 ms, max 893 ms, min 418 ms
----------------------------------------------------------------

2023-08-06 22:44:21 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 22:44:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 36 seconds
Variants: generated 100, build-succeeded 20, build-failed 32, syntax-invalid 17, redundant 31
Fitness: max 1(1), min 0.966(3), ave 0.988
Test execution time: sum 9418 ms, max 700 ms, min 408 ms
----------------------------------------------------------------

2023-08-06 22:44:34 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 22:44:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 49 seconds
Variants: generated 100, build-succeeded 20, build-failed 23, syntax-invalid 25, redundant 32
Fitness: max 0.991(18), min 0.966(2), ave 0.989
Test execution time: sum 8949 ms, max 486 ms, min 404 ms
----------------------------------------------------------------

2023-08-06 22:44:47 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 22:45:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 8 seconds
Variants: generated 100, build-succeeded 34, build-failed 28, syntax-invalid 14, redundant 24
Fitness: max 0.991(19), min 0.966(6), ave 0.985
Test execution time: sum 15107 ms, max 526 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 22:45:07 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 22:45:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 25 seconds
Variants: generated 100, build-succeeded 27, build-failed 26, syntax-invalid 22, redundant 25
Fitness: max 1(1), min 0.957(1), ave 0.988
Test execution time: sum 12118 ms, max 521 ms, min 417 ms
----------------------------------------------------------------

2023-08-06 22:45:23 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 22:45:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 41 seconds
Variants: generated 100, build-succeeded 21, build-failed 33, syntax-invalid 23, redundant 23
Fitness: max 0.991(15), min 0.966(3), ave 0.986
Test execution time: sum 11073 ms, max 929 ms, min 404 ms
----------------------------------------------------------------

2023-08-06 22:45:40 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 22:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 4 seconds
Variants: generated 100, build-succeeded 33, build-failed 35, syntax-invalid 22, redundant 10
Fitness: max 0.991(24), min 0.957(1), ave 0.988
Test execution time: sum 16907 ms, max 812 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 22:46:02 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 22:46:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 26 seconds
Variants: generated 100, build-succeeded 30, build-failed 32, syntax-invalid 20, redundant 18
Fitness: max 0.991(20), min 0.948(1), ave 0.985
Test execution time: sum 16810 ms, max 860 ms, min 418 ms
----------------------------------------------------------------

2023-08-06 22:46:24 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 22:46:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 48 seconds
Variants: generated 100, build-succeeded 34, build-failed 33, syntax-invalid 19, redundant 14
Fitness: max 0.991(25), min 0.966(1), ave 0.989
Test execution time: sum 17893 ms, max 769 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 22:46:47 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 22:47:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 6 seconds
Variants: generated 100, build-succeeded 22, build-failed 29, syntax-invalid 25, redundant 24
Fitness: max 0.991(16), min 0.957(1), ave 0.987
Test execution time: sum 12289 ms, max 791 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 22:47:05 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 22:47:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 31 seconds
Variants: generated 100, build-succeeded 32, build-failed 30, syntax-invalid 27, redundant 11
Fitness: max 0.991(22), min 0.948(1), ave 0.985
Test execution time: sum 17936 ms, max 885 ms, min 388 ms
----------------------------------------------------------------

2023-08-06 22:47:29 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 22:47:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 54 seconds
Variants: generated 100, build-succeeded 32, build-failed 33, syntax-invalid 23, redundant 12
Fitness: max 1(1), min 0.957(1), ave 0.988
Test execution time: sum 17701 ms, max 836 ms, min 407 ms
----------------------------------------------------------------

2023-08-06 22:47:53 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 22:48:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 16 seconds
Variants: generated 100, build-succeeded 29, build-failed 24, syntax-invalid 32, redundant 15
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 16098 ms, max 801 ms, min 413 ms
----------------------------------------------------------------

2023-08-06 22:48:15 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-06 22:48:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 38 seconds
Variants: generated 100, build-succeeded 28, build-failed 26, syntax-invalid 25, redundant 21
Fitness: max 1(1), min 0.957(3), ave 0.987
Test execution time: sum 16744 ms, max 887 ms, min 391 ms
----------------------------------------------------------------

2023-08-06 22:48:37 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-06 22:48:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 59 seconds
Variants: generated 100, build-succeeded 25, build-failed 28, syntax-invalid 32, redundant 15
Fitness: max 0.991(18), min 0.966(2), ave 0.988
Test execution time: sum 14370 ms, max 780 ms, min 426 ms
----------------------------------------------------------------

2023-08-06 22:48:57 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-06 22:49:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 21 seconds
Variants: generated 100, build-succeeded 27, build-failed 29, syntax-invalid 29, redundant 15
Fitness: max 1(1), min 0.957(1), ave 0.986
Test execution time: sum 16264 ms, max 794 ms, min 424 ms
----------------------------------------------------------------

2023-08-06 22:49:20 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-06 22:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 45 seconds
Variants: generated 100, build-succeeded 27, build-failed 27, syntax-invalid 31, redundant 15
Fitness: max 0.991(23), min 0.94(1), ave 0.989
Test execution time: sum 18487 ms, max 954 ms, min 476 ms
----------------------------------------------------------------

2023-08-06 22:49:44 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-06 22:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 14 seconds
Variants: generated 100, build-succeeded 34, build-failed 25, syntax-invalid 29, redundant 12
Fitness: max 1(1), min 0.948(1), ave 0.987
Test execution time: sum 22978 ms, max 1045 ms, min 444 ms
----------------------------------------------------------------

2023-08-06 22:50:13 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-06 22:50:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 42 seconds
Variants: generated 100, build-succeeded 34, build-failed 29, syntax-invalid 20, redundant 17
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 21262 ms, max 875 ms, min 407 ms
----------------------------------------------------------------

2023-08-06 22:50:41 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-06 22:51:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 8 seconds
Variants: generated 100, build-succeeded 30, build-failed 29, syntax-invalid 29, redundant 12
Fitness: max 1(2), min 0.957(1), ave 0.989
Test execution time: sum 19672 ms, max 853 ms, min 421 ms
----------------------------------------------------------------

2023-08-06 22:51:07 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-06 22:51:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 33 seconds
Variants: generated 100, build-succeeded 29, build-failed 27, syntax-invalid 27, redundant 17
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 19361 ms, max 864 ms, min 461 ms
----------------------------------------------------------------

2023-08-06 22:51:32 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-06 22:52:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 1 seconds
Variants: generated 100, build-succeeded 33, build-failed 32, syntax-invalid 22, redundant 13
Fitness: max 0.991(22), min 0.957(2), ave 0.985
Test execution time: sum 21129 ms, max 822 ms, min 463 ms
----------------------------------------------------------------

2023-08-06 22:52:00 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-06 22:52:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 23 seconds
Variants: generated 100, build-succeeded 23, build-failed 28, syntax-invalid 33, redundant 16
Fitness: max 0.991(15), min 0.948(1), ave 0.985
Test execution time: sum 14925 ms, max 843 ms, min 442 ms
----------------------------------------------------------------

2023-08-06 22:52:21 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-06 22:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 49 seconds
Variants: generated 100, build-succeeded 30, build-failed 29, syntax-invalid 24, redundant 17
Fitness: max 1(2), min 0.948(1), ave 0.988
Test execution time: sum 20203 ms, max 829 ms, min 456 ms
----------------------------------------------------------------

2023-08-06 22:52:48 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-06 22:53:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 15 seconds
Variants: generated 100, build-succeeded 27, build-failed 26, syntax-invalid 26, redundant 21
Fitness: max 1(1), min 0.957(1), ave 0.989
Test execution time: sum 18497 ms, max 982 ms, min 447 ms
----------------------------------------------------------------

2023-08-06 22:53:14 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-06 22:53:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 46 seconds
Variants: generated 100, build-succeeded 29, build-failed 28, syntax-invalid 25, redundant 18
Fitness: max 1(2), min 0.957(2), ave 0.988
Test execution time: sum 21053 ms, max 1161 ms, min 437 ms
----------------------------------------------------------------

2023-08-06 22:53:44 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-06 22:54:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 9 seconds
Variants: generated 100, build-succeeded 25, build-failed 28, syntax-invalid 29, redundant 18
Fitness: max 0.991(22), min 0.966(2), ave 0.989
Test execution time: sum 16319 ms, max 896 ms, min 429 ms
----------------------------------------------------------------

2023-08-06 22:54:08 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-06 22:54:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 38 seconds
Variants: generated 100, build-succeeded 33, build-failed 27, syntax-invalid 23, redundant 17
Fitness: max 0.991(27), min 0.957(1), ave 0.988
Test execution time: sum 22078 ms, max 871 ms, min 508 ms
----------------------------------------------------------------

2023-08-06 22:54:37 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-06 22:55:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 2 seconds
Variants: generated 100, build-succeeded 25, build-failed 27, syntax-invalid 31, redundant 17
Fitness: max 0.991(23), min 0.966(1), ave 0.99
Test execution time: sum 16761 ms, max 850 ms, min 440 ms
----------------------------------------------------------------

2023-08-06 22:55:00 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-06 22:55:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 27 seconds
Variants: generated 100, build-succeeded 28, build-failed 26, syntax-invalid 24, redundant 22
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 18665 ms, max 916 ms, min 453 ms
----------------------------------------------------------------

2023-08-06 22:55:25 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-06 22:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 48 seconds
Variants: generated 100, build-succeeded 25, build-failed 31, syntax-invalid 28, redundant 16
Fitness: max 1(1), min 0.931(1), ave 0.989
Test execution time: sum 15030 ms, max 803 ms, min 424 ms
----------------------------------------------------------------

2023-08-06 22:55:47 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-06 22:56:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 12 seconds
Variants: generated 100, build-succeeded 26, build-failed 30, syntax-invalid 24, redundant 20
Fitness: max 0.991(26), min 0.991(26), ave 0.991
Test execution time: sum 17475 ms, max 832 ms, min 480 ms
----------------------------------------------------------------

2023-08-06 22:56:11 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-06 22:56:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 34 seconds
Variants: generated 100, build-succeeded 23, build-failed 33, syntax-invalid 30, redundant 14
Fitness: max 1(1), min 0.957(1), ave 0.99
Test execution time: sum 15685 ms, max 827 ms, min 429 ms
----------------------------------------------------------------

2023-08-06 22:56:33 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-06 22:56:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 58 seconds
Variants: generated 100, build-succeeded 25, build-failed 22, syntax-invalid 31, redundant 22
Fitness: max 0.991(21), min 0.983(4), ave 0.99
Test execution time: sum 17026 ms, max 909 ms, min 408 ms
----------------------------------------------------------------

2023-08-06 22:56:57 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-06 22:57:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 23 seconds
Variants: generated 100, build-succeeded 27, build-failed 24, syntax-invalid 30, redundant 19
Fitness: max 1(3), min 0.966(2), ave 0.99
Test execution time: sum 18185 ms, max 880 ms, min 433 ms
----------------------------------------------------------------

2023-08-06 22:57:22 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-06 22:57:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 44 seconds
Variants: generated 100, build-succeeded 23, build-failed 20, syntax-invalid 42, redundant 15
Fitness: max 0.991(21), min 0.974(1), ave 0.99
Test execution time: sum 14701 ms, max 795 ms, min 433 ms
----------------------------------------------------------------

2023-08-06 22:57:43 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-06 22:58:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 6 seconds
Variants: generated 100, build-succeeded 23, build-failed 26, syntax-invalid 35, redundant 16
Fitness: max 0.991(19), min 0.983(4), ave 0.99
Test execution time: sum 15261 ms, max 861 ms, min 477 ms
----------------------------------------------------------------

2023-08-06 22:58:05 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-06 22:58:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 26 seconds
Variants: generated 100, build-succeeded 20, build-failed 23, syntax-invalid 35, redundant 22
Fitness: max 0.991(19), min 0.974(1), ave 0.991
Test execution time: sum 13608 ms, max 879 ms, min 483 ms
----------------------------------------------------------------

2023-08-06 22:58:24 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-06 22:58:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 41 seconds
Variants: generated 100, build-succeeded 15, build-failed 23, syntax-invalid 41, redundant 21
Fitness: max 1(1), min 0.983(3), ave 0.99
Test execution time: sum 9658 ms, max 889 ms, min 449 ms
----------------------------------------------------------------

2023-08-06 22:58:40 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-06 22:59:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 4 seconds
Variants: generated 100, build-succeeded 26, build-failed 22, syntax-invalid 32, redundant 20
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 17706 ms, max 890 ms, min 425 ms
----------------------------------------------------------------

2023-08-06 22:59:03 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-06 22:59:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 28 seconds
Variants: generated 100, build-succeeded 25, build-failed 22, syntax-invalid 29, redundant 24
Fitness: max 0.991(22), min 0.983(3), ave 0.99
Test execution time: sum 16933 ms, max 895 ms, min 456 ms
----------------------------------------------------------------

2023-08-06 22:59:27 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-06 22:59:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 47 seconds
Variants: generated 100, build-succeeded 16, build-failed 30, syntax-invalid 42, redundant 12
Fitness: max 0.991(15), min 0.983(1), ave 0.991
Test execution time: sum 10505 ms, max 879 ms, min 446 ms
----------------------------------------------------------------

2023-08-06 22:59:46 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-06 23:00:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 5 seconds
Variants: generated 100, build-succeeded 20, build-failed 22, syntax-invalid 41, redundant 17
Fitness: max 0.991(19), min 0.983(1), ave 0.991
Test execution time: sum 12056 ms, max 824 ms, min 422 ms
----------------------------------------------------------------

2023-08-06 23:00:04 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-06 23:00:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 29 seconds
Variants: generated 100, build-succeeded 27, build-failed 26, syntax-invalid 34, redundant 13
Fitness: max 0.991(25), min 0.931(1), ave 0.989
Test execution time: sum 16954 ms, max 906 ms, min 434 ms
----------------------------------------------------------------

2023-08-06 23:00:28 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-06 23:00:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 50 seconds
Variants: generated 100, build-succeeded 20, build-failed 26, syntax-invalid 39, redundant 15
Fitness: max 1(2), min 0.991(18), ave 0.992
Test execution time: sum 13488 ms, max 869 ms, min 464 ms
----------------------------------------------------------------

2023-08-06 23:00:48 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-06 23:01:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 9 seconds
Variants: generated 100, build-succeeded 17, build-failed 26, syntax-invalid 34, redundant 23
Fitness: max 0.991(14), min 0.974(1), ave 0.989
Test execution time: sum 11562 ms, max 855 ms, min 496 ms
----------------------------------------------------------------

2023-08-06 23:01:07 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-06 23:01:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 26 seconds
Variants: generated 100, build-succeeded 15, build-failed 24, syntax-invalid 44, redundant 17
Fitness: max 0.991(14), min 0.966(1), ave 0.99
Test execution time: sum 10107 ms, max 900 ms, min 432 ms
----------------------------------------------------------------

2023-08-06 23:01:25 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-06 23:01:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 51 seconds
Variants: generated 100, build-succeeded 25, build-failed 22, syntax-invalid 35, redundant 18
Fitness: max 0.991(22), min 0.966(1), ave 0.99
Test execution time: sum 17166 ms, max 911 ms, min 533 ms
----------------------------------------------------------------

2023-08-06 23:01:49 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-06 23:02:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 15 seconds
Variants: generated 100, build-succeeded 24, build-failed 24, syntax-invalid 42, redundant 10
Fitness: max 0.991(17), min 0.931(1), ave 0.985
Test execution time: sum 15356 ms, max 790 ms, min 483 ms
----------------------------------------------------------------

2023-08-06 23:02:13 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-06 23:02:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 41 seconds
Variants: generated 100, build-succeeded 27, build-failed 28, syntax-invalid 29, redundant 16
Fitness: max 1(1), min 0.966(1), ave 0.991
Test execution time: sum 18377 ms, max 854 ms, min 436 ms
----------------------------------------------------------------

2023-08-06 23:02:40 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-06 23:03:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 5 seconds
Variants: generated 100, build-succeeded 23, build-failed 22, syntax-invalid 41, redundant 14
Fitness: max 1(1), min 0.957(1), ave 0.99
Test execution time: sum 16039 ms, max 959 ms, min 446 ms
----------------------------------------------------------------

2023-08-06 23:03:04 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-06 23:03:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 31 seconds
Variants: generated 100, build-succeeded 27, build-failed 29, syntax-invalid 29, redundant 15
Fitness: max 0.991(25), min 0.983(2), ave 0.991
Test execution time: sum 18391 ms, max 891 ms, min 417 ms
----------------------------------------------------------------

2023-08-06 23:03:30 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-06 23:03:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 55 seconds
Variants: generated 100, build-succeeded 23, build-failed 34, syntax-invalid 32, redundant 11
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 15537 ms, max 823 ms, min 444 ms
----------------------------------------------------------------

2023-08-06 23:03:54 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-06 23:04:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 19 seconds
Variants: generated 100, build-succeeded 24, build-failed 23, syntax-invalid 39, redundant 14
Fitness: max 0.991(20), min 0.966(2), ave 0.989
Test execution time: sum 15841 ms, max 868 ms, min 442 ms
----------------------------------------------------------------

2023-08-06 23:04:17 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-06 23:04:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 47 seconds
Variants: generated 100, build-succeeded 30, build-failed 24, syntax-invalid 29, redundant 17
Fitness: max 0.991(24), min 0.966(1), ave 0.989
Test execution time: sum 19994 ms, max 898 ms, min 448 ms
----------------------------------------------------------------

2023-08-06 23:04:46 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-06 23:05:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 12 seconds
Variants: generated 100, build-succeeded 25, build-failed 29, syntax-invalid 33, redundant 13
Fitness: max 0.991(22), min 0.983(3), ave 0.99
Test execution time: sum 16748 ms, max 845 ms, min 460 ms
----------------------------------------------------------------

2023-08-06 23:05:11 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-06 23:05:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 32 seconds
Variants: generated 100, build-succeeded 23, build-failed 29, syntax-invalid 40, redundant 8
Fitness: max 0.991(17), min 0.871(1), ave 0.982
Test execution time: sum 13077 ms, max 849 ms, min 402 ms
----------------------------------------------------------------

2023-08-06 23:05:31 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-06 23:05:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 56 seconds
Variants: generated 100, build-succeeded 23, build-failed 25, syntax-invalid 39, redundant 13
Fitness: max 0.991(17), min 0.94(1), ave 0.987
Test execution time: sum 15618 ms, max 1038 ms, min 422 ms
----------------------------------------------------------------

2023-08-06 23:05:54 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-06 23:06:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 19 seconds
Variants: generated 100, build-succeeded 26, build-failed 22, syntax-invalid 37, redundant 15
Fitness: max 0.991(22), min 0.897(1), ave 0.986
Test execution time: sum 15894 ms, max 802 ms, min 412 ms
----------------------------------------------------------------

2023-08-06 23:06:18 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-06 23:06:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 35 seconds
Variants: generated 100, build-succeeded 15, build-failed 30, syntax-invalid 38, redundant 17
Fitness: max 1(1), min 0.974(1), ave 0.991
Test execution time: sum 9933 ms, max 849 ms, min 486 ms
----------------------------------------------------------------

2023-08-06 23:06:34 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-06 23:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 53 seconds
Variants: generated 100, build-succeeded 18, build-failed 21, syntax-invalid 43, redundant 18
Fitness: max 0.991(14), min 0.966(2), ave 0.988
Test execution time: sum 11563 ms, max 811 ms, min 429 ms
----------------------------------------------------------------

2023-08-06 23:06:52 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-06 23:07:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 10 seconds
Variants: generated 100, build-succeeded 14, build-failed 25, syntax-invalid 42, redundant 19
Fitness: max 0.991(12), min 0.983(2), ave 0.99
Test execution time: sum 9569 ms, max 879 ms, min 457 ms
----------------------------------------------------------------

2023-08-06 23:07:08 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-06 23:07:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 29 seconds
Variants: generated 100, build-succeeded 17, build-failed 27, syntax-invalid 43, redundant 13
Fitness: max 0.991(15), min 0.983(2), ave 0.99
Test execution time: sum 11820 ms, max 882 ms, min 455 ms
----------------------------------------------------------------

2023-08-06 23:07:28 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-06 23:07:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 46 seconds
Variants: generated 100, build-succeeded 16, build-failed 29, syntax-invalid 38, redundant 17
Fitness: max 0.991(14), min 0.974(1), ave 0.99
Test execution time: sum 9943 ms, max 812 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:07:44 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-06 23:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 5 seconds
Variants: generated 100, build-succeeded 21, build-failed 30, syntax-invalid 37, redundant 12
Fitness: max 1(1), min 0.974(1), ave 0.991
Test execution time: sum 12474 ms, max 842 ms, min 413 ms
----------------------------------------------------------------

2023-08-06 23:08:03 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-06 23:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 27 seconds
Variants: generated 100, build-succeeded 24, build-failed 25, syntax-invalid 38, redundant 13
Fitness: max 0.991(20), min 0.957(1), ave 0.989
Test execution time: sum 15622 ms, max 901 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 23:08:25 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-06 23:08:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 45 seconds
Variants: generated 100, build-succeeded 16, build-failed 31, syntax-invalid 34, redundant 19
Fitness: max 0.991(14), min 0.974(2), ave 0.989
Test execution time: sum 10355 ms, max 841 ms, min 470 ms
----------------------------------------------------------------

2023-08-06 23:08:43 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-06 23:08:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 59 seconds
Variants: generated 100, build-succeeded 11, build-failed 31, syntax-invalid 42, redundant 16
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 6801 ms, max 859 ms, min 430 ms
----------------------------------------------------------------

2023-08-06 23:08:57 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-06 23:09:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 16 seconds
Variants: generated 100, build-succeeded 18, build-failed 26, syntax-invalid 41, redundant 15
Fitness: max 0.991(16), min 0.966(1), ave 0.989
Test execution time: sum 11051 ms, max 814 ms, min 414 ms
----------------------------------------------------------------

2023-08-06 23:09:14 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-06 23:09:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 34 seconds
Variants: generated 100, build-succeeded 18, build-failed 28, syntax-invalid 38, redundant 16
Fitness: max 0.991(13), min 0.966(1), ave 0.988
Test execution time: sum 11204 ms, max 782 ms, min 487 ms
----------------------------------------------------------------

2023-08-06 23:09:33 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-06 23:09:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 52 seconds
Variants: generated 100, build-succeeded 16, build-failed 37, syntax-invalid 36, redundant 11
Fitness: max 0.991(13), min 0.983(3), ave 0.99
Test execution time: sum 11082 ms, max 873 ms, min 457 ms
----------------------------------------------------------------

2023-08-06 23:09:51 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-06 23:10:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 9 seconds
Variants: generated 100, build-succeeded 15, build-failed 32, syntax-invalid 48, redundant 5
Fitness: max 0.991(12), min 0.845(1), ave 0.978
Test execution time: sum 9782 ms, max 775 ms, min 430 ms
----------------------------------------------------------------

2023-08-06 23:10:08 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-06 23:10:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 27 seconds
Variants: generated 100, build-succeeded 17, build-failed 31, syntax-invalid 35, redundant 17
Fitness: max 0.991(17), min 0.991(17), ave 0.991
Test execution time: sum 11167 ms, max 806 ms, min 452 ms
----------------------------------------------------------------

2023-08-06 23:10:26 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-06 23:10:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 43 seconds
Variants: generated 100, build-succeeded 13, build-failed 32, syntax-invalid 43, redundant 12
Fitness: max 0.991(7), min 0.966(2), ave 0.985
Test execution time: sum 8924 ms, max 880 ms, min 447 ms
----------------------------------------------------------------

2023-08-06 23:10:41 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-06 23:11:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 2 seconds
Variants: generated 100, build-succeeded 21, build-failed 29, syntax-invalid 38, redundant 12
Fitness: max 1(1), min 0.957(1), ave 0.988
Test execution time: sum 12841 ms, max 931 ms, min 413 ms
----------------------------------------------------------------

2023-08-06 23:11:01 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-06 23:11:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 16 seconds
Variants: generated 100, build-succeeded 11, build-failed 33, syntax-invalid 42, redundant 14
Fitness: max 0.991(7), min 0.836(1), ave 0.974
Test execution time: sum 7534 ms, max 862 ms, min 480 ms
----------------------------------------------------------------

2023-08-06 23:11:15 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-06 23:11:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 34 seconds
Variants: generated 100, build-succeeded 17, build-failed 29, syntax-invalid 41, redundant 13
Fitness: max 0.991(12), min 0.948(1), ave 0.987
Test execution time: sum 10963 ms, max 891 ms, min 449 ms
----------------------------------------------------------------

2023-08-06 23:11:32 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-06 23:11:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 49 seconds
Variants: generated 100, build-succeeded 13, build-failed 32, syntax-invalid 41, redundant 14
Fitness: max 0.991(12), min 0.983(1), ave 0.991
Test execution time: sum 9258 ms, max 936 ms, min 457 ms
----------------------------------------------------------------

2023-08-06 23:11:48 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-06 23:12:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 8 seconds
Variants: generated 100, build-succeeded 17, build-failed 31, syntax-invalid 39, redundant 13
Fitness: max 0.991(15), min 0.983(2), ave 0.99
Test execution time: sum 11748 ms, max 903 ms, min 485 ms
----------------------------------------------------------------

2023-08-06 23:12:07 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-06 23:12:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 27 seconds
Variants: generated 100, build-succeeded 16, build-failed 36, syntax-invalid 40, redundant 8
Fitness: max 0.991(15), min 0.983(1), ave 0.991
Test execution time: sum 11390 ms, max 859 ms, min 574 ms
----------------------------------------------------------------

2023-08-06 23:12:25 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-06 23:12:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 45 seconds
Variants: generated 100, build-succeeded 17, build-failed 31, syntax-invalid 43, redundant 9
Fitness: max 1(1), min 0.957(1), ave 0.988
Test execution time: sum 11583 ms, max 828 ms, min 480 ms
----------------------------------------------------------------

2023-08-06 23:12:44 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-06 23:13:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 6 seconds
Variants: generated 100, build-succeeded 21, build-failed 28, syntax-invalid 38, redundant 13
Fitness: max 0.991(17), min 0.966(2), ave 0.988
Test execution time: sum 14224 ms, max 824 ms, min 514 ms
----------------------------------------------------------------

2023-08-06 23:13:05 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-06 23:13:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 28 seconds
Variants: generated 100, build-succeeded 20, build-failed 27, syntax-invalid 32, redundant 21
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 13570 ms, max 872 ms, min 480 ms
----------------------------------------------------------------

2023-08-06 23:13:26 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-06 23:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 50 seconds
Variants: generated 100, build-succeeded 22, build-failed 33, syntax-invalid 36, redundant 9
Fitness: max 1(1), min 0.957(1), ave 0.989
Test execution time: sum 14887 ms, max 896 ms, min 493 ms
----------------------------------------------------------------

2023-08-06 23:13:48 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-06 23:14:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 13 seconds
Variants: generated 100, build-succeeded 24, build-failed 31, syntax-invalid 35, redundant 10
Fitness: max 0.991(20), min 0.957(1), ave 0.989
Test execution time: sum 16114 ms, max 822 ms, min 457 ms
----------------------------------------------------------------

2023-08-06 23:14:11 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-06 23:14:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 33 seconds
Variants: generated 100, build-succeeded 26, build-failed 27, syntax-invalid 38, redundant 9
Fitness: max 0.991(24), min 0.983(2), ave 0.991
Test execution time: sum 13578 ms, max 821 ms, min 385 ms
----------------------------------------------------------------

2023-08-06 23:14:31 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-06 23:14:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 52 seconds
Variants: generated 100, build-succeeded 25, build-failed 26, syntax-invalid 40, redundant 9
Fitness: max 1(2), min 0.983(3), ave 0.991
Test execution time: sum 13069 ms, max 935 ms, min 397 ms
----------------------------------------------------------------

2023-08-06 23:14:51 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-06 23:15:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 19 seconds
Variants: generated 100, build-succeeded 28, build-failed 25, syntax-invalid 37, redundant 10
Fitness: max 0.991(25), min 0.836(1), ave 0.985
Test execution time: sum 18812 ms, max 900 ms, min 394 ms
----------------------------------------------------------------

2023-08-06 23:15:18 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-06 23:15:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 37 seconds
Variants: generated 100, build-succeeded 20, build-failed 35, syntax-invalid 41, redundant 4
Fitness: max 0.991(19), min 0.983(1), ave 0.991
Test execution time: sum 10348 ms, max 816 ms, min 404 ms
----------------------------------------------------------------

2023-08-06 23:15:35 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-06 23:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 50 seconds
Variants: generated 100, build-succeeded 12, build-failed 32, syntax-invalid 47, redundant 9
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 6883 ms, max 796 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:15:48 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-06 23:16:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 10 seconds
Variants: generated 100, build-succeeded 25, build-failed 31, syntax-invalid 35, redundant 9
Fitness: max 0.991(20), min 0.957(1), ave 0.988
Test execution time: sum 14195 ms, max 818 ms, min 406 ms
----------------------------------------------------------------

2023-08-06 23:16:09 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-06 23:16:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 26 seconds
Variants: generated 100, build-succeeded 16, build-failed 33, syntax-invalid 42, redundant 9
Fitness: max 0.991(14), min 0.957(1), ave 0.989
Test execution time: sum 9049 ms, max 865 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:16:25 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-06 23:16:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 44 seconds
Variants: generated 100, build-succeeded 20, build-failed 29, syntax-invalid 43, redundant 8
Fitness: max 0.991(18), min 0.974(1), ave 0.99
Test execution time: sum 11537 ms, max 911 ms, min 411 ms
----------------------------------------------------------------

2023-08-06 23:16:43 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-06 23:16:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 57 seconds
Variants: generated 100, build-succeeded 12, build-failed 25, syntax-invalid 46, redundant 17
Fitness: max 0.991(11), min 0.983(1), ave 0.991
Test execution time: sum 6676 ms, max 772 ms, min 426 ms
----------------------------------------------------------------

2023-08-06 23:16:55 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-06 23:17:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 15 seconds
Variants: generated 100, build-succeeded 21, build-failed 32, syntax-invalid 45, redundant 2
Fitness: max 1(1), min 0.966(3), ave 0.987
Test execution time: sum 12041 ms, max 840 ms, min 419 ms
----------------------------------------------------------------

2023-08-06 23:17:14 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-06 23:17:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 35 seconds
Variants: generated 100, build-succeeded 20, build-failed 30, syntax-invalid 41, redundant 9
Fitness: max 1(1), min 0.991(19), ave 0.992
Test execution time: sum 12598 ms, max 916 ms, min 438 ms
----------------------------------------------------------------

2023-08-06 23:17:33 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-06 23:17:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 49 seconds
Variants: generated 100, build-succeeded 14, build-failed 31, syntax-invalid 46, redundant 9
Fitness: max 0.991(11), min 0.957(1), ave 0.988
Test execution time: sum 7991 ms, max 793 ms, min 422 ms
----------------------------------------------------------------

2023-08-06 23:17:48 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-06 23:18:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 3 seconds
Variants: generated 100, build-succeeded 13, build-failed 26, syntax-invalid 49, redundant 12
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 7964 ms, max 803 ms, min 422 ms
----------------------------------------------------------------

2023-08-06 23:18:02 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-06 23:18:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 19 seconds
Variants: generated 100, build-succeeded 13, build-failed 26, syntax-invalid 47, redundant 14
Fitness: max 0.991(9), min 0.966(1), ave 0.987
Test execution time: sum 8637 ms, max 1000 ms, min 432 ms
----------------------------------------------------------------

2023-08-06 23:18:17 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-06 23:18:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 34 seconds
Variants: generated 100, build-succeeded 13, build-failed 28, syntax-invalid 48, redundant 11
Fitness: max 0.991(9), min 0.802(1), ave 0.964
Test execution time: sum 8657 ms, max 896 ms, min 421 ms
----------------------------------------------------------------

2023-08-06 23:18:33 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-06 23:18:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 51 seconds
Variants: generated 100, build-succeeded 15, build-failed 32, syntax-invalid 42, redundant 11
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 9842 ms, max 793 ms, min 445 ms
----------------------------------------------------------------

2023-08-06 23:18:50 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-06 23:19:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 6 seconds
Variants: generated 100, build-succeeded 13, build-failed 30, syntax-invalid 42, redundant 15
Fitness: max 0.991(10), min 0.948(1), ave 0.985
Test execution time: sum 8624 ms, max 765 ms, min 431 ms
----------------------------------------------------------------

2023-08-06 23:19:05 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-06 23:19:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 22 seconds
Variants: generated 100, build-succeeded 13, build-failed 27, syntax-invalid 49, redundant 11
Fitness: max 0.991(10), min 0.957(1), ave 0.986
Test execution time: sum 8886 ms, max 861 ms, min 477 ms
----------------------------------------------------------------

2023-08-06 23:19:21 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-06 23:19:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 35 seconds
Variants: generated 100, build-succeeded 9, build-failed 29, syntax-invalid 47, redundant 15
Fitness: max 0.991(7), min 0.983(2), ave 0.989
Test execution time: sum 5980 ms, max 810 ms, min 492 ms
----------------------------------------------------------------

2023-08-06 23:19:34 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-06 23:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 52 seconds
Variants: generated 100, build-succeeded 17, build-failed 36, syntax-invalid 41, redundant 6
Fitness: max 0.991(14), min 0.966(1), ave 0.989
Test execution time: sum 10362 ms, max 763 ms, min 436 ms
----------------------------------------------------------------

2023-08-06 23:19:51 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-06 23:20:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 7 seconds
Variants: generated 100, build-succeeded 15, build-failed 33, syntax-invalid 46, redundant 6
Fitness: max 1(1), min 0.974(1), ave 0.989
Test execution time: sum 8794 ms, max 774 ms, min 429 ms
----------------------------------------------------------------

2023-08-06 23:20:06 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-06 23:20:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 25 seconds
Variants: generated 100, build-succeeded 19, build-failed 25, syntax-invalid 42, redundant 14
Fitness: max 0.991(17), min 0.983(2), ave 0.99
Test execution time: sum 11510 ms, max 823 ms, min 433 ms
----------------------------------------------------------------

2023-08-06 23:20:23 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-06 23:20:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 40 seconds
Variants: generated 100, build-succeeded 12, build-failed 32, syntax-invalid 45, redundant 11
Fitness: max 1(1), min 0.991(11), ave 0.992
Test execution time: sum 7797 ms, max 1019 ms, min 433 ms
----------------------------------------------------------------

2023-08-06 23:20:39 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-06 23:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 0 seconds
Variants: generated 100, build-succeeded 19, build-failed 27, syntax-invalid 46, redundant 8
Fitness: max 1(1), min 0.845(1), ave 0.98
Test execution time: sum 13097 ms, max 825 ms, min 486 ms
----------------------------------------------------------------

2023-08-06 23:20:59 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-06 23:21:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 17 seconds
Variants: generated 100, build-succeeded 15, build-failed 22, syntax-invalid 46, redundant 17
Fitness: max 0.991(14), min 0.983(1), ave 0.991
Test execution time: sum 10208 ms, max 852 ms, min 435 ms
----------------------------------------------------------------

2023-08-06 23:21:16 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-06 23:21:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 40 seconds
Variants: generated 100, build-succeeded 20, build-failed 20, syntax-invalid 47, redundant 13
Fitness: max 0.991(16), min 0.836(1), ave 0.982
Test execution time: sum 14509 ms, max 1045 ms, min 451 ms
----------------------------------------------------------------

2023-08-06 23:21:38 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-06 23:21:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 58 seconds
Variants: generated 100, build-succeeded 17, build-failed 31, syntax-invalid 41, redundant 11
Fitness: max 0.991(14), min 0.983(3), ave 0.99
Test execution time: sum 9989 ms, max 780 ms, min 433 ms
----------------------------------------------------------------

2023-08-06 23:21:57 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-06 23:22:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 15 seconds
Variants: generated 100, build-succeeded 18, build-failed 23, syntax-invalid 46, redundant 13
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 10456 ms, max 778 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 23:22:14 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-06 23:22:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 33 seconds
Variants: generated 100, build-succeeded 18, build-failed 34, syntax-invalid 39, redundant 9
Fitness: max 0.991(17), min 0.983(1), ave 0.991
Test execution time: sum 10864 ms, max 826 ms, min 398 ms
----------------------------------------------------------------

2023-08-06 23:22:32 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-06 23:22:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 51 seconds
Variants: generated 100, build-succeeded 17, build-failed 30, syntax-invalid 41, redundant 12
Fitness: max 0.991(11), min 0.966(1), ave 0.987
Test execution time: sum 10650 ms, max 794 ms, min 400 ms
----------------------------------------------------------------

2023-08-06 23:22:50 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-06 23:23:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 9 seconds
Variants: generated 100, build-succeeded 18, build-failed 28, syntax-invalid 43, redundant 11
Fitness: max 1(1), min 0.862(1), ave 0.982
Test execution time: sum 10750 ms, max 802 ms, min 401 ms
----------------------------------------------------------------

2023-08-06 23:23:07 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-06 23:23:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 33 seconds
Variants: generated 100, build-succeeded 25, build-failed 25, syntax-invalid 36, redundant 14
Fitness: max 0.991(22), min 0.974(1), ave 0.99
Test execution time: sum 16724 ms, max 991 ms, min 455 ms
----------------------------------------------------------------

2023-08-06 23:23:32 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-06 23:23:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 51 seconds
Variants: generated 100, build-succeeded 15, build-failed 32, syntax-invalid 41, redundant 12
Fitness: max 0.991(15), min 0.991(15), ave 0.991
Test execution time: sum 10019 ms, max 780 ms, min 468 ms
----------------------------------------------------------------

2023-08-06 23:23:49 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-06 23:24:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 11 seconds
Variants: generated 100, build-succeeded 20, build-failed 27, syntax-invalid 43, redundant 10
Fitness: max 0.991(19), min 0.983(1), ave 0.991
Test execution time: sum 13660 ms, max 821 ms, min 488 ms
----------------------------------------------------------------

2023-08-06 23:24:09 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-06 23:24:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 31 seconds
Variants: generated 100, build-succeeded 19, build-failed 29, syntax-invalid 39, redundant 13
Fitness: max 0.991(18), min 0.983(1), ave 0.991
Test execution time: sum 13693 ms, max 1036 ms, min 500 ms
----------------------------------------------------------------

2023-08-06 23:24:30 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-06 23:24:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 48 seconds
Variants: generated 100, build-succeeded 14, build-failed 25, syntax-invalid 42, redundant 19
Fitness: max 0.991(13), min 0.845(1), ave 0.981
Test execution time: sum 9272 ms, max 765 ms, min 505 ms
----------------------------------------------------------------

2023-08-06 23:24:47 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-06 23:25:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 17 seconds
Variants: generated 100, build-succeeded 29, build-failed 29, syntax-invalid 34, redundant 8
Fitness: max 0.991(22), min 0.983(7), ave 0.989
Test execution time: sum 20548 ms, max 2169 ms, min 404 ms
----------------------------------------------------------------

2023-08-06 23:25:15 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-06 23:25:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 38 seconds
Variants: generated 100, build-succeeded 31, build-failed 24, syntax-invalid 35, redundant 10
Fitness: max 0.991(28), min 0.983(3), ave 0.991
Test execution time: sum 15837 ms, max 856 ms, min 386 ms
----------------------------------------------------------------

2023-08-06 23:25:37 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-06 23:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 56 seconds
Variants: generated 100, build-succeeded 24, build-failed 28, syntax-invalid 38, redundant 10
Fitness: max 0.991(21), min 0.983(3), ave 0.99
Test execution time: sum 11976 ms, max 735 ms, min 393 ms
----------------------------------------------------------------

2023-08-06 23:25:54 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-06 23:26:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 11 seconds
Variants: generated 100, build-succeeded 21, build-failed 27, syntax-invalid 40, redundant 12
Fitness: max 0.991(19), min 0.897(1), ave 0.986
Test execution time: sum 10570 ms, max 824 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:26:10 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-06 23:26:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 25 seconds
Variants: generated 100, build-succeeded 18, build-failed 31, syntax-invalid 36, redundant 15
Fitness: max 0.991(16), min 0.983(2), ave 0.99
Test execution time: sum 9083 ms, max 770 ms, min 402 ms
----------------------------------------------------------------

2023-08-06 23:26:24 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-06 23:26:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 39 seconds
Variants: generated 100, build-succeeded 15, build-failed 37, syntax-invalid 42, redundant 6
Fitness: max 0.991(12), min 0.966(1), ave 0.989
Test execution time: sum 7319 ms, max 793 ms, min 387 ms
----------------------------------------------------------------

2023-08-06 23:26:38 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-06 23:26:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 56 seconds
Variants: generated 100, build-succeeded 26, build-failed 23, syntax-invalid 37, redundant 14
Fitness: max 0.991(19), min 0.948(1), ave 0.986
Test execution time: sum 12544 ms, max 666 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:26:54 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-06 23:27:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 13 seconds
Variants: generated 100, build-succeeded 24, build-failed 28, syntax-invalid 38, redundant 10
Fitness: max 0.991(18), min 0.966(1), ave 0.989
Test execution time: sum 12162 ms, max 923 ms, min 392 ms
----------------------------------------------------------------

2023-08-06 23:27:12 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-06 23:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 33 seconds
Variants: generated 100, build-succeeded 28, build-failed 25, syntax-invalid 34, redundant 13
Fitness: max 0.991(20), min 0.948(1), ave 0.988
Test execution time: sum 14148 ms, max 735 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:27:32 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-06 23:27:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 57 seconds
Variants: generated 100, build-succeeded 29, build-failed 26, syntax-invalid 35, redundant 10
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 17054 ms, max 979 ms, min 389 ms
----------------------------------------------------------------

2023-08-06 23:27:56 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-06 23:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 16 seconds
Variants: generated 100, build-succeeded 25, build-failed 25, syntax-invalid 37, redundant 13
Fitness: max 0.991(20), min 0.966(1), ave 0.989
Test execution time: sum 13370 ms, max 838 ms, min 400 ms
----------------------------------------------------------------

2023-08-06 23:28:14 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-06 23:28:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 34 seconds
Variants: generated 100, build-succeeded 24, build-failed 35, syntax-invalid 32, redundant 9
Fitness: max 1(1), min 0.948(1), ave 0.989
Test execution time: sum 12915 ms, max 844 ms, min 402 ms
----------------------------------------------------------------

2023-08-06 23:28:33 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-06 23:28:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 58 seconds
Variants: generated 100, build-succeeded 34, build-failed 28, syntax-invalid 30, redundant 8
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 17684 ms, max 904 ms, min 395 ms
----------------------------------------------------------------

2023-08-06 23:28:57 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-06 23:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 19 seconds
Variants: generated 100, build-succeeded 27, build-failed 31, syntax-invalid 36, redundant 6
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 14489 ms, max 873 ms, min 393 ms
----------------------------------------------------------------

2023-08-06 23:29:18 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-06 23:29:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 44 seconds
Variants: generated 100, build-succeeded 35, build-failed 30, syntax-invalid 26, redundant 9
Fitness: max 0.991(27), min 0.966(3), ave 0.988
Test execution time: sum 18817 ms, max 755 ms, min 382 ms
----------------------------------------------------------------

2023-08-06 23:29:43 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-06 23:30:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 3 seconds
Variants: generated 100, build-succeeded 24, build-failed 23, syntax-invalid 41, redundant 12
Fitness: max 0.991(23), min 0.836(1), ave 0.985
Test execution time: sum 12812 ms, max 823 ms, min 401 ms
----------------------------------------------------------------

2023-08-06 23:30:02 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-06 23:30:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 22 seconds
Variants: generated 100, build-succeeded 21, build-failed 32, syntax-invalid 35, redundant 12
Fitness: max 0.991(17), min 0.836(1), ave 0.98
Test execution time: sum 11769 ms, max 800 ms, min 406 ms
----------------------------------------------------------------

2023-08-06 23:30:21 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-06 23:30:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 48 seconds
Variants: generated 100, build-succeeded 34, build-failed 23, syntax-invalid 32, redundant 11
Fitness: max 0.991(29), min 0.94(1), ave 0.988
Test execution time: sum 19648 ms, max 884 ms, min 418 ms
----------------------------------------------------------------

2023-08-06 23:30:47 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-06 23:31:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 19 seconds
Variants: generated 100, build-succeeded 31, build-failed 30, syntax-invalid 28, redundant 11
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 20242 ms, max 1024 ms, min 392 ms
----------------------------------------------------------------

2023-08-06 23:31:17 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-06 23:31:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 41 seconds
Variants: generated 100, build-succeeded 24, build-failed 29, syntax-invalid 35, redundant 12
Fitness: max 0.991(19), min 0.983(5), ave 0.99
Test execution time: sum 14390 ms, max 794 ms, min 432 ms
----------------------------------------------------------------

2023-08-06 23:31:39 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-06 23:32:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 5 seconds
Variants: generated 100, build-succeeded 26, build-failed 31, syntax-invalid 28, redundant 15
Fitness: max 0.991(20), min 0.983(6), ave 0.989
Test execution time: sum 16381 ms, max 948 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:32:03 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-06 23:32:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 34 seconds
Variants: generated 100, build-succeeded 33, build-failed 31, syntax-invalid 30, redundant 6
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 21671 ms, max 809 ms, min 477 ms
----------------------------------------------------------------

2023-08-06 23:32:33 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-06 23:33:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 5 seconds
Variants: generated 100, build-succeeded 31, build-failed 35, syntax-invalid 26, redundant 8
Fitness: max 0.991(26), min 0.966(1), ave 0.989
Test execution time: sum 20888 ms, max 921 ms, min 491 ms
----------------------------------------------------------------

2023-08-06 23:33:03 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-06 23:33:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 37 seconds
Variants: generated 100, build-succeeded 35, build-failed 31, syntax-invalid 27, redundant 7
Fitness: max 0.991(26), min 0.966(3), ave 0.988
Test execution time: sum 24140 ms, max 892 ms, min 466 ms
----------------------------------------------------------------

2023-08-06 23:33:36 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-06 23:34:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 10 seconds
Variants: generated 100, build-succeeded 40, build-failed 25, syntax-invalid 25, redundant 10
Fitness: max 1(1), min 0.983(3), ave 0.991
Test execution time: sum 22922 ms, max 931 ms, min 400 ms
----------------------------------------------------------------

2023-08-06 23:34:09 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-06 23:34:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 33 seconds
Variants: generated 100, build-succeeded 31, build-failed 25, syntax-invalid 33, redundant 11
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 16137 ms, max 862 ms, min 386 ms
----------------------------------------------------------------

2023-08-06 23:34:31 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-06 23:34:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 0 seconds
Variants: generated 100, build-succeeded 42, build-failed 23, syntax-invalid 25, redundant 10
Fitness: max 1(1), min 0.983(4), ave 0.991
Test execution time: sum 20369 ms, max 801 ms, min 382 ms
----------------------------------------------------------------

2023-08-06 23:34:58 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-06 23:35:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 23 seconds
Variants: generated 100, build-succeeded 35, build-failed 26, syntax-invalid 25, redundant 14
Fitness: max 0.991(29), min 0.966(3), ave 0.988
Test execution time: sum 17010 ms, max 932 ms, min 389 ms
----------------------------------------------------------------

2023-08-06 23:35:22 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-06 23:35:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 43 seconds
Variants: generated 100, build-succeeded 28, build-failed 28, syntax-invalid 28, redundant 16
Fitness: max 1(1), min 0.983(3), ave 0.991
Test execution time: sum 13816 ms, max 774 ms, min 386 ms
----------------------------------------------------------------

2023-08-06 23:35:41 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-06 23:36:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 11 seconds
Variants: generated 100, build-succeeded 39, build-failed 29, syntax-invalid 23, redundant 9
Fitness: max 0.991(30), min 0.94(1), ave 0.986
Test execution time: sum 20702 ms, max 858 ms, min 392 ms
----------------------------------------------------------------

2023-08-06 23:36:10 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-06 23:36:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 32 seconds
Variants: generated 100, build-succeeded 30, build-failed 31, syntax-invalid 25, redundant 14
Fitness: max 0.991(26), min 0.966(1), ave 0.99
Test execution time: sum 15167 ms, max 888 ms, min 384 ms
----------------------------------------------------------------

2023-08-06 23:36:31 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-06 23:36:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 55 seconds
Variants: generated 100, build-succeeded 32, build-failed 31, syntax-invalid 29, redundant 8
Fitness: max 0.991(28), min 0.983(4), ave 0.99
Test execution time: sum 16836 ms, max 876 ms, min 398 ms
----------------------------------------------------------------

2023-08-06 23:36:54 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-06 23:37:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 19 seconds
Variants: generated 100, build-succeeded 30, build-failed 31, syntax-invalid 30, redundant 9
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 16483 ms, max 864 ms, min 386 ms
----------------------------------------------------------------

2023-08-06 23:37:17 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-06 23:37:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 44 seconds
Variants: generated 100, build-succeeded 34, build-failed 25, syntax-invalid 25, redundant 16
Fitness: max 0.991(29), min 0.974(1), ave 0.99
Test execution time: sum 17511 ms, max 823 ms, min 382 ms
----------------------------------------------------------------

2023-08-06 23:37:42 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-06 23:38:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 8 seconds
Variants: generated 100, build-succeeded 30, build-failed 26, syntax-invalid 31, redundant 13
Fitness: max 0.991(28), min 0.966(2), ave 0.99
Test execution time: sum 16966 ms, max 933 ms, min 385 ms
----------------------------------------------------------------

2023-08-06 23:38:07 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-06 23:38:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 34 seconds
Variants: generated 100, build-succeeded 34, build-failed 20, syntax-invalid 24, redundant 22
Fitness: max 0.991(27), min 0.966(3), ave 0.988
Test execution time: sum 18854 ms, max 815 ms, min 413 ms
----------------------------------------------------------------

2023-08-06 23:38:33 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-06 23:38:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 0 seconds
Variants: generated 100, build-succeeded 32, build-failed 25, syntax-invalid 23, redundant 20
Fitness: max 0.991(21), min 0.966(4), ave 0.986
Test execution time: sum 17695 ms, max 837 ms, min 417 ms
----------------------------------------------------------------

2023-08-06 23:38:59 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-06 23:39:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 29 seconds
Variants: generated 100, build-succeeded 34, build-failed 27, syntax-invalid 20, redundant 19
Fitness: max 1(1), min 0.974(2), ave 0.99
Test execution time: sum 20809 ms, max 943 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:39:27 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-06 23:39:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 59 seconds
Variants: generated 100, build-succeeded 35, build-failed 23, syntax-invalid 19, redundant 23
Fitness: max 1(1), min 0.966(3), ave 0.988
Test execution time: sum 21559 ms, max 886 ms, min 417 ms
----------------------------------------------------------------

2023-08-06 23:39:58 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-06 23:40:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 36 seconds
Variants: generated 100, build-succeeded 40, build-failed 25, syntax-invalid 19, redundant 16
Fitness: max 0.991(33), min 0.983(7), ave 0.99
Test execution time: sum 27508 ms, max 1026 ms, min 425 ms
----------------------------------------------------------------

2023-08-06 23:40:34 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-06 23:41:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 9 seconds
Variants: generated 100, build-succeeded 34, build-failed 30, syntax-invalid 20, redundant 16
Fitness: max 0.991(23), min 0.966(1), ave 0.988
Test execution time: sum 23492 ms, max 875 ms, min 421 ms
----------------------------------------------------------------

2023-08-06 23:41:08 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-06 23:41:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 39 seconds
Variants: generated 100, build-succeeded 30, build-failed 21, syntax-invalid 35, redundant 14
Fitness: max 0.991(25), min 0.974(1), ave 0.99
Test execution time: sum 21057 ms, max 887 ms, min 569 ms
----------------------------------------------------------------

2023-08-06 23:41:37 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-06 23:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 seconds
Variants: generated 100, build-succeeded 31, build-failed 30, syntax-invalid 26, redundant 13
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 21819 ms, max 902 ms, min 464 ms
----------------------------------------------------------------

2023-08-06 23:42:09 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-06 23:42:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 seconds
Variants: generated 100, build-succeeded 34, build-failed 25, syntax-invalid 33, redundant 8
Fitness: max 1(2), min 0.931(1), ave 0.986
Test execution time: sum 15245 ms, max 720 ms, min 390 ms
----------------------------------------------------------------

2023-08-06 23:42:32 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-06 23:42:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 seconds
Variants: generated 100, build-succeeded 34, build-failed 24, syntax-invalid 30, redundant 12
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 15087 ms, max 502 ms, min 387 ms
----------------------------------------------------------------

2023-08-06 23:42:53 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-06 23:43:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 18 seconds
Variants: generated 100, build-succeeded 39, build-failed 25, syntax-invalid 24, redundant 12
Fitness: max 1(1), min 0.966(2), ave 0.99
Test execution time: sum 17329 ms, max 498 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:43:16 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-06 23:43:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 41 seconds
Variants: generated 100, build-succeeded 32, build-failed 27, syntax-invalid 26, redundant 15
Fitness: max 0.991(29), min 0.836(1), ave 0.986
Test execution time: sum 15766 ms, max 840 ms, min 376 ms
----------------------------------------------------------------

2023-08-06 23:43:39 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-06 23:43:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 58 seconds
Variants: generated 100, build-succeeded 26, build-failed 26, syntax-invalid 28, redundant 20
Fitness: max 1(3), min 0.983(2), ave 0.992
Test execution time: sum 11408 ms, max 480 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:43:57 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-06 23:44:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 18 seconds
Variants: generated 100, build-succeeded 32, build-failed 28, syntax-invalid 27, redundant 13
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 13915 ms, max 474 ms, min 406 ms
----------------------------------------------------------------

2023-08-06 23:44:17 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-06 23:44:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 38 seconds
Variants: generated 100, build-succeeded 26, build-failed 35, syntax-invalid 23, redundant 16
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 12903 ms, max 747 ms, min 393 ms
----------------------------------------------------------------

2023-08-06 23:44:37 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-06 23:45:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 4 seconds
Variants: generated 100, build-succeeded 36, build-failed 27, syntax-invalid 26, redundant 11
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 18656 ms, max 982 ms, min 395 ms
----------------------------------------------------------------

2023-08-06 23:45:03 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-06 23:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 30 seconds
Variants: generated 100, build-succeeded 37, build-failed 29, syntax-invalid 21, redundant 13
Fitness: max 1(1), min 0.931(1), ave 0.989
Test execution time: sum 18985 ms, max 874 ms, min 388 ms
----------------------------------------------------------------

2023-08-06 23:45:29 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-06 23:45:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 59 seconds
Variants: generated 100, build-succeeded 38, build-failed 29, syntax-invalid 23, redundant 10
Fitness: max 1(2), min 0.983(2), ave 0.991
Test execution time: sum 20205 ms, max 847 ms, min 385 ms
----------------------------------------------------------------

2023-08-06 23:45:58 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-06 23:46:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 32 seconds
Variants: generated 100, build-succeeded 45, build-failed 25, syntax-invalid 16, redundant 14
Fitness: max 1(1), min 0.983(5), ave 0.991
Test execution time: sum 25165 ms, max 949 ms, min 397 ms
----------------------------------------------------------------

2023-08-06 23:46:31 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-06 23:46:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 58 seconds
Variants: generated 100, build-succeeded 30, build-failed 30, syntax-invalid 28, redundant 12
Fitness: max 1(1), min 0.983(4), ave 0.991
Test execution time: sum 17056 ms, max 830 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:46:57 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-06 23:47:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 32 seconds
Variants: generated 100, build-succeeded 43, build-failed 22, syntax-invalid 19, redundant 16
Fitness: max 0.991(37), min 0.966(2), ave 0.989
Test execution time: sum 24865 ms, max 889 ms, min 385 ms
----------------------------------------------------------------

2023-08-06 23:47:31 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-06 23:47:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 57 seconds
Variants: generated 100, build-succeeded 27, build-failed 37, syntax-invalid 25, redundant 11
Fitness: max 0.991(21), min 0.966(1), ave 0.989
Test execution time: sum 16124 ms, max 891 ms, min 408 ms
----------------------------------------------------------------

2023-08-06 23:47:56 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-06 23:48:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 23 seconds
Variants: generated 100, build-succeeded 29, build-failed 30, syntax-invalid 27, redundant 14
Fitness: max 0.991(27), min 0.966(1), ave 0.99
Test execution time: sum 18473 ms, max 901 ms, min 419 ms
----------------------------------------------------------------

2023-08-06 23:48:22 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-06 23:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 57 seconds
Variants: generated 100, build-succeeded 37, build-failed 27, syntax-invalid 24, redundant 12
Fitness: max 1(1), min 0.966(4), ave 0.988
Test execution time: sum 24701 ms, max 881 ms, min 412 ms
----------------------------------------------------------------

2023-08-06 23:48:56 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-06 23:49:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 30 seconds
Variants: generated 100, build-succeeded 32, build-failed 24, syntax-invalid 25, redundant 19
Fitness: max 0.991(28), min 0.836(1), ave 0.985
Test execution time: sum 21681 ms, max 894 ms, min 454 ms
----------------------------------------------------------------

2023-08-06 23:49:28 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-06 23:50:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 4 seconds
Variants: generated 100, build-succeeded 36, build-failed 28, syntax-invalid 22, redundant 14
Fitness: max 1(3), min 0.983(5), ave 0.991
Test execution time: sum 24124 ms, max 913 ms, min 467 ms
----------------------------------------------------------------

2023-08-06 23:50:03 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-06 23:50:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 32 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 27, redundant 15
Fitness: max 1(1), min 0.991(27), ave 0.992
Test execution time: sum 17671 ms, max 2159 ms, min 398 ms
----------------------------------------------------------------

2023-08-06 23:50:30 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-06 23:50:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 50 seconds
Variants: generated 100, build-succeeded 28, build-failed 28, syntax-invalid 31, redundant 13
Fitness: max 0.991(26), min 0.966(1), ave 0.99
Test execution time: sum 12322 ms, max 553 ms, min 385 ms
----------------------------------------------------------------

2023-08-06 23:50:49 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-06 23:51:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 10 seconds
Variants: generated 100, build-succeeded 28, build-failed 37, syntax-invalid 18, redundant 17
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 12255 ms, max 521 ms, min 387 ms
----------------------------------------------------------------

2023-08-06 23:51:08 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-06 23:51:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 31 seconds
Variants: generated 100, build-succeeded 33, build-failed 31, syntax-invalid 15, redundant 21
Fitness: max 1(2), min 0.983(3), ave 0.991
Test execution time: sum 14605 ms, max 515 ms, min 389 ms
----------------------------------------------------------------

2023-08-06 23:51:29 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-06 23:51:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 53 seconds
Variants: generated 100, build-succeeded 35, build-failed 36, syntax-invalid 18, redundant 11
Fitness: max 1(2), min 0.957(1), ave 0.99
Test execution time: sum 15675 ms, max 530 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:51:52 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-06 23:52:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 11 seconds
Variants: generated 100, build-succeeded 22, build-failed 38, syntax-invalid 24, redundant 16
Fitness: max 0.991(18), min 0.966(1), ave 0.988
Test execution time: sum 9978 ms, max 677 ms, min 380 ms
----------------------------------------------------------------

2023-08-06 23:52:10 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-06 23:52:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 32 seconds
Variants: generated 100, build-succeeded 29, build-failed 38, syntax-invalid 16, redundant 17
Fitness: max 1(3), min 0.983(5), ave 0.991
Test execution time: sum 13706 ms, max 778 ms, min 399 ms
----------------------------------------------------------------

2023-08-06 23:52:31 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-06 23:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 49 seconds
Variants: generated 100, build-succeeded 23, build-failed 41, syntax-invalid 19, redundant 17
Fitness: max 0.991(21), min 0.983(2), ave 0.991
Test execution time: sum 10227 ms, max 468 ms, min 411 ms
----------------------------------------------------------------

2023-08-06 23:52:48 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-06 23:52:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 51 seconds
Variants: generated 4, build-succeeded 2, build-failed 1, syntax-invalid 0, redundant 1
Fitness: max 1(1), min 0.991(1), ave 0.996
Test execution time: sum 894 ms, max 451 ms, min 443 ms
----------------------------------------------------------------

2023-08-06 23:52:49 [main] [INFO]  KGenProgMain - GA stopped
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v132)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v132)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v132)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v132)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v132)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v132)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v602)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v720)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v819)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v819)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v819)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v819)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v819)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,7 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v819)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(0.0, 0.0);
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1244)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1244)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1244)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1244)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1244)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,7 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1244)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v1908)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2006)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2150)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2342)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(0.0, 0.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2540)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2619)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2619)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2619)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2619)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2619)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2619)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2717)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2717)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2717)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2717)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2717)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2717)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2728)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2728)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2728)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2728)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2728)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,8 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2728)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3102)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3102)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3102)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3102)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3102)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +909,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3102)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:56 [main] [INFO]  PatchLogExporter - patch (v3228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3329)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3739)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3739)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3739)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3739)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3739)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(0.0, 0.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3739)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3801)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3801)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3801)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3801)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3801)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v3801)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4044)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4222)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4222)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4222)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4222)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4222)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4222)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4229)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4229)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4229)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4229)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4229)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4229)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v4716)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5248)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5291)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5745)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v5828)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),
+					FastMath.cos(real) * MathUtils.sinh(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6003)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v6706)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7266)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v7531)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v8807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:57 [main] [INFO]  PatchLogExporter - patch (v9101)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9443)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10230)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,16 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            throw new NullArgumentException();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10529)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
+			return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v10850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,12 +151,21 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (real == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
@@ -2948,7 +2945,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v11642)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2926,9 +2926,6 @@
         yb = -(temp - ya - yb);
         ya = temp;
 
-        /* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
-        yb += epsB / (1.0 + epsA * epsA);
-
         double result;
         double resultb;
 
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12039)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,12 +151,21 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -292,15 +291,13 @@
         if (isNaN || Double.isNaN(divisor)) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
-                             imaginary  / divisor);
+        return NaN;
     }
 
     /**
@@ -326,7 +323,7 @@
         if (other instanceof Complex){
             Complex c = (Complex)other;
             if (c.isNaN) {
-                return isNaN;
+                return true;
             } else {
                 return (real == c.real) && (imaginary == c.imaginary);
             }
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v12328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,61 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v13831)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,61 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14005)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,52 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14112)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,43 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,52 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,70 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v14743)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,61 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15011)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,79 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15303)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,11 +151,73 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,79 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15534)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,70 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:58 [main] [INFO]  PatchLogExporter - patch (v15718)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,79 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,97 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,97 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v16746)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,61 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17107)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,88 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,79 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17241)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,79 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,88 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17433)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,88 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,124 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17638)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,88 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17672)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,97 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17787)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,97 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,88 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,7 +287,7 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
         if (divisor == 0d) {
@@ -299,7 +297,8 @@
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v17946)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,97 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +272,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,11 +151,127 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18108)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,106 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +273,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,13 +293,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,97 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        return null;
     }
 }
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18293)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,142 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,115 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2948,7 +2948,6 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
             zb += pib - resultb;
 
             result = za + zb;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18701)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,124 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +272,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18907)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,115 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:52:59 [main] [INFO]  PatchLogExporter - patch (v18917)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,11 +151,100 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +272,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v18928)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,142 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19018)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,124 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +273,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,10 +293,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19240)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,106 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19303)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,106 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,106 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +271,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19403)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,133 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +272,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,11 +151,118 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +273,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,17 +289,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,142 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +273,7 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			double real2 = 2.0 * real;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19617)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,115 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19632)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -151,7 +151,142 @@
         int count = 0;
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
-            final Localizable pat = msgPatterns.get(i);
+            {
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			{
+				final Localizable pat = msgPatterns.get(i);
+				final Object[] args = msgArguments.get(i);
+				final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale), locale);
+				sb.append(fmt.format(args));
+				if (++count < len) {
+					sb.append(separator);
+				}
+			}
+			final Localizable pat = msgPatterns.get(i);
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-06 23:53:00 [main] [INFO]  PatchLogExporter - patch (v19804)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-06 23:53:00 [main] [INFO]  KGenProgMain - Summary
Reached generation = 200
Generated variants = 19804
Syntax valid variants = 13475
Build succeeded variants = 4886
Time elapsed = 1 hours 11 minutes 1 seconds
Exit status = SUCCESS
