2023-08-06 23:53:01 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-06 23:53:01 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-06 23:53:01 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-06 23:53:01 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math46/kgenprog-46.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math46 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.complex.ComplexTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 2 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-06 23:53:23 [main] [INFO]  KGenProgMain - initial failed tests (2/116)
org.apache.commons.math.complex.ComplexTest.testDivideZero: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
org.apache.commons.math.complex.ComplexTest.testAtanI: null

2023-08-06 23:53:24 [main] [INFO]  KGenProgMain - GA started
2023-08-06 23:53:24 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-06 23:53:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 50, build-succeeded 7, build-failed 30, syntax-invalid 1, redundant 12
Fitness: max 0.991(3), min 0.966(1), ave 0.983
Test execution time: sum 6567 ms, max 1512 ms, min 506 ms
----------------------------------------------------------------

2023-08-06 23:53:35 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-06 23:53:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 seconds
Variants: generated 50, build-succeeded 6, build-failed 31, syntax-invalid 2, redundant 11
Fitness: max 0.991(4), min 0.966(2), ave 0.983
Test execution time: sum 3021 ms, max 616 ms, min 471 ms
----------------------------------------------------------------

2023-08-06 23:53:43 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-06 23:54:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 seconds
Variants: generated 100, build-succeeded 23, build-failed 29, syntax-invalid 3, redundant 45
Fitness: max 0.991(17), min 0.828(1), ave 0.98
Test execution time: sum 12438 ms, max 879 ms, min 422 ms
----------------------------------------------------------------

2023-08-06 23:54:01 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-06 23:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 seconds
Variants: generated 100, build-succeeded 23, build-failed 26, syntax-invalid 16, redundant 35
Fitness: max 1(1), min 0.966(5), ave 0.984
Test execution time: sum 11274 ms, max 798 ms, min 423 ms
----------------------------------------------------------------

2023-08-06 23:54:18 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-06 23:54:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 13 seconds
Variants: generated 100, build-succeeded 29, build-failed 26, syntax-invalid 9, redundant 36
Fitness: max 1(1), min 0.966(4), ave 0.987
Test execution time: sum 14347 ms, max 934 ms, min 414 ms
----------------------------------------------------------------

2023-08-06 23:54:38 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-06 23:54:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 29 seconds
Variants: generated 100, build-succeeded 24, build-failed 26, syntax-invalid 9, redundant 41
Fitness: max 0.991(20), min 0.966(3), ave 0.988
Test execution time: sum 11236 ms, max 569 ms, min 427 ms
----------------------------------------------------------------

2023-08-06 23:54:53 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-06 23:55:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 44 seconds
Variants: generated 100, build-succeeded 21, build-failed 27, syntax-invalid 19, redundant 33
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 10033 ms, max 739 ms, min 415 ms
----------------------------------------------------------------

2023-08-06 23:55:08 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-06 23:55:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 2 seconds
Variants: generated 100, build-succeeded 29, build-failed 27, syntax-invalid 16, redundant 28
Fitness: max 1(1), min 0.966(5), ave 0.986
Test execution time: sum 13490 ms, max 767 ms, min 396 ms
----------------------------------------------------------------

2023-08-06 23:55:26 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-06 23:55:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 18 seconds
Variants: generated 100, build-succeeded 23, build-failed 24, syntax-invalid 22, redundant 31
Fitness: max 1(2), min 0.621(1), ave 0.975
Test execution time: sum 11532 ms, max 821 ms, min 398 ms
----------------------------------------------------------------

2023-08-06 23:55:42 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-06 23:55:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 33 seconds
Variants: generated 100, build-succeeded 22, build-failed 25, syntax-invalid 23, redundant 30
Fitness: max 1(4), min 0.974(1), ave 0.992
Test execution time: sum 10578 ms, max 773 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 23:55:57 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-06 23:56:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 50 seconds
Variants: generated 100, build-succeeded 29, build-failed 24, syntax-invalid 17, redundant 30
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 13237 ms, max 537 ms, min 405 ms
----------------------------------------------------------------

2023-08-06 23:56:14 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-06 23:56:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 5 seconds
Variants: generated 100, build-succeeded 22, build-failed 32, syntax-invalid 28, redundant 18
Fitness: max 1(1), min 0.966(1), ave 0.988
Test execution time: sum 9998 ms, max 486 ms, min 418 ms
----------------------------------------------------------------

2023-08-06 23:56:29 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-06 23:56:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 20 seconds
Variants: generated 100, build-succeeded 22, build-failed 26, syntax-invalid 25, redundant 27
Fitness: max 0.991(18), min 0.966(2), ave 0.988
Test execution time: sum 11287 ms, max 798 ms, min 421 ms
----------------------------------------------------------------

2023-08-06 23:56:44 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-06 23:57:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 39 seconds
Variants: generated 100, build-succeeded 31, build-failed 27, syntax-invalid 20, redundant 22
Fitness: max 0.991(27), min 0.966(2), ave 0.989
Test execution time: sum 14243 ms, max 532 ms, min 405 ms
----------------------------------------------------------------

2023-08-06 23:57:03 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-06 23:57:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 55 seconds
Variants: generated 100, build-succeeded 25, build-failed 35, syntax-invalid 22, redundant 18
Fitness: max 0.991(20), min 0.966(3), ave 0.987
Test execution time: sum 11539 ms, max 614 ms, min 416 ms
----------------------------------------------------------------

2023-08-06 23:57:19 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-06 23:57:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 13 seconds
Variants: generated 100, build-succeeded 29, build-failed 26, syntax-invalid 24, redundant 21
Fitness: max 0.991(23), min 0.966(4), ave 0.987
Test execution time: sum 13338 ms, max 506 ms, min 430 ms
----------------------------------------------------------------

2023-08-06 23:57:37 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-06 23:57:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 34 seconds
Variants: generated 100, build-succeeded 30, build-failed 32, syntax-invalid 28, redundant 10
Fitness: max 1(1), min 0.966(2), ave 0.99
Test execution time: sum 15374 ms, max 774 ms, min 403 ms
----------------------------------------------------------------

2023-08-06 23:57:59 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-06 23:58:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 53 seconds
Variants: generated 100, build-succeeded 25, build-failed 32, syntax-invalid 29, redundant 14
Fitness: max 0.991(19), min 0.966(2), ave 0.988
Test execution time: sum 12969 ms, max 754 ms, min 409 ms
----------------------------------------------------------------

2023-08-06 23:58:18 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-06 23:58:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 13 seconds
Variants: generated 100, build-succeeded 26, build-failed 26, syntax-invalid 21, redundant 27
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 14856 ms, max 1195 ms, min 412 ms
----------------------------------------------------------------

2023-08-06 23:58:37 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-06 23:58:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 33 seconds
Variants: generated 100, build-succeeded 27, build-failed 25, syntax-invalid 26, redundant 22
Fitness: max 1(1), min 0.983(3), ave 0.991
Test execution time: sum 14763 ms, max 830 ms, min 401 ms
----------------------------------------------------------------

2023-08-06 23:58:57 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-06 23:59:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 53 seconds
Variants: generated 100, build-succeeded 27, build-failed 29, syntax-invalid 33, redundant 11
Fitness: max 1(1), min 0.966(3), ave 0.988
Test execution time: sum 14632 ms, max 814 ms, min 406 ms
----------------------------------------------------------------

2023-08-06 23:59:18 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-06 23:59:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 16 seconds
Variants: generated 100, build-succeeded 30, build-failed 30, syntax-invalid 29, redundant 11
Fitness: max 0.991(20), min 0.957(1), ave 0.988
Test execution time: sum 16526 ms, max 776 ms, min 414 ms
----------------------------------------------------------------

2023-08-06 23:59:41 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-07 00:00:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 36 seconds
Variants: generated 100, build-succeeded 25, build-failed 27, syntax-invalid 33, redundant 15
Fitness: max 1(2), min 0.966(1), ave 0.989
Test execution time: sum 14216 ms, max 827 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 00:00:00 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-07 00:00:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 56 seconds
Variants: generated 100, build-succeeded 22, build-failed 32, syntax-invalid 34, redundant 12
Fitness: max 0.991(16), min 0.966(2), ave 0.987
Test execution time: sum 13461 ms, max 889 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 00:00:20 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-07 00:00:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 15 seconds
Variants: generated 100, build-succeeded 22, build-failed 34, syntax-invalid 35, redundant 9
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 13043 ms, max 782 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 00:00:39 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-07 00:01:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 37 seconds
Variants: generated 100, build-succeeded 26, build-failed 28, syntax-invalid 24, redundant 22
Fitness: max 0.991(15), min 0.957(1), ave 0.984
Test execution time: sum 16975 ms, max 871 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 00:01:01 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-07 00:01:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 56 seconds
Variants: generated 100, build-succeeded 19, build-failed 32, syntax-invalid 33, redundant 16
Fitness: max 0.991(12), min 0.966(1), ave 0.987
Test execution time: sum 13160 ms, max 827 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 00:01:20 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-07 00:01:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 18 seconds
Variants: generated 100, build-succeeded 22, build-failed 31, syntax-invalid 35, redundant 12
Fitness: max 0.991(16), min 0.957(2), ave 0.987
Test execution time: sum 15776 ms, max 975 ms, min 476 ms
----------------------------------------------------------------

2023-08-07 00:01:42 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-07 00:02:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 44 seconds
Variants: generated 100, build-succeeded 28, build-failed 31, syntax-invalid 30, redundant 11
Fitness: max 0.991(21), min 0.957(1), ave 0.986
Test execution time: sum 18919 ms, max 883 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 00:02:08 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-07 00:02:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 4 seconds
Variants: generated 100, build-succeeded 26, build-failed 35, syntax-invalid 22, redundant 17
Fitness: max 0.991(19), min 0.966(1), ave 0.988
Test execution time: sum 13202 ms, max 965 ms, min 399 ms
----------------------------------------------------------------

2023-08-07 00:02:28 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-07 00:02:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 23 seconds
Variants: generated 100, build-succeeded 27, build-failed 37, syntax-invalid 24, redundant 12
Fitness: max 0.991(22), min 0.931(1), ave 0.986
Test execution time: sum 13735 ms, max 779 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 00:02:47 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-07 00:03:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 42 seconds
Variants: generated 100, build-succeeded 26, build-failed 37, syntax-invalid 26, redundant 11
Fitness: max 0.991(17), min 0.948(1), ave 0.985
Test execution time: sum 13737 ms, max 786 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 00:03:06 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-07 00:03:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 100, build-succeeded 28, build-failed 38, syntax-invalid 25, redundant 9
Fitness: max 0.991(17), min 0.966(2), ave 0.986
Test execution time: sum 14621 ms, max 874 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 00:03:26 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-07 00:03:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 23 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 24, redundant 18
Fitness: max 0.991(20), min 0.983(8), ave 0.989
Test execution time: sum 14975 ms, max 810 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 00:03:47 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-07 00:04:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 40 seconds
Variants: generated 100, build-succeeded 22, build-failed 33, syntax-invalid 34, redundant 11
Fitness: max 0.991(16), min 0.966(1), ave 0.988
Test execution time: sum 11848 ms, max 753 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 00:04:04 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-07 00:04:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 59 seconds
Variants: generated 100, build-succeeded 26, build-failed 30, syntax-invalid 31, redundant 13
Fitness: max 0.991(23), min 0.983(3), ave 0.99
Test execution time: sum 14520 ms, max 864 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 00:04:23 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-07 00:04:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 21 seconds
Variants: generated 100, build-succeeded 32, build-failed 30, syntax-invalid 27, redundant 11
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 17353 ms, max 841 ms, min 389 ms
----------------------------------------------------------------

2023-08-07 00:04:45 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-07 00:05:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 43 seconds
Variants: generated 100, build-succeeded 29, build-failed 30, syntax-invalid 30, redundant 11
Fitness: max 0.991(26), min 0.966(1), ave 0.99
Test execution time: sum 16808 ms, max 872 ms, min 397 ms
----------------------------------------------------------------

2023-08-07 00:05:07 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-07 00:05:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 5 seconds
Variants: generated 100, build-succeeded 29, build-failed 30, syntax-invalid 24, redundant 17
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 16544 ms, max 838 ms, min 407 ms
----------------------------------------------------------------

2023-08-07 00:05:29 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-07 00:05:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 26 seconds
Variants: generated 100, build-succeeded 26, build-failed 33, syntax-invalid 31, redundant 10
Fitness: max 0.991(22), min 0.983(4), ave 0.99
Test execution time: sum 15814 ms, max 851 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 00:05:51 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-07 00:06:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 52 seconds
Variants: generated 100, build-succeeded 30, build-failed 34, syntax-invalid 22, redundant 14
Fitness: max 0.991(28), min 0.966(1), ave 0.99
Test execution time: sum 19422 ms, max 849 ms, min 453 ms
----------------------------------------------------------------

2023-08-07 00:06:16 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-07 00:06:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 13 seconds
Variants: generated 100, build-succeeded 23, build-failed 36, syntax-invalid 29, redundant 12
Fitness: max 0.991(21), min 0.983(2), ave 0.991
Test execution time: sum 14761 ms, max 880 ms, min 497 ms
----------------------------------------------------------------

2023-08-07 00:06:37 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-07 00:07:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 39 seconds
Variants: generated 100, build-succeeded 31, build-failed 29, syntax-invalid 19, redundant 21
Fitness: max 0.991(25), min 0.974(1), ave 0.989
Test execution time: sum 20511 ms, max 813 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 00:07:04 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-07 00:07:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 58 seconds
Variants: generated 100, build-succeeded 23, build-failed 34, syntax-invalid 28, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 12432 ms, max 851 ms, min 398 ms
----------------------------------------------------------------

2023-08-07 00:07:22 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-07 00:07:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 14 seconds
Variants: generated 100, build-succeeded 22, build-failed 31, syntax-invalid 32, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 11823 ms, max 720 ms, min 397 ms
----------------------------------------------------------------

2023-08-07 00:07:39 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-07 00:08:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 36 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 29, redundant 13
Fitness: max 1(1), min 0.983(4), ave 0.99
Test execution time: sum 16351 ms, max 881 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 00:08:00 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-07 00:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 58 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 28, redundant 14
Fitness: max 0.991(27), min 0.974(1), ave 0.991
Test execution time: sum 16197 ms, max 818 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 00:08:22 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-07 00:08:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 25 seconds
Variants: generated 100, build-succeeded 35, build-failed 23, syntax-invalid 29, redundant 13
Fitness: max 1(2), min 0.974(2), ave 0.99
Test execution time: sum 21317 ms, max 882 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 00:08:49 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-07 00:09:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 47 seconds
Variants: generated 100, build-succeeded 26, build-failed 29, syntax-invalid 30, redundant 15
Fitness: max 0.991(26), min 0.991(26), ave 0.991
Test execution time: sum 17140 ms, max 905 ms, min 462 ms
----------------------------------------------------------------

2023-08-07 00:09:12 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-07 00:09:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 6 seconds
Variants: generated 100, build-succeeded 20, build-failed 26, syntax-invalid 40, redundant 14
Fitness: max 1(1), min 0.966(2), ave 0.988
Test execution time: sum 13263 ms, max 840 ms, min 473 ms
----------------------------------------------------------------

2023-08-07 00:09:30 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-07 00:09:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 25 seconds
Variants: generated 100, build-succeeded 19, build-failed 30, syntax-invalid 31, redundant 20
Fitness: max 0.991(17), min 0.983(2), ave 0.99
Test execution time: sum 12772 ms, max 865 ms, min 545 ms
----------------------------------------------------------------

2023-08-07 00:09:49 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-07 00:10:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 49 seconds
Variants: generated 100, build-succeeded 26, build-failed 26, syntax-invalid 35, redundant 13
Fitness: max 0.991(25), min 0.845(1), ave 0.986
Test execution time: sum 17253 ms, max 852 ms, min 477 ms
----------------------------------------------------------------

2023-08-07 00:10:13 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-07 00:10:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 9 seconds
Variants: generated 100, build-succeeded 20, build-failed 28, syntax-invalid 37, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 13820 ms, max 891 ms, min 466 ms
----------------------------------------------------------------

2023-08-07 00:10:33 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-07 00:11:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 38 seconds
Variants: generated 100, build-succeeded 32, build-failed 31, syntax-invalid 21, redundant 16
Fitness: max 0.991(26), min 0.922(1), ave 0.988
Test execution time: sum 23730 ms, max 1020 ms, min 455 ms
----------------------------------------------------------------

2023-08-07 00:11:02 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-07 00:11:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 55 seconds
Variants: generated 100, build-succeeded 21, build-failed 33, syntax-invalid 33, redundant 13
Fitness: max 0.991(18), min 0.966(1), ave 0.989
Test execution time: sum 12229 ms, max 813 ms, min 414 ms
----------------------------------------------------------------

2023-08-07 00:11:20 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-07 00:11:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 17 seconds
Variants: generated 100, build-succeeded 26, build-failed 33, syntax-invalid 23, redundant 18
Fitness: max 1(1), min 0.957(1), ave 0.99
Test execution time: sum 15806 ms, max 859 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 00:11:41 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-07 00:12:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 40 seconds
Variants: generated 100, build-succeeded 30, build-failed 27, syntax-invalid 35, redundant 8
Fitness: max 0.991(24), min 0.974(2), ave 0.989
Test execution time: sum 18438 ms, max 831 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 00:12:05 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-07 00:12:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 4 seconds
Variants: generated 100, build-succeeded 27, build-failed 27, syntax-invalid 34, redundant 12
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 18047 ms, max 892 ms, min 519 ms
----------------------------------------------------------------

2023-08-07 00:12:28 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-07 00:12:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 27 seconds
Variants: generated 100, build-succeeded 27, build-failed 23, syntax-invalid 31, redundant 19
Fitness: max 0.991(22), min 0.974(1), ave 0.989
Test execution time: sum 18114 ms, max 812 ms, min 442 ms
----------------------------------------------------------------

2023-08-07 00:12:52 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-07 00:13:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 47 seconds
Variants: generated 100, build-succeeded 21, build-failed 25, syntax-invalid 35, redundant 19
Fitness: max 1(2), min 0.983(3), ave 0.991
Test execution time: sum 13534 ms, max 889 ms, min 455 ms
----------------------------------------------------------------

2023-08-07 00:13:11 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-07 00:13:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 5 seconds
Variants: generated 100, build-succeeded 20, build-failed 33, syntax-invalid 30, redundant 17
Fitness: max 0.991(17), min 0.983(3), ave 0.99
Test execution time: sum 13312 ms, max 868 ms, min 500 ms
----------------------------------------------------------------

2023-08-07 00:13:29 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-07 00:13:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 25 seconds
Variants: generated 100, build-succeeded 25, build-failed 31, syntax-invalid 34, redundant 10
Fitness: max 1(2), min 0.922(1), ave 0.988
Test execution time: sum 15264 ms, max 865 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 00:13:50 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-07 00:14:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 45 seconds
Variants: generated 100, build-succeeded 23, build-failed 24, syntax-invalid 37, redundant 16
Fitness: max 1(1), min 0.983(3), ave 0.991
Test execution time: sum 14871 ms, max 998 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 00:14:10 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-07 00:14:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 4 seconds
Variants: generated 100, build-succeeded 20, build-failed 29, syntax-invalid 41, redundant 10
Fitness: max 0.991(15), min 0.983(5), ave 0.989
Test execution time: sum 13409 ms, max 899 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 00:14:29 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-07 00:14:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 26 seconds
Variants: generated 100, build-succeeded 23, build-failed 26, syntax-invalid 32, redundant 19
Fitness: max 1(1), min 0.974(2), ave 0.989
Test execution time: sum 15660 ms, max 865 ms, min 488 ms
----------------------------------------------------------------

2023-08-07 00:14:50 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-07 00:15:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 45 seconds
Variants: generated 100, build-succeeded 22, build-failed 26, syntax-invalid 35, redundant 17
Fitness: max 0.991(16), min 0.966(1), ave 0.988
Test execution time: sum 14424 ms, max 898 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 00:15:10 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-07 00:15:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 6 seconds
Variants: generated 100, build-succeeded 22, build-failed 30, syntax-invalid 35, redundant 13
Fitness: max 0.991(20), min 0.983(2), ave 0.991
Test execution time: sum 14827 ms, max 868 ms, min 495 ms
----------------------------------------------------------------

2023-08-07 00:15:31 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-07 00:15:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 25 seconds
Variants: generated 100, build-succeeded 20, build-failed 25, syntax-invalid 43, redundant 12
Fitness: max 1(1), min 0.922(1), ave 0.988
Test execution time: sum 13222 ms, max 803 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 00:15:49 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-07 00:16:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 40 seconds
Variants: generated 100, build-succeeded 14, build-failed 36, syntax-invalid 39, redundant 11
Fitness: max 0.991(14), min 0.991(14), ave 0.991
Test execution time: sum 9568 ms, max 798 ms, min 513 ms
----------------------------------------------------------------

2023-08-07 00:16:04 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-07 00:16:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 58 seconds
Variants: generated 100, build-succeeded 19, build-failed 35, syntax-invalid 37, redundant 9
Fitness: max 0.991(17), min 0.983(2), ave 0.99
Test execution time: sum 12228 ms, max 876 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 00:16:22 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-07 00:16:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 19 seconds
Variants: generated 100, build-succeeded 27, build-failed 25, syntax-invalid 39, redundant 9
Fitness: max 1(1), min 0.983(5), ave 0.99
Test execution time: sum 16472 ms, max 828 ms, min 401 ms
----------------------------------------------------------------

2023-08-07 00:16:44 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-07 00:17:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 43 seconds
Variants: generated 100, build-succeeded 26, build-failed 30, syntax-invalid 31, redundant 13
Fitness: max 1(3), min 0.983(3), ave 0.991
Test execution time: sum 17159 ms, max 958 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 00:17:07 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-07 00:17:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 0 seconds
Variants: generated 100, build-succeeded 16, build-failed 30, syntax-invalid 38, redundant 16
Fitness: max 0.991(16), min 0.991(16), ave 0.991
Test execution time: sum 10558 ms, max 831 ms, min 526 ms
----------------------------------------------------------------

2023-08-07 00:17:24 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-07 00:17:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 23 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 30, redundant 12
Fitness: max 0.991(24), min 0.983(4), ave 0.99
Test execution time: sum 17849 ms, max 884 ms, min 416 ms
----------------------------------------------------------------

2023-08-07 00:17:48 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-07 00:18:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 45 seconds
Variants: generated 100, build-succeeded 24, build-failed 31, syntax-invalid 37, redundant 8
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 16003 ms, max 921 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 00:18:09 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-07 00:18:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 6 seconds
Variants: generated 100, build-succeeded 21, build-failed 29, syntax-invalid 43, redundant 7
Fitness: max 0.991(17), min 0.974(1), ave 0.989
Test execution time: sum 14596 ms, max 846 ms, min 490 ms
----------------------------------------------------------------

2023-08-07 00:18:30 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-07 00:18:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 23 seconds
Variants: generated 100, build-succeeded 18, build-failed 29, syntax-invalid 43, redundant 10
Fitness: max 0.991(15), min 0.983(3), ave 0.99
Test execution time: sum 11468 ms, max 816 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 00:18:47 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-07 00:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 43 seconds
Variants: generated 100, build-succeeded 20, build-failed 40, syntax-invalid 35, redundant 5
Fitness: max 0.991(17), min 0.966(1), ave 0.989
Test execution time: sum 13451 ms, max 812 ms, min 462 ms
----------------------------------------------------------------

2023-08-07 00:19:07 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-07 00:19:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 59 seconds
Variants: generated 100, build-succeeded 14, build-failed 28, syntax-invalid 44, redundant 14
Fitness: max 0.991(13), min 0.983(1), ave 0.991
Test execution time: sum 9064 ms, max 801 ms, min 485 ms
----------------------------------------------------------------

2023-08-07 00:19:23 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-07 00:19:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 21 seconds
Variants: generated 100, build-succeeded 24, build-failed 33, syntax-invalid 31, redundant 12
Fitness: max 1(1), min 0.948(1), ave 0.989
Test execution time: sum 15761 ms, max 833 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 00:19:45 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-07 00:20:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 38 seconds
Variants: generated 100, build-succeeded 19, build-failed 35, syntax-invalid 35, redundant 11
Fitness: max 0.991(12), min 0.966(3), ave 0.985
Test execution time: sum 11987 ms, max 887 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 00:20:02 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-07 00:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 57 seconds
Variants: generated 100, build-succeeded 18, build-failed 23, syntax-invalid 46, redundant 13
Fitness: max 1(1), min 0.983(6), ave 0.989
Test execution time: sum 12186 ms, max 1022 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 00:20:21 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-07 00:20:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 14 seconds
Variants: generated 100, build-succeeded 19, build-failed 27, syntax-invalid 39, redundant 15
Fitness: max 0.991(13), min 0.966(1), ave 0.987
Test execution time: sum 11488 ms, max 814 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 00:20:38 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-07 00:20:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 32 seconds
Variants: generated 100, build-succeeded 18, build-failed 28, syntax-invalid 39, redundant 15
Fitness: max 0.991(17), min 0.974(1), ave 0.99
Test execution time: sum 11465 ms, max 786 ms, min 454 ms
----------------------------------------------------------------

2023-08-07 00:20:56 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-07 00:21:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 51 seconds
Variants: generated 100, build-succeeded 20, build-failed 26, syntax-invalid 42, redundant 12
Fitness: max 0.991(17), min 0.957(1), ave 0.988
Test execution time: sum 14164 ms, max 944 ms, min 488 ms
----------------------------------------------------------------

2023-08-07 00:21:15 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-07 00:21:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 9 seconds
Variants: generated 100, build-succeeded 18, build-failed 32, syntax-invalid 41, redundant 9
Fitness: max 0.991(13), min 0.836(1), ave 0.978
Test execution time: sum 11742 ms, max 846 ms, min 458 ms
----------------------------------------------------------------

2023-08-07 00:21:34 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-07 00:21:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 27 seconds
Variants: generated 100, build-succeeded 20, build-failed 28, syntax-invalid 36, redundant 16
Fitness: max 0.991(18), min 0.983(2), ave 0.991
Test execution time: sum 12453 ms, max 866 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 00:21:51 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-07 00:22:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 43 seconds
Variants: generated 100, build-succeeded 16, build-failed 29, syntax-invalid 42, redundant 13
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 10239 ms, max 859 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 00:22:07 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-07 00:22:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 58 seconds
Variants: generated 100, build-succeeded 15, build-failed 25, syntax-invalid 47, redundant 13
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 10011 ms, max 767 ms, min 500 ms
----------------------------------------------------------------

2023-08-07 00:22:22 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-07 00:22:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 16 seconds
Variants: generated 100, build-succeeded 20, build-failed 27, syntax-invalid 43, redundant 10
Fitness: max 0.991(17), min 0.966(1), ave 0.989
Test execution time: sum 13277 ms, max 793 ms, min 483 ms
----------------------------------------------------------------

2023-08-07 00:22:41 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-07 00:23:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 36 seconds
Variants: generated 100, build-succeeded 18, build-failed 29, syntax-invalid 40, redundant 13
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 12319 ms, max 869 ms, min 470 ms
----------------------------------------------------------------

2023-08-07 00:23:00 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-07 00:23:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 57 seconds
Variants: generated 100, build-succeeded 22, build-failed 28, syntax-invalid 42, redundant 8
Fitness: max 1(1), min 0.931(1), ave 0.987
Test execution time: sum 14320 ms, max 812 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 00:23:21 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-07 00:23:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 19 seconds
Variants: generated 100, build-succeeded 23, build-failed 26, syntax-invalid 40, redundant 11
Fitness: max 0.991(20), min 0.966(1), ave 0.99
Test execution time: sum 15437 ms, max 845 ms, min 476 ms
----------------------------------------------------------------

2023-08-07 00:23:43 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-07 00:24:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 40 seconds
Variants: generated 100, build-succeeded 21, build-failed 28, syntax-invalid 45, redundant 6
Fitness: max 1(2), min 0.966(1), ave 0.99
Test execution time: sum 14619 ms, max 870 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 00:24:04 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-07 00:24:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 5 seconds
Variants: generated 100, build-succeeded 26, build-failed 29, syntax-invalid 38, redundant 7
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 17555 ms, max 885 ms, min 447 ms
----------------------------------------------------------------

2023-08-07 00:24:29 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-07 00:24:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 27 seconds
Variants: generated 100, build-succeeded 22, build-failed 34, syntax-invalid 42, redundant 2
Fitness: max 0.991(21), min 0.983(1), ave 0.991
Test execution time: sum 14744 ms, max 890 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 00:24:51 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-07 00:25:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 44 seconds
Variants: generated 100, build-succeeded 15, build-failed 32, syntax-invalid 40, redundant 13
Fitness: max 0.991(15), min 0.991(15), ave 0.991
Test execution time: sum 10473 ms, max 939 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 00:25:08 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-07 00:25:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 0 seconds
Variants: generated 100, build-succeeded 17, build-failed 34, syntax-invalid 40, redundant 9
Fitness: max 0.991(10), min 0.948(1), ave 0.985
Test execution time: sum 10857 ms, max 957 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 00:25:24 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-07 00:25:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 11 seconds
Variants: generated 100, build-succeeded 8, build-failed 33, syntax-invalid 48, redundant 11
Fitness: max 0.991(7), min 0.983(1), ave 0.99
Test execution time: sum 4964 ms, max 749 ms, min 455 ms
----------------------------------------------------------------

2023-08-07 00:25:35 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-07 00:25:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 27 seconds
Variants: generated 100, build-succeeded 15, build-failed 32, syntax-invalid 43, redundant 10
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 10174 ms, max 853 ms, min 506 ms
----------------------------------------------------------------

2023-08-07 00:25:51 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-07 00:26:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 41 seconds
Variants: generated 100, build-succeeded 12, build-failed 34, syntax-invalid 42, redundant 12
Fitness: max 0.991(10), min 0.966(1), ave 0.989
Test execution time: sum 8410 ms, max 844 ms, min 562 ms
----------------------------------------------------------------

2023-08-07 00:26:05 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-07 00:26:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 0 seconds
Variants: generated 100, build-succeeded 17, build-failed 31, syntax-invalid 43, redundant 9
Fitness: max 0.991(14), min 0.974(1), ave 0.989
Test execution time: sum 11550 ms, max 870 ms, min 460 ms
----------------------------------------------------------------

2023-08-07 00:26:24 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-07 00:26:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 12 seconds
Variants: generated 100, build-succeeded 10, build-failed 33, syntax-invalid 47, redundant 10
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 6822 ms, max 765 ms, min 578 ms
----------------------------------------------------------------

2023-08-07 00:26:36 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-07 00:26:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 24 seconds
Variants: generated 100, build-succeeded 11, build-failed 29, syntax-invalid 52, redundant 8
Fitness: max 0.991(9), min 0.983(2), ave 0.99
Test execution time: sum 7235 ms, max 761 ms, min 503 ms
----------------------------------------------------------------

2023-08-07 00:26:49 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-07 00:27:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 40 seconds
Variants: generated 100, build-succeeded 16, build-failed 20, syntax-invalid 48, redundant 16
Fitness: max 1(1), min 0.905(1), ave 0.984
Test execution time: sum 10629 ms, max 846 ms, min 453 ms
----------------------------------------------------------------

2023-08-07 00:27:04 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-07 00:27:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 49 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 54, redundant 12
Fitness: max 0.991(3), min 0.966(1), ave 0.984
Test execution time: sum 2989 ms, max 753 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 00:27:13 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-07 00:27:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 0 seconds
Variants: generated 100, build-succeeded 10, build-failed 22, syntax-invalid 53, redundant 15
Fitness: max 0.991(9), min 0.974(1), ave 0.99
Test execution time: sum 6363 ms, max 854 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 00:27:24 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-07 00:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 14 seconds
Variants: generated 100, build-succeeded 15, build-failed 32, syntax-invalid 42, redundant 11
Fitness: max 0.991(8), min 0.957(1), ave 0.985
Test execution time: sum 9142 ms, max 829 ms, min 426 ms
----------------------------------------------------------------

2023-08-07 00:27:39 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-07 00:27:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 25 seconds
Variants: generated 100, build-succeeded 9, build-failed 35, syntax-invalid 46, redundant 10
Fitness: max 0.991(8), min 0.974(1), ave 0.989
Test execution time: sum 5615 ms, max 862 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 00:27:49 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-07 00:28:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 35 seconds
Variants: generated 100, build-succeeded 7, build-failed 34, syntax-invalid 46, redundant 13
Fitness: max 0.991(6), min 0.983(1), ave 0.99
Test execution time: sum 4736 ms, max 777 ms, min 536 ms
----------------------------------------------------------------

2023-08-07 00:28:00 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-07 00:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 50 seconds
Variants: generated 100, build-succeeded 14, build-failed 24, syntax-invalid 49, redundant 13
Fitness: max 0.991(11), min 0.931(1), ave 0.985
Test execution time: sum 9565 ms, max 903 ms, min 451 ms
----------------------------------------------------------------

2023-08-07 00:28:14 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-07 00:28:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 2 seconds
Variants: generated 100, build-succeeded 9, build-failed 38, syntax-invalid 47, redundant 6
Fitness: max 1(1), min 0.957(1), ave 0.986
Test execution time: sum 5980 ms, max 803 ms, min 480 ms
----------------------------------------------------------------

2023-08-07 00:28:27 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-07 00:28:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 17 seconds
Variants: generated 100, build-succeeded 13, build-failed 30, syntax-invalid 46, redundant 11
Fitness: max 0.991(9), min 0.966(1), ave 0.986
Test execution time: sum 8048 ms, max 764 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 00:28:41 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-07 00:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 29 seconds
Variants: generated 100, build-succeeded 10, build-failed 25, syntax-invalid 51, redundant 14
Fitness: max 0.991(8), min 0.983(2), ave 0.99
Test execution time: sum 6811 ms, max 989 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 00:28:53 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-07 00:29:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 45 seconds
Variants: generated 100, build-succeeded 15, build-failed 24, syntax-invalid 45, redundant 16
Fitness: max 0.991(10), min 0.845(1), ave 0.978
Test execution time: sum 10625 ms, max 884 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 00:29:10 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-07 00:29:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 4 seconds
Variants: generated 100, build-succeeded 12, build-failed 30, syntax-invalid 52, redundant 6
Fitness: max 0.991(12), min 0.991(12), ave 0.991
Test execution time: sum 9885 ms, max 1139 ms, min 556 ms
----------------------------------------------------------------

2023-08-07 00:29:28 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-07 00:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 21 seconds
Variants: generated 100, build-succeeded 14, build-failed 19, syntax-invalid 55, redundant 12
Fitness: max 1(1), min 0.836(1), ave 0.978
Test execution time: sum 10222 ms, max 1051 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 00:29:46 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-07 00:30:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 38 seconds
Variants: generated 100, build-succeeded 15, build-failed 29, syntax-invalid 48, redundant 8
Fitness: max 1(1), min 0.974(1), ave 0.989
Test execution time: sum 10231 ms, max 777 ms, min 496 ms
----------------------------------------------------------------

2023-08-07 00:30:03 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-07 00:30:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 51 seconds
Variants: generated 100, build-succeeded 10, build-failed 33, syntax-invalid 50, redundant 7
Fitness: max 0.991(8), min 0.966(1), ave 0.988
Test execution time: sum 6822 ms, max 847 ms, min 522 ms
----------------------------------------------------------------

2023-08-07 00:30:15 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-07 00:30:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 0 seconds
Variants: generated 100, build-succeeded 4, build-failed 28, syntax-invalid 55, redundant 13
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 2952 ms, max 931 ms, min 658 ms
----------------------------------------------------------------

2023-08-07 00:30:24 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-07 00:30:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 10 seconds
Variants: generated 100, build-succeeded 9, build-failed 33, syntax-invalid 49, redundant 9
Fitness: max 0.991(8), min 0.983(1), ave 0.99
Test execution time: sum 5658 ms, max 770 ms, min 486 ms
----------------------------------------------------------------

2023-08-07 00:30:35 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-07 00:30:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 22 seconds
Variants: generated 100, build-succeeded 10, build-failed 23, syntax-invalid 53, redundant 14
Fitness: max 0.991(7), min 0.897(1), ave 0.979
Test execution time: sum 6375 ms, max 853 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 00:30:46 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-07 00:30:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 32 seconds
Variants: generated 100, build-succeeded 9, build-failed 22, syntax-invalid 55, redundant 14
Fitness: max 0.991(6), min 0.974(1), ave 0.988
Test execution time: sum 5610 ms, max 812 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 00:30:57 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-07 00:31:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 43 seconds
Variants: generated 100, build-succeeded 10, build-failed 23, syntax-invalid 54, redundant 13
Fitness: max 0.991(8), min 0.983(2), ave 0.99
Test execution time: sum 6601 ms, max 824 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 00:31:08 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-07 00:31:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 55 seconds
Variants: generated 100, build-succeeded 11, build-failed 23, syntax-invalid 56, redundant 10
Fitness: max 1(1), min 0.871(1), ave 0.979
Test execution time: sum 6246 ms, max 755 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 00:31:19 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-07 00:31:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 9 seconds
Variants: generated 100, build-succeeded 13, build-failed 18, syntax-invalid 54, redundant 15
Fitness: max 1(1), min 0.845(1), ave 0.969
Test execution time: sum 7978 ms, max 869 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 00:31:33 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-07 00:31:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 21 seconds
Variants: generated 100, build-succeeded 9, build-failed 29, syntax-invalid 54, redundant 8
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 6182 ms, max 888 ms, min 472 ms
----------------------------------------------------------------

2023-08-07 00:31:45 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-07 00:31:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 34 seconds
Variants: generated 100, build-succeeded 12, build-failed 34, syntax-invalid 47, redundant 7
Fitness: max 0.991(10), min 0.948(1), ave 0.987
Test execution time: sum 7603 ms, max 896 ms, min 455 ms
----------------------------------------------------------------

2023-08-07 00:31:58 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-07 00:32:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 49 seconds
Variants: generated 100, build-succeeded 13, build-failed 21, syntax-invalid 51, redundant 15
Fitness: max 0.991(12), min 0.974(1), ave 0.99
Test execution time: sum 8714 ms, max 953 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 00:32:13 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-07 00:32:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 1 seconds
Variants: generated 100, build-succeeded 9, build-failed 24, syntax-invalid 56, redundant 11
Fitness: max 0.991(8), min 0.974(1), ave 0.989
Test execution time: sum 5921 ms, max 813 ms, min 537 ms
----------------------------------------------------------------

2023-08-07 00:32:25 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-07 00:32:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 14 seconds
Variants: generated 100, build-succeeded 11, build-failed 24, syntax-invalid 54, redundant 11
Fitness: max 0.991(8), min 0.966(1), ave 0.987
Test execution time: sum 7282 ms, max 873 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 00:32:38 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-07 00:32:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 25 seconds
Variants: generated 100, build-succeeded 7, build-failed 27, syntax-invalid 55, redundant 11
Fitness: max 0.991(5), min 0.948(1), ave 0.984
Test execution time: sum 4734 ms, max 849 ms, min 538 ms
----------------------------------------------------------------

2023-08-07 00:32:49 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-07 00:33:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 36 seconds
Variants: generated 100, build-succeeded 9, build-failed 30, syntax-invalid 55, redundant 6
Fitness: max 0.991(7), min 0.966(1), ave 0.988
Test execution time: sum 5643 ms, max 816 ms, min 452 ms
----------------------------------------------------------------

2023-08-07 00:33:01 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-07 00:33:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 47 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 52, redundant 12
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 4774 ms, max 744 ms, min 503 ms
----------------------------------------------------------------

2023-08-07 00:33:11 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-07 00:33:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 57 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 56, redundant 11
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 4454 ms, max 820 ms, min 457 ms
----------------------------------------------------------------

2023-08-07 00:33:21 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-07 00:33:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 8 seconds
Variants: generated 100, build-succeeded 8, build-failed 26, syntax-invalid 52, redundant 14
Fitness: max 1(1), min 0.888(1), ave 0.974
Test execution time: sum 5513 ms, max 836 ms, min 527 ms
----------------------------------------------------------------

2023-08-07 00:33:32 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-07 00:33:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 19 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 53, redundant 11
Fitness: max 0.991(5), min 0.974(1), ave 0.988
Test execution time: sum 4915 ms, max 866 ms, min 462 ms
----------------------------------------------------------------

2023-08-07 00:33:43 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-07 00:33:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 29 seconds
Variants: generated 100, build-succeeded 8, build-failed 26, syntax-invalid 55, redundant 11
Fitness: max 0.991(7), min 0.983(1), ave 0.99
Test execution time: sum 5308 ms, max 902 ms, min 460 ms
----------------------------------------------------------------

2023-08-07 00:33:53 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-07 00:34:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 39 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 57, redundant 10
Fitness: max 0.991(6), min 0.991(6), ave 0.991
Test execution time: sum 3776 ms, max 810 ms, min 442 ms
----------------------------------------------------------------

2023-08-07 00:34:03 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-07 00:34:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 49 seconds
Variants: generated 100, build-succeeded 6, build-failed 31, syntax-invalid 54, redundant 9
Fitness: max 0.991(1), min 0.836(1), ave 0.958
Test execution time: sum 4107 ms, max 750 ms, min 619 ms
----------------------------------------------------------------

2023-08-07 00:34:14 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-07 00:34:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 58 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 56, redundant 13
Fitness: max 0.991(3), min 0.845(1), ave 0.955
Test execution time: sum 2834 ms, max 808 ms, min 572 ms
----------------------------------------------------------------

2023-08-07 00:34:22 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-07 00:34:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 7 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 55, redundant 13
Fitness: max 0.991(6), min 0.991(6), ave 0.991
Test execution time: sum 4170 ms, max 851 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 00:34:31 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-07 00:34:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 17 seconds
Variants: generated 100, build-succeeded 8, build-failed 23, syntax-invalid 52, redundant 17
Fitness: max 0.991(6), min 0.931(1), ave 0.983
Test execution time: sum 5466 ms, max 853 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 00:34:42 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-07 00:34:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 29 seconds
Variants: generated 100, build-succeeded 9, build-failed 26, syntax-invalid 54, redundant 11
Fitness: max 0.991(8), min 0.948(1), ave 0.987
Test execution time: sum 6102 ms, max 910 ms, min 428 ms
----------------------------------------------------------------

2023-08-07 00:34:53 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-07 00:35:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 38 seconds
Variants: generated 100, build-succeeded 5, build-failed 24, syntax-invalid 55, redundant 16
Fitness: max 1(1), min 0.836(1), ave 0.959
Test execution time: sum 3591 ms, max 856 ms, min 463 ms
----------------------------------------------------------------

2023-08-07 00:35:02 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-07 00:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 48 seconds
Variants: generated 100, build-succeeded 6, build-failed 35, syntax-invalid 51, redundant 8
Fitness: max 0.991(4), min 0.983(2), ave 0.989
Test execution time: sum 4210 ms, max 998 ms, min 484 ms
----------------------------------------------------------------

2023-08-07 00:35:12 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-07 00:35:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 59 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 52, redundant 12
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 4738 ms, max 814 ms, min 513 ms
----------------------------------------------------------------

2023-08-07 00:35:23 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-07 00:35:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 9 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 55, redundant 9
Fitness: max 0.991(5), min 0.966(1), ave 0.986
Test execution time: sum 4703 ms, max 809 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 00:35:34 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-07 00:35:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 19 seconds
Variants: generated 100, build-succeeded 6, build-failed 21, syntax-invalid 56, redundant 17
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 4238 ms, max 964 ms, min 482 ms
----------------------------------------------------------------

2023-08-07 00:35:44 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-07 00:35:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 30 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 56, redundant 8
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 4448 ms, max 840 ms, min 473 ms
----------------------------------------------------------------

2023-08-07 00:35:54 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-07 00:36:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 42 seconds
Variants: generated 100, build-succeeded 8, build-failed 28, syntax-invalid 54, redundant 10
Fitness: max 1(1), min 0.966(2), ave 0.986
Test execution time: sum 5102 ms, max 750 ms, min 494 ms
----------------------------------------------------------------

2023-08-07 00:36:06 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-07 00:36:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 54 seconds
Variants: generated 100, build-succeeded 10, build-failed 22, syntax-invalid 56, redundant 12
Fitness: max 1(1), min 0.845(1), ave 0.977
Test execution time: sum 6638 ms, max 915 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 00:36:19 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-07 00:36:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 8 seconds
Variants: generated 100, build-succeeded 10, build-failed 28, syntax-invalid 54, redundant 8
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 5732 ms, max 789 ms, min 452 ms
----------------------------------------------------------------

2023-08-07 00:36:32 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-07 00:36:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 17 seconds
Variants: generated 100, build-succeeded 6, build-failed 24, syntax-invalid 55, redundant 15
Fitness: max 0.991(4), min 0.845(1), ave 0.966
Test execution time: sum 4029 ms, max 825 ms, min 475 ms
----------------------------------------------------------------

2023-08-07 00:36:41 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-07 00:36:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 29 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 53, redundant 10
Fitness: max 1(1), min 0.966(2), ave 0.984
Test execution time: sum 4778 ms, max 815 ms, min 453 ms
----------------------------------------------------------------

2023-08-07 00:36:53 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-07 00:37:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 39 seconds
Variants: generated 100, build-succeeded 8, build-failed 20, syntax-invalid 55, redundant 17
Fitness: max 0.991(5), min 0.966(2), ave 0.983
Test execution time: sum 4874 ms, max 755 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 00:37:03 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-07 00:37:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 48 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 56, redundant 12
Fitness: max 0.991(4), min 0.836(1), ave 0.96
Test execution time: sum 3280 ms, max 836 ms, min 484 ms
----------------------------------------------------------------

2023-08-07 00:37:12 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-07 00:37:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 55 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 54, redundant 17
Fitness: max 0.991(2), min 0.836(1), ave 0.95
Test execution time: sum 2390 ms, max 864 ms, min 480 ms
----------------------------------------------------------------

2023-08-07 00:37:20 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-07 00:37:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 7 seconds
Variants: generated 100, build-succeeded 10, build-failed 20, syntax-invalid 54, redundant 16
Fitness: max 1(2), min 0.966(3), ave 0.985
Test execution time: sum 6325 ms, max 875 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 00:37:31 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-07 00:37:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 22 seconds
Variants: generated 100, build-succeeded 13, build-failed 24, syntax-invalid 57, redundant 6
Fitness: max 1(1), min 0.966(2), ave 0.987
Test execution time: sum 8655 ms, max 890 ms, min 442 ms
----------------------------------------------------------------

2023-08-07 00:37:46 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-07 00:38:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 36 seconds
Variants: generated 100, build-succeeded 10, build-failed 25, syntax-invalid 55, redundant 10
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 6298 ms, max 796 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 00:38:00 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-07 00:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 46 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 56, redundant 10
Fitness: max 0.991(4), min 0.974(1), ave 0.988
Test execution time: sum 3366 ms, max 876 ms, min 461 ms
----------------------------------------------------------------

2023-08-07 00:38:10 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-07 00:38:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 58 seconds
Variants: generated 100, build-succeeded 10, build-failed 22, syntax-invalid 54, redundant 14
Fitness: max 0.991(7), min 0.983(3), ave 0.989
Test execution time: sum 6295 ms, max 846 ms, min 460 ms
----------------------------------------------------------------

2023-08-07 00:38:22 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-07 00:38:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 9 seconds
Variants: generated 100, build-succeeded 6, build-failed 22, syntax-invalid 55, redundant 17
Fitness: max 0.991(4), min 0.983(2), ave 0.989
Test execution time: sum 3971 ms, max 823 ms, min 547 ms
----------------------------------------------------------------

2023-08-07 00:38:33 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-07 00:38:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 21 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 53, redundant 11
Fitness: max 0.991(5), min 0.931(1), ave 0.979
Test execution time: sum 4909 ms, max 776 ms, min 579 ms
----------------------------------------------------------------

2023-08-07 00:38:45 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-07 00:38:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 33 seconds
Variants: generated 100, build-succeeded 10, build-failed 26, syntax-invalid 53, redundant 11
Fitness: max 0.991(7), min 0.966(3), ave 0.984
Test execution time: sum 6568 ms, max 864 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 00:38:58 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-07 00:39:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 44 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 54, redundant 17
Fitness: max 0.991(6), min 0.991(6), ave 0.991
Test execution time: sum 4441 ms, max 927 ms, min 483 ms
----------------------------------------------------------------

2023-08-07 00:39:08 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-07 00:39:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 54 seconds
Variants: generated 100, build-succeeded 7, build-failed 23, syntax-invalid 55, redundant 15
Fitness: max 0.991(6), min 0.983(1), ave 0.99
Test execution time: sum 4208 ms, max 751 ms, min 428 ms
----------------------------------------------------------------

2023-08-07 00:39:18 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-07 00:39:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 7 seconds
Variants: generated 100, build-succeeded 12, build-failed 19, syntax-invalid 51, redundant 18
Fitness: max 0.991(10), min 0.983(2), ave 0.99
Test execution time: sum 7511 ms, max 857 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 00:39:32 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-07 00:39:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 16 seconds
Variants: generated 100, build-succeeded 3, build-failed 22, syntax-invalid 57, redundant 18
Fitness: max 0.991(1), min 0.974(1), ave 0.983
Test execution time: sum 1932 ms, max 668 ms, min 621 ms
----------------------------------------------------------------

2023-08-07 00:39:40 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-07 00:39:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 23 seconds
Variants: generated 100, build-succeeded 3, build-failed 30, syntax-invalid 54, redundant 13
Fitness: max 0.991(1), min 0.94(1), ave 0.963
Test execution time: sum 1945 ms, max 712 ms, min 612 ms
----------------------------------------------------------------

2023-08-07 00:39:47 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-07 00:39:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 32 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 53, redundant 15
Fitness: max 0.991(1), min 0.931(1), ave 0.967
Test execution time: sum 3432 ms, max 801 ms, min 568 ms
----------------------------------------------------------------

2023-08-07 00:39:56 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-07 00:40:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 40 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 54, redundant 15
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 2307 ms, max 759 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 00:40:04 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-07 00:40:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 51 seconds
Variants: generated 100, build-succeeded 8, build-failed 26, syntax-invalid 51, redundant 15
Fitness: max 1(1), min 0.931(1), ave 0.985
Test execution time: sum 4883 ms, max 810 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 00:40:15 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-07 00:40:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 1 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 54, redundant 14
Fitness: max 1(1), min 0.966(1), ave 0.988
Test execution time: sum 2855 ms, max 772 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 00:40:25 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-07 00:40:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 12 seconds
Variants: generated 100, build-succeeded 9, build-failed 22, syntax-invalid 55, redundant 14
Fitness: max 0.991(6), min 0.974(1), ave 0.988
Test execution time: sum 5384 ms, max 781 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 00:40:36 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-07 00:40:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 23 seconds
Variants: generated 100, build-succeeded 7, build-failed 30, syntax-invalid 52, redundant 11
Fitness: max 0.991(6), min 0.983(1), ave 0.99
Test execution time: sum 4502 ms, max 858 ms, min 500 ms
----------------------------------------------------------------

2023-08-07 00:40:47 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-07 00:40:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 34 seconds
Variants: generated 100, build-succeeded 6, build-failed 29, syntax-invalid 54, redundant 11
Fitness: max 0.991(3), min 0.948(1), ave 0.981
Test execution time: sum 4045 ms, max 844 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 00:40:58 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-07 00:41:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 44 seconds
Variants: generated 100, build-succeeded 6, build-failed 24, syntax-invalid 58, redundant 12
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3725 ms, max 839 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 00:41:08 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-07 00:41:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 53 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 56, redundant 14
Fitness: max 1(1), min 0.922(1), ave 0.979
Test execution time: sum 3107 ms, max 794 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 00:41:17 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-07 00:41:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 3 seconds
Variants: generated 100, build-succeeded 6, build-failed 28, syntax-invalid 55, redundant 11
Fitness: max 1(2), min 0.957(1), ave 0.986
Test execution time: sum 4022 ms, max 901 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 00:41:28 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-07 00:41:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 14 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 58, redundant 13
Fitness: max 1(1), min 0.991(5), ave 0.993
Test execution time: sum 3747 ms, max 821 ms, min 438 ms
----------------------------------------------------------------

2023-08-07 00:41:38 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-07 00:41:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 25 seconds
Variants: generated 100, build-succeeded 5, build-failed 23, syntax-invalid 55, redundant 17
Fitness: max 0.991(3), min 0.974(1), ave 0.986
Test execution time: sum 3528 ms, max 989 ms, min 479 ms
----------------------------------------------------------------

2023-08-07 00:41:49 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-07 00:42:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 36 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 57, redundant 11
Fitness: max 0.991(1), min 0.966(1), ave 0.981
Test execution time: sum 2960 ms, max 858 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 00:42:00 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-07 00:42:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 45 seconds
Variants: generated 100, build-succeeded 4, build-failed 26, syntax-invalid 55, redundant 15
Fitness: max 0.991(1), min 0.836(1), ave 0.948
Test execution time: sum 2136 ms, max 702 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 00:42:09 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-07 00:42:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 54 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 56, redundant 10
Fitness: max 0.991(2), min 0.983(3), ave 0.986
Test execution time: sum 3002 ms, max 744 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 00:42:18 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-07 00:42:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 4 seconds
Variants: generated 100, build-succeeded 7, build-failed 27, syntax-invalid 58, redundant 8
Fitness: max 0.991(4), min 0.966(1), ave 0.983
Test execution time: sum 4504 ms, max 863 ms, min 428 ms
----------------------------------------------------------------

2023-08-07 00:42:28 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-07 00:42:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 15 seconds
Variants: generated 100, build-succeeded 6, build-failed 25, syntax-invalid 56, redundant 13
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3841 ms, max 794 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 00:42:39 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-07 00:42:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 25 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 58, redundant 11
Fitness: max 0.991(2), min 0.948(1), ave 0.972
Test execution time: sum 2512 ms, max 683 ms, min 526 ms
----------------------------------------------------------------

2023-08-07 00:42:49 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-07 00:43:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 36 seconds
Variants: generated 100, build-succeeded 5, build-failed 33, syntax-invalid 53, redundant 9
Fitness: max 0.991(3), min 0.836(1), ave 0.959
Test execution time: sum 3059 ms, max 804 ms, min 490 ms
----------------------------------------------------------------

2023-08-07 00:43:00 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-07 00:43:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 48 seconds
Variants: generated 100, build-succeeded 10, build-failed 24, syntax-invalid 57, redundant 9
Fitness: max 0.991(4), min 0.931(1), ave 0.979
Test execution time: sum 5825 ms, max 872 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 00:43:13 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-07 00:43:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 59 seconds
Variants: generated 100, build-succeeded 6, build-failed 28, syntax-invalid 58, redundant 8
Fitness: max 0.991(4), min 0.974(2), ave 0.986
Test execution time: sum 3659 ms, max 780 ms, min 415 ms
----------------------------------------------------------------

2023-08-07 00:43:23 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-07 00:43:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 12 seconds
Variants: generated 100, build-succeeded 9, build-failed 24, syntax-invalid 55, redundant 12
Fitness: max 0.991(8), min 0.966(1), ave 0.989
Test execution time: sum 5731 ms, max 801 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 00:43:36 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-07 00:43:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 25 seconds
Variants: generated 100, build-succeeded 8, build-failed 29, syntax-invalid 53, redundant 10
Fitness: max 1(1), min 0.922(1), ave 0.983
Test execution time: sum 4943 ms, max 786 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 00:43:49 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-07 00:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 37 seconds
Variants: generated 100, build-succeeded 7, build-failed 24, syntax-invalid 55, redundant 14
Fitness: max 0.991(6), min 0.966(1), ave 0.988
Test execution time: sum 3998 ms, max 729 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 00:44:01 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-07 00:44:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 48 seconds
Variants: generated 100, build-succeeded 6, build-failed 25, syntax-invalid 53, redundant 16
Fitness: max 0.991(5), min 0.957(1), ave 0.986
Test execution time: sum 3928 ms, max 897 ms, min 464 ms
----------------------------------------------------------------

2023-08-07 00:44:12 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-07 00:44:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 1 seconds
Variants: generated 100, build-succeeded 7, build-failed 28, syntax-invalid 52, redundant 13
Fitness: max 0.991(5), min 0.966(2), ave 0.984
Test execution time: sum 3906 ms, max 843 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 00:44:25 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-07 00:44:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 10 seconds
Variants: generated 100, build-succeeded 3, build-failed 30, syntax-invalid 56, redundant 11
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1823 ms, max 813 ms, min 447 ms
----------------------------------------------------------------

2023-08-07 00:44:34 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-07 00:44:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 22 seconds
Variants: generated 100, build-succeeded 8, build-failed 22, syntax-invalid 54, redundant 16
Fitness: max 0.991(5), min 0.957(1), ave 0.985
Test execution time: sum 4760 ms, max 728 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 00:44:46 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-07 00:44:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 35 seconds
Variants: generated 100, build-succeeded 7, build-failed 24, syntax-invalid 56, redundant 13
Fitness: max 1(1), min 0.974(1), ave 0.989
Test execution time: sum 4771 ms, max 808 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 00:44:59 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-07 00:45:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 53 seconds
Variants: generated 100, build-succeeded 16, build-failed 24, syntax-invalid 53, redundant 7
Fitness: max 0.991(12), min 0.966(1), ave 0.988
Test execution time: sum 9759 ms, max 824 ms, min 428 ms
----------------------------------------------------------------

2023-08-07 00:45:17 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-07 00:45:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 9 seconds
Variants: generated 100, build-succeeded 10, build-failed 32, syntax-invalid 51, redundant 7
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 5996 ms, max 861 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 00:45:33 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-07 00:45:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 24 seconds
Variants: generated 100, build-succeeded 9, build-failed 32, syntax-invalid 51, redundant 8
Fitness: max 1(1), min 0.966(2), ave 0.986
Test execution time: sum 5635 ms, max 819 ms, min 465 ms
----------------------------------------------------------------

2023-08-07 00:45:48 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-07 00:46:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 39 seconds
Variants: generated 100, build-succeeded 11, build-failed 21, syntax-invalid 53, redundant 15
Fitness: max 1(2), min 0.922(2), ave 0.98
Test execution time: sum 7343 ms, max 1005 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 00:46:03 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-07 00:46:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 56 seconds
Variants: generated 100, build-succeeded 13, build-failed 23, syntax-invalid 53, redundant 11
Fitness: max 1(3), min 0.991(10), ave 0.993
Test execution time: sum 8113 ms, max 906 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 00:46:20 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-07 00:46:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 9 seconds
Variants: generated 100, build-succeeded 9, build-failed 23, syntax-invalid 58, redundant 10
Fitness: max 0.991(7), min 0.974(1), ave 0.989
Test execution time: sum 5227 ms, max 798 ms, min 438 ms
----------------------------------------------------------------

2023-08-07 00:46:33 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-07 00:46:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 23 seconds
Variants: generated 100, build-succeeded 7, build-failed 28, syntax-invalid 53, redundant 12
Fitness: max 0.991(5), min 0.966(1), ave 0.986
Test execution time: sum 4696 ms, max 902 ms, min 506 ms
----------------------------------------------------------------

2023-08-07 00:46:47 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-07 00:47:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 35 seconds
Variants: generated 100, build-succeeded 6, build-failed 29, syntax-invalid 54, redundant 11
Fitness: max 0.991(5), min 0.966(1), ave 0.987
Test execution time: sum 3684 ms, max 798 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 00:47:00 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-07 00:47:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 47 seconds
Variants: generated 100, build-succeeded 6, build-failed 19, syntax-invalid 56, redundant 19
Fitness: max 1(1), min 0.991(5), ave 0.993
Test execution time: sum 3247 ms, max 756 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 00:47:11 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-07 00:47:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 0 seconds
Variants: generated 100, build-succeeded 8, build-failed 27, syntax-invalid 55, redundant 10
Fitness: max 0.991(6), min 0.966(2), ave 0.985
Test execution time: sum 5131 ms, max 802 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 00:47:24 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-07 00:47:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 12 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 55, redundant 13
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 3640 ms, max 914 ms, min 458 ms
----------------------------------------------------------------

2023-08-07 00:47:36 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-07 00:47:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 25 seconds
Variants: generated 100, build-succeeded 8, build-failed 27, syntax-invalid 53, redundant 12
Fitness: max 1(1), min 0.991(7), ave 0.992
Test execution time: sum 5091 ms, max 841 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 00:47:50 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-07 00:48:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 42 seconds
Variants: generated 100, build-succeeded 10, build-failed 27, syntax-invalid 53, redundant 10
Fitness: max 1(2), min 0.922(1), ave 0.979
Test execution time: sum 6708 ms, max 929 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 00:48:06 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-07 00:48:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 55 seconds
Variants: generated 100, build-succeeded 5, build-failed 31, syntax-invalid 53, redundant 11
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 3692 ms, max 890 ms, min 628 ms
----------------------------------------------------------------

2023-08-07 00:48:19 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-07 00:48:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 11 seconds
Variants: generated 100, build-succeeded 11, build-failed 24, syntax-invalid 53, redundant 12
Fitness: max 0.991(7), min 0.836(1), ave 0.969
Test execution time: sum 6432 ms, max 862 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 00:48:35 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-07 00:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 25 seconds
Variants: generated 100, build-succeeded 7, build-failed 27, syntax-invalid 55, redundant 11
Fitness: max 0.991(7), min 0.991(7), ave 0.991
Test execution time: sum 4121 ms, max 835 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 00:48:49 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-07 00:49:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 38 seconds
Variants: generated 100, build-succeeded 6, build-failed 34, syntax-invalid 52, redundant 8
Fitness: max 0.991(4), min 0.94(1), ave 0.98
Test execution time: sum 3484 ms, max 748 ms, min 428 ms
----------------------------------------------------------------

2023-08-07 00:49:02 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-07 00:49:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 51 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 57, redundant 10
Fitness: max 1(1), min 0.759(1), ave 0.954
Test execution time: sum 3656 ms, max 746 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 00:49:15 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-07 00:49:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 5 seconds
Variants: generated 100, build-succeeded 8, build-failed 23, syntax-invalid 58, redundant 11
Fitness: max 0.991(7), min 0.983(1), ave 0.99
Test execution time: sum 4862 ms, max 730 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 00:49:29 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-07 00:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 20 seconds
Variants: generated 100, build-succeeded 9, build-failed 27, syntax-invalid 55, redundant 9
Fitness: max 0.991(9), min 0.991(9), ave 0.991
Test execution time: sum 5932 ms, max 819 ms, min 453 ms
----------------------------------------------------------------

2023-08-07 00:49:44 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-07 00:50:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 37 seconds
Variants: generated 100, build-succeeded 9, build-failed 27, syntax-invalid 55, redundant 9
Fitness: max 1(1), min 0.931(1), ave 0.984
Test execution time: sum 5477 ms, max 823 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 00:50:01 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-07 00:50:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 55 seconds
Variants: generated 100, build-succeeded 10, build-failed 23, syntax-invalid 59, redundant 8
Fitness: max 1(1), min 0.957(1), ave 0.985
Test execution time: sum 6012 ms, max 803 ms, min 426 ms
----------------------------------------------------------------

2023-08-07 00:50:19 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-07 00:50:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 9 seconds
Variants: generated 100, build-succeeded 5, build-failed 26, syntax-invalid 56, redundant 13
Fitness: max 0.991(3), min 0.966(1), ave 0.983
Test execution time: sum 2641 ms, max 868 ms, min 418 ms
----------------------------------------------------------------

2023-08-07 00:50:33 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-07 00:50:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 14 seconds
Variants: generated 21, build-succeeded 2, build-failed 11, syntax-invalid 2, redundant 6
Fitness: max 1(1), min 0.966(1), ave 0.983
Test execution time: sum 1254 ms, max 729 ms, min 525 ms
----------------------------------------------------------------

2023-08-07 00:50:39 [main] [INFO]  KGenProgMain - GA stopped
2023-08-07 00:50:46 [main] [INFO]  PatchLogExporter - patch (v244)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:46 [main] [INFO]  PatchLogExporter - patch (v244)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:46 [main] [INFO]  PatchLogExporter - patch (v244)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:46 [main] [INFO]  PatchLogExporter - patch (v244)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:46 [main] [INFO]  PatchLogExporter - patch (v244)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:46 [main] [INFO]  PatchLogExporter - patch (v244)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v505)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v505)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v505)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v505)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v505)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
+					-FastMath.sin(real) * MathUtils.sinh(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v505)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v617)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v706)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v721)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v721)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v721)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v721)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v825)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v825)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v825)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v825)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v841)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v849)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v849)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v849)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v849)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v849)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v849)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v850)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v850)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v850)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v850)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v902)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v902)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v902)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v902)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v902)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v902)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1034)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1034)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1034)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1034)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1034)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1034)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1549)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return Complex.ZERO;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v1916)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2131)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2133)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v2344)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,10 +152,10 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:47 [main] [INFO]  PatchLogExporter - patch (v3507)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,10 +152,10 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v3730)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),
+					FastMath.cos(real) * MathUtils.sinh(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4235)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4348)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +286,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        StringBuffer ret = null;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4626)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -155,7 +155,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v4812)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5409)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5642)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +286,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5816)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v5823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6011)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -152,7 +152,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6031)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6144)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6640)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v6905)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -152,7 +151,8 @@
         final int len = msgPatterns.size();
         for (int i = 0; i < len; i++) {
             final Localizable pat = msgPatterns.get(i);
-            final Object[] args = msgArguments.get(i);
+            final List<Object> list=new ArrayList<Object>();
+			final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7018)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7019)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7038)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7317)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v7894)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:48 [main] [INFO]  PatchLogExporter - patch (v8090)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,14 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double real2 = 2.0 * real;
+			return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),
+					MathUtils.cosh(real) * FastMath.sin(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +294,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8675)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -155,7 +155,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8789)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8942)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = real / imaginary;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v8995)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9050)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -292,10 +291,8 @@
         if (isNaN || Double.isNaN(divisor)) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
-        }
+        if (divisor == 0d)
+			return NaN;
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9250)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9324)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double real2 = 2.0 * real;
+			double q = real / imaginary;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +291,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10137)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +291,10 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v10310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +909,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
@@ -1180,6 +1175,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11045)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11545)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11545)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11545)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11545)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11545)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -250,14 +251,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11545)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +290,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v11650)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +290,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +914,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12336)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final double c = divisor.getReal();
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +290,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +914,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12429)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -155,7 +155,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -250,14 +251,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double expReal = FastMath.exp(real);
+			double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v12514)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            final List<Complex> result=new ArrayList<Complex>();
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +290,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:49 [main] [INFO]  PatchLogExporter - patch (v13203)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -126,6 +126,7 @@
                 return FastMath.abs(real);
             }
             double q = real / imaginary;
+			double expReal = FastMath.exp(real);
             return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
         } else {
             if (real == 0.0) {
@@ -250,14 +251,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
+			double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13350)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            final List<Complex> result=new ArrayList<Complex>();
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v13416)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -250,14 +251,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final double c = divisor.getReal();
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14524)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            final List<Complex> result=new ArrayList<Complex>();
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14718)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            final List<Complex> result=new ArrayList<Complex>();
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = real / imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14843)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2067,6 +2067,7 @@
 
         t = costA * sinEpsA;
         c = a + t;
+		double intPartB;
         d = -(c - a - t);
         a = c;
         b = b + d;
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v14908)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15034)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15133)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +289,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15701)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -251,13 +252,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15739)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +289,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +288,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -913,7 +913,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:50 [main] [INFO]  PatchLogExporter - patch (v15930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17233)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -2066,7 +2058,6 @@
         b = b + d;
 
         t = costA * sinEpsA;
-        c = a + t;
         d = -(c - a - t);
         a = c;
         b = b + d;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17312)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17921)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v17929)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1430,7 +1422,6 @@
             lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
-            lnza = lnza * epsilon + -0.5;
             lnza = lnza * epsilon + 1.0;
             lnza = lnza * epsilon;
         }
@@ -2066,7 +2057,6 @@
         b = b + d;
 
         t = costA * sinEpsA;
-        c = a + t;
         d = -(c - a - t);
         a = c;
         b = b + d;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v18040)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1471,7 +1463,6 @@
         a = c;
         b = b + d;
 
-        c = a + lnzb;
         d = -(c - a - lnzb);
         a = c;
         b = b + d;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v19802)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -2949,7 +2941,7 @@
 
             za = pia - result;
             zb = -(za - pia + result);
-            zb += pib - resultb;
+            final double epsilon = xa - EIGHTHS[idx];
 
             result = za + zb;
             resultb = -(result - za - zb);
@@ -3070,7 +3062,7 @@
         final double xa = doubleHighPart(x);
         final double xb = x - xa;
 
-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
+        final double pi2a = 1.5707963267948966;
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20025)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -2936,7 +2928,8 @@
         double za = EIGHTHS[idx] + ya;
         double zb = -(za - EIGHTHS[idx] - ya);
         temp = za + yb;
-        zb += -(temp - za - yb);
+        double sum = 0;
+		zb += -(temp - za - yb);
         za = temp;
 
         result = za + zb;
@@ -2952,7 +2945,6 @@
             zb += pib - resultb;
 
             result = za + zb;
-            resultb = -(result - za - zb);
         }
 
 
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1471,7 +1463,6 @@
         a = c;
         b = b + d;
 
-        c = a + lnzb;
         d = -(c - a - lnzb);
         a = c;
         b = b + d;
@@ -2920,7 +2911,7 @@
         yb = yb * epsA2 * epsA;
 
 
-        ya = epsA;
+        final double facta = 57.2957763671875;
 
         temp = ya + yb;
         yb = -(temp - ya - yb);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20207)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +909,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1471,7 +1463,6 @@
         a = c;
         b = b + d;
 
-        c = a + lnzb;
         d = -(c - a - lnzb);
         a = c;
         b = b + d;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -250,14 +251,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20306)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			StringBuffer ret = null;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1456,7 +1448,6 @@
         a = c;
         b = b + d;
 
-        c = a + lnza;
         d = -(c - a - lnza);
         a = c;
         b = b + d;
@@ -1471,7 +1462,6 @@
         a = c;
         b = b + d;
 
-        c = a + lnzb;
         d = -(c - a - lnzb);
         a = c;
         b = b + d;
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20316)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -131,7 +131,8 @@
             if (real == 0.0) {
                 return FastMath.abs(imaginary);
             }
-            double q = imaginary / real;
+            double expReal = FastMath.exp(real);
+			double q = imaginary / real;
             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
         }
     }
@@ -250,14 +251,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:51 [main] [INFO]  PatchLogExporter - patch (v20331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1467,7 +1459,6 @@
         b = b + d;
 
         c = a + lnm[1];
-        d = -(c - a - lnm[1]);
         a = c;
         b = b + d;
 
@@ -2949,7 +2940,7 @@
 
             za = pia - result;
             zb = -(za - pia + result);
-            zb += pib - resultb;
+            final double epsilon = xa - EIGHTHS[idx];
 
             result = za + zb;
             resultb = -(result - za - zb);
@@ -3070,7 +3061,7 @@
         final double xa = doubleHighPart(x);
         final double xb = x - xa;
 
-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
+        final double pi2a = 1.5707963267948966;
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v20710)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1424,9 +1416,6 @@
             lnza = aa + ab;
             lnzb = -(lnza - aa - ab);
         } else {
-            /* High precision not required.  Eval Remez polynomial
-         using standard double precision */
-            lnza = -0.16624882440418567;
             lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
@@ -2949,7 +2938,7 @@
 
             za = pia - result;
             zb = -(za - pia + result);
-            zb += pib - resultb;
+            final double epsilon = xa - EIGHTHS[idx];
 
             result = za + zb;
             resultb = -(result - za - zb);
@@ -3070,7 +3059,7 @@
         final double xa = doubleHighPart(x);
         final double xb = x - xa;
 
-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
+        final double pi2a = 1.5707963267948966;
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21019)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +910,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1471,7 +1463,6 @@
         a = c;
         b = b + d;
 
-        c = a + lnzb;
         d = -(c - a - lnzb);
         a = c;
         b = b + d;
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21108)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +912,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1462,7 +1454,7 @@
         b = b + d;
 
         c = a + LN_2_B*exp;
-        d = -(c - a - LN_2_B*exp);
+        long mantissa = bits & 0x000fffffffffffffL;
         a = c;
         b = b + d;
 
@@ -1472,7 +1464,6 @@
         b = b + d;
 
         c = a + lnzb;
-        d = -(c - a - lnzb);
         a = c;
         b = b + d;
 
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21114)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1462,7 +1454,7 @@
         b = b + d;
 
         c = a + LN_2_B*exp;
-        d = -(c - a - LN_2_B*exp);
+        long mantissa = bits & 0x000fffffffffffffL;
         a = c;
         b = b + d;
 
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21231)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1427,7 +1419,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -1462,7 +1453,7 @@
         b = b + d;
 
         c = a + LN_2_B*exp;
-        d = -(c - a - LN_2_B*exp);
+        long mantissa = bits & 0x000fffffffffffffL;
         a = c;
         b = b + d;
 
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21631)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +909,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1424,11 +1416,7 @@
             lnza = aa + ab;
             lnzb = -(lnza - aa - ab);
         } else {
-            /* High precision not required.  Eval Remez polynomial
-         using standard double precision */
-            lnza = -0.16624882440418567;
             lnza = lnza * epsilon + 0.19999954120254515;
-            lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
             lnza = lnza * epsilon + 1.0;
@@ -2877,7 +2865,6 @@
             zb += -(temp - za - temp2);
             za = temp;
 
-            zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
             temp = ya * HEX_40000000;
@@ -2948,8 +2935,7 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
-            zb += pib - resultb;
+            final double epsilon = xa - EIGHTHS[idx];
 
             result = za + zb;
             resultb = -(result - za - zb);
@@ -3070,7 +3056,7 @@
         final double xa = doubleHighPart(x);
         final double xb = x - xa;
 
-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
+        final double pi2a = 1.5707963267948966;
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v21949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,13 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			final double c = divisor.getReal();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +911,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1427,7 +1419,6 @@
             /* High precision not required.  Eval Remez polynomial
          using standard double precision */
             lnza = -0.16624882440418567;
-            lnza = lnza * epsilon + 0.19999954120254515;
             lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
@@ -1462,7 +1453,7 @@
         b = b + d;
 
         c = a + LN_2_B*exp;
-        d = -(c - a - LN_2_B*exp);
+        long mantissa = bits & 0x000fffffffffffffL;
         a = c;
         b = b + d;
 
@@ -2840,7 +2831,8 @@
 
         /* Estimate the closest tabulated arctan value, compute eps = xa-tangentTable */
         if (xa < 1.0) {
-            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
+            boolean ok = true;
+			idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
         } else {
             double temp = 1.0/xa;
             idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22032)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -155,7 +154,6 @@
             final Object[] args = msgArguments.get(i);
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
-            sb.append(fmt.format(args));
             if (++count < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -913,7 +909,6 @@
         }
 
         if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -759,15 +759,7 @@
                 return result;
             }
 
-            if (intVal == 709) {
-                /* exp(1.494140625) is nearly a machine number... */
-                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
-                if (hiPrec != null) {
-                    hiPrec[0] /= 4.455505956692756620;
-                    hiPrec[1] /= 4.455505956692756620;
-                }
-                return result;
-            }
+            if (intVal == 709)
 
             intVal++;
 
@@ -1424,11 +1416,7 @@
             lnza = aa + ab;
             lnzb = -(lnza - aa - ab);
         } else {
-            /* High precision not required.  Eval Remez polynomial
-         using standard double precision */
-            lnza = -0.16624882440418567;
             lnza = lnza * epsilon + 0.19999954120254515;
-            lnza = lnza * epsilon + -0.2499999997677497;
             lnza = lnza * epsilon + 0.3333333333332802;
             lnza = lnza * epsilon + -0.5;
             lnza = lnza * epsilon + 1.0;
@@ -1466,7 +1454,7 @@
         a = c;
         b = b + d;
 
-        c = a + lnm[1];
+        bits <<= 1;
         d = -(c - a - lnm[1]);
         a = c;
         b = b + d;
@@ -2877,7 +2865,6 @@
             zb += -(temp - za - temp2);
             za = temp;
 
-            zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
             temp = ya * HEX_40000000;
@@ -2948,8 +2935,7 @@
             final double pib = 6.123233995736766E-17*2.0;
 
             za = pia - result;
-            zb = -(za - pia + result);
-            zb += pib - resultb;
+            final double epsilon = xa - EIGHTHS[idx];
 
             result = za + zb;
             resultb = -(result - za - zb);
@@ -3070,7 +3056,7 @@
         final double xa = doubleHighPart(x);
         final double xb = x - xa;
 
-        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
+        final double pi2a = 1.5707963267948966;
 
         double temp = ra + rb;
         rb = -(temp - ra - rb);
2023-08-07 00:50:52 [main] [INFO]  PatchLogExporter - patch (v22221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 00:50:52 [main] [INFO]  KGenProgMain - Summary
Reached generation = 224
Generated variants = 22221
Syntax valid variants = 12534
Build succeeded variants = 3313
Time elapsed = 57 minutes 28 seconds
Exit status = SUCCESS
