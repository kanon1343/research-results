2023-08-07 03:39:02 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-07 03:39:02 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-07 03:39:02 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-07 03:39:03 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math46/kgenprog-46.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math46 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math46/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.complex.ComplexTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 6 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-07 03:39:25 [main] [INFO]  KGenProgMain - initial failed tests (2/116)
org.apache.commons.math.complex.ComplexTest.testDivideZero: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
org.apache.commons.math.complex.ComplexTest.testAtanI: null

2023-08-07 03:39:26 [main] [INFO]  KGenProgMain - GA started
2023-08-07 03:39:26 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-07 03:39:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 50, build-succeeded 2, build-failed 30, syntax-invalid 1, redundant 17
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 2764 ms, max 1449 ms, min 1315 ms
----------------------------------------------------------------

2023-08-07 03:39:34 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-07 03:39:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 50, build-succeeded 6, build-failed 27, syntax-invalid 2, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 4204 ms, max 956 ms, min 485 ms
----------------------------------------------------------------

2023-08-07 03:39:42 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-07 03:39:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 100, build-succeeded 12, build-failed 23, syntax-invalid 4, redundant 61
Fitness: max 1(1), min 0.966(6), ave 0.979
Test execution time: sum 6180 ms, max 669 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 03:39:52 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-07 03:40:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 seconds
Variants: generated 100, build-succeeded 13, build-failed 23, syntax-invalid 11, redundant 53
Fitness: max 0.991(6), min 0.966(5), ave 0.979
Test execution time: sum 6661 ms, max 835 ms, min 444 ms
----------------------------------------------------------------

2023-08-07 03:40:03 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-07 03:40:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 seconds
Variants: generated 100, build-succeeded 16, build-failed 24, syntax-invalid 20, redundant 40
Fitness: max 0.991(7), min 0.948(1), ave 0.977
Test execution time: sum 8383 ms, max 846 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 03:40:16 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-07 03:40:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 1 seconds
Variants: generated 100, build-succeeded 14, build-failed 29, syntax-invalid 22, redundant 35
Fitness: max 0.991(8), min 0.966(6), ave 0.98
Test execution time: sum 6985 ms, max 575 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 03:40:28 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-07 03:40:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 11 seconds
Variants: generated 100, build-succeeded 13, build-failed 24, syntax-invalid 28, redundant 35
Fitness: max 1(1), min 0.957(1), ave 0.985
Test execution time: sum 6154 ms, max 525 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 03:40:38 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-07 03:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 100, build-succeeded 10, build-failed 27, syntax-invalid 27, redundant 36
Fitness: max 0.991(6), min 0.966(2), ave 0.984
Test execution time: sum 4651 ms, max 570 ms, min 434 ms
----------------------------------------------------------------

2023-08-07 03:40:45 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-07 03:40:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 28 seconds
Variants: generated 100, build-succeeded 15, build-failed 22, syntax-invalid 26, redundant 37
Fitness: max 1(2), min 0.966(2), ave 0.987
Test execution time: sum 6833 ms, max 511 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 03:40:55 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-07 03:41:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 40 seconds
Variants: generated 100, build-succeeded 16, build-failed 28, syntax-invalid 34, redundant 22
Fitness: max 0.991(9), min 0.966(6), ave 0.981
Test execution time: sum 7839 ms, max 735 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 03:41:06 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-07 03:41:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 51 seconds
Variants: generated 100, build-succeeded 15, build-failed 23, syntax-invalid 35, redundant 27
Fitness: max 0.991(9), min 0.966(5), ave 0.982
Test execution time: sum 7010 ms, max 536 ms, min 409 ms
----------------------------------------------------------------

2023-08-07 03:41:18 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-07 03:41:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 5 seconds
Variants: generated 100, build-succeeded 18, build-failed 25, syntax-invalid 37, redundant 20
Fitness: max 0.991(9), min 0.957(2), ave 0.98
Test execution time: sum 9404 ms, max 711 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 03:41:32 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-07 03:41:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 17 seconds
Variants: generated 100, build-succeeded 18, build-failed 27, syntax-invalid 32, redundant 23
Fitness: max 0.991(11), min 0.957(2), ave 0.984
Test execution time: sum 8169 ms, max 491 ms, min 407 ms
----------------------------------------------------------------

2023-08-07 03:41:43 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-07 03:41:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 28 seconds
Variants: generated 100, build-succeeded 17, build-failed 25, syntax-invalid 37, redundant 21
Fitness: max 0.991(10), min 0.957(3), ave 0.983
Test execution time: sum 7588 ms, max 499 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 03:41:55 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-07 03:42:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 38 seconds
Variants: generated 100, build-succeeded 11, build-failed 33, syntax-invalid 44, redundant 12
Fitness: max 0.991(5), min 0.957(1), ave 0.98
Test execution time: sum 5725 ms, max 788 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 03:42:04 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-07 03:42:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 46 seconds
Variants: generated 100, build-succeeded 12, build-failed 27, syntax-invalid 40, redundant 21
Fitness: max 0.991(6), min 0.957(2), ave 0.981
Test execution time: sum 5574 ms, max 542 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 03:42:13 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-07 03:42:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 54 seconds
Variants: generated 100, build-succeeded 11, build-failed 20, syntax-invalid 45, redundant 24
Fitness: max 0.991(8), min 0.957(1), ave 0.984
Test execution time: sum 4989 ms, max 566 ms, min 411 ms
----------------------------------------------------------------

2023-08-07 03:42:21 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-07 03:42:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 9 seconds
Variants: generated 100, build-succeeded 24, build-failed 26, syntax-invalid 29, redundant 21
Fitness: max 0.991(17), min 0.957(2), ave 0.985
Test execution time: sum 10720 ms, max 514 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 03:42:35 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-07 03:42:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 22 seconds
Variants: generated 100, build-succeeded 20, build-failed 31, syntax-invalid 39, redundant 10
Fitness: max 0.991(12), min 0.957(1), ave 0.984
Test execution time: sum 9295 ms, max 626 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 03:42:49 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-07 03:43:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 37 seconds
Variants: generated 100, build-succeeded 20, build-failed 29, syntax-invalid 34, redundant 17
Fitness: max 0.991(15), min 0.966(2), ave 0.987
Test execution time: sum 9746 ms, max 866 ms, min 409 ms
----------------------------------------------------------------

2023-08-07 03:43:04 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-07 03:43:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 52 seconds
Variants: generated 100, build-succeeded 24, build-failed 29, syntax-invalid 38, redundant 9
Fitness: max 0.991(19), min 0.957(1), ave 0.988
Test execution time: sum 10894 ms, max 552 ms, min 395 ms
----------------------------------------------------------------

2023-08-07 03:43:19 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-07 03:43:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 5 seconds
Variants: generated 100, build-succeeded 18, build-failed 26, syntax-invalid 45, redundant 11
Fitness: max 0.991(14), min 0.966(1), ave 0.988
Test execution time: sum 8209 ms, max 517 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 03:43:32 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-07 03:43:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 20 seconds
Variants: generated 100, build-succeeded 23, build-failed 30, syntax-invalid 33, redundant 14
Fitness: max 1(1), min 0.966(4), ave 0.985
Test execution time: sum 10371 ms, max 519 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 03:43:47 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-07 03:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 34 seconds
Variants: generated 100, build-succeeded 22, build-failed 28, syntax-invalid 40, redundant 10
Fitness: max 0.991(12), min 0.957(4), ave 0.982
Test execution time: sum 10495 ms, max 770 ms, min 407 ms
----------------------------------------------------------------

2023-08-07 03:44:01 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-07 03:44:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 46 seconds
Variants: generated 100, build-succeeded 14, build-failed 31, syntax-invalid 36, redundant 19
Fitness: max 0.991(10), min 0.966(3), ave 0.985
Test execution time: sum 7265 ms, max 753 ms, min 404 ms
----------------------------------------------------------------

2023-08-07 03:44:13 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-07 03:44:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 3 seconds
Variants: generated 100, build-succeeded 24, build-failed 26, syntax-invalid 32, redundant 18
Fitness: max 0.991(15), min 0.957(2), ave 0.984
Test execution time: sum 12737 ms, max 817 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 03:44:30 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-07 03:44:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 23 seconds
Variants: generated 100, build-succeeded 26, build-failed 26, syntax-invalid 26, redundant 22
Fitness: max 0.991(19), min 0.966(3), ave 0.987
Test execution time: sum 13930 ms, max 972 ms, min 410 ms
----------------------------------------------------------------

2023-08-07 03:44:50 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-07 03:45:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 39 seconds
Variants: generated 100, build-succeeded 22, build-failed 24, syntax-invalid 32, redundant 22
Fitness: max 1(1), min 0.957(1), ave 0.989
Test execution time: sum 11150 ms, max 736 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 03:45:06 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-07 03:45:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 55 seconds
Variants: generated 100, build-succeeded 21, build-failed 27, syntax-invalid 32, redundant 20
Fitness: max 0.991(18), min 0.974(1), ave 0.99
Test execution time: sum 11459 ms, max 779 ms, min 409 ms
----------------------------------------------------------------

2023-08-07 03:45:22 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-07 03:45:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 7 seconds
Variants: generated 100, build-succeeded 15, build-failed 27, syntax-invalid 35, redundant 23
Fitness: max 0.991(9), min 0.966(3), ave 0.984
Test execution time: sum 7783 ms, max 739 ms, min 406 ms
----------------------------------------------------------------

2023-08-07 03:45:34 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-07 03:45:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 19 seconds
Variants: generated 100, build-succeeded 12, build-failed 30, syntax-invalid 34, redundant 24
Fitness: max 0.991(9), min 0.974(1), ave 0.989
Test execution time: sum 6756 ms, max 843 ms, min 381 ms
----------------------------------------------------------------

2023-08-07 03:45:45 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-07 03:46:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 34 seconds
Variants: generated 100, build-succeeded 19, build-failed 30, syntax-invalid 27, redundant 24
Fitness: max 0.991(13), min 0.966(1), ave 0.988
Test execution time: sum 10359 ms, max 803 ms, min 408 ms
----------------------------------------------------------------

2023-08-07 03:46:01 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-07 03:46:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 50 seconds
Variants: generated 100, build-succeeded 20, build-failed 29, syntax-invalid 24, redundant 27
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 11371 ms, max 794 ms, min 419 ms
----------------------------------------------------------------

2023-08-07 03:46:17 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-07 03:46:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 11 seconds
Variants: generated 100, build-succeeded 27, build-failed 32, syntax-invalid 22, redundant 19
Fitness: max 0.991(21), min 0.966(1), ave 0.989
Test execution time: sum 14873 ms, max 844 ms, min 406 ms
----------------------------------------------------------------

2023-08-07 03:46:38 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-07 03:46:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 32 seconds
Variants: generated 100, build-succeeded 26, build-failed 22, syntax-invalid 23, redundant 29
Fitness: max 0.991(22), min 0.931(1), ave 0.988
Test execution time: sum 15582 ms, max 837 ms, min 417 ms
----------------------------------------------------------------

2023-08-07 03:46:59 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-07 03:47:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 0 seconds
Variants: generated 100, build-succeeded 36, build-failed 17, syntax-invalid 22, redundant 25
Fitness: max 1(1), min 0.957(1), ave 0.989
Test execution time: sum 22209 ms, max 861 ms, min 416 ms
----------------------------------------------------------------

2023-08-07 03:47:26 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-07 03:47:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 23 seconds
Variants: generated 100, build-succeeded 24, build-failed 22, syntax-invalid 40, redundant 14
Fitness: max 0.991(20), min 0.983(4), ave 0.99
Test execution time: sum 18654 ms, max 1178 ms, min 462 ms
----------------------------------------------------------------

2023-08-07 03:47:50 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-07 03:48:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 46 seconds
Variants: generated 100, build-succeeded 25, build-failed 30, syntax-invalid 26, redundant 19
Fitness: max 0.991(21), min 0.966(1), ave 0.989
Test execution time: sum 17744 ms, max 870 ms, min 481 ms
----------------------------------------------------------------

2023-08-07 03:48:13 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-07 03:48:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 4 seconds
Variants: generated 100, build-succeeded 20, build-failed 31, syntax-invalid 24, redundant 25
Fitness: max 0.991(15), min 0.983(5), ave 0.989
Test execution time: sum 11161 ms, max 855 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 03:48:30 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-07 03:48:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 24 seconds
Variants: generated 100, build-succeeded 25, build-failed 29, syntax-invalid 26, redundant 20
Fitness: max 0.991(22), min 0.983(3), ave 0.99
Test execution time: sum 14607 ms, max 858 ms, min 398 ms
----------------------------------------------------------------

2023-08-07 03:48:50 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-07 03:49:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 48 seconds
Variants: generated 100, build-succeeded 32, build-failed 27, syntax-invalid 30, redundant 11
Fitness: max 0.991(28), min 0.957(2), ave 0.989
Test execution time: sum 18511 ms, max 869 ms, min 413 ms
----------------------------------------------------------------

2023-08-07 03:49:15 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-07 03:49:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 13 seconds
Variants: generated 100, build-succeeded 31, build-failed 25, syntax-invalid 27, redundant 17
Fitness: max 0.991(23), min 0.966(3), ave 0.987
Test execution time: sum 18838 ms, max 902 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 03:49:40 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-07 03:50:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 34 seconds
Variants: generated 100, build-succeeded 24, build-failed 19, syntax-invalid 41, redundant 16
Fitness: max 1(1), min 0.983(5), ave 0.99
Test execution time: sum 14326 ms, max 858 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 03:50:00 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-07 03:50:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 59 seconds
Variants: generated 100, build-succeeded 29, build-failed 24, syntax-invalid 32, redundant 15
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 19375 ms, max 836 ms, min 454 ms
----------------------------------------------------------------

2023-08-07 03:50:26 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-07 03:50:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 26 seconds
Variants: generated 100, build-succeeded 28, build-failed 25, syntax-invalid 35, redundant 12
Fitness: max 0.991(25), min 0.966(1), ave 0.989
Test execution time: sum 20019 ms, max 1097 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 03:50:53 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-07 03:51:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 56 seconds
Variants: generated 100, build-succeeded 34, build-failed 27, syntax-invalid 29, redundant 10
Fitness: max 0.991(29), min 0.966(1), ave 0.99
Test execution time: sum 23358 ms, max 922 ms, min 481 ms
----------------------------------------------------------------

2023-08-07 03:51:22 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-07 03:51:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 28 seconds
Variants: generated 100, build-succeeded 38, build-failed 29, syntax-invalid 20, redundant 13
Fitness: max 1(1), min 0.966(3), ave 0.989
Test execution time: sum 25261 ms, max 836 ms, min 458 ms
----------------------------------------------------------------

2023-08-07 03:51:55 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-07 03:52:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 5 seconds
Variants: generated 100, build-succeeded 43, build-failed 24, syntax-invalid 24, redundant 9
Fitness: max 1(1), min 0.957(1), ave 0.991
Test execution time: sum 28309 ms, max 881 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 03:52:32 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-07 03:52:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 32 seconds
Variants: generated 100, build-succeeded 31, build-failed 28, syntax-invalid 27, redundant 14
Fitness: max 1(2), min 0.966(1), ave 0.991
Test execution time: sum 20514 ms, max 840 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 03:52:59 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-07 03:53:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 3 seconds
Variants: generated 100, build-succeeded 35, build-failed 21, syntax-invalid 27, redundant 17
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 23519 ms, max 897 ms, min 482 ms
----------------------------------------------------------------

2023-08-07 03:53:30 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-07 03:53:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 22 seconds
Variants: generated 100, build-succeeded 18, build-failed 29, syntax-invalid 35, redundant 18
Fitness: max 0.991(17), min 0.983(1), ave 0.991
Test execution time: sum 11969 ms, max 908 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 03:53:48 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-07 03:54:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 44 seconds
Variants: generated 100, build-succeeded 28, build-failed 30, syntax-invalid 28, redundant 14
Fitness: max 0.991(26), min 0.983(2), ave 0.991
Test execution time: sum 16842 ms, max 884 ms, min 402 ms
----------------------------------------------------------------

2023-08-07 03:54:11 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-07 03:54:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 6 seconds
Variants: generated 100, build-succeeded 25, build-failed 26, syntax-invalid 35, redundant 14
Fitness: max 1(2), min 0.922(1), ave 0.988
Test execution time: sum 15695 ms, max 903 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 03:54:33 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-07 03:54:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 26 seconds
Variants: generated 100, build-succeeded 22, build-failed 30, syntax-invalid 32, redundant 16
Fitness: max 0.991(17), min 0.974(1), ave 0.989
Test execution time: sum 14145 ms, max 800 ms, min 442 ms
----------------------------------------------------------------

2023-08-07 03:54:53 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-07 03:55:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 50 seconds
Variants: generated 100, build-succeeded 27, build-failed 18, syntax-invalid 34, redundant 21
Fitness: max 0.991(23), min 0.966(1), ave 0.989
Test execution time: sum 17788 ms, max 935 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 03:55:17 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-07 03:55:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 15 seconds
Variants: generated 100, build-succeeded 28, build-failed 23, syntax-invalid 36, redundant 13
Fitness: max 0.991(21), min 0.966(3), ave 0.987
Test execution time: sum 19363 ms, max 952 ms, min 478 ms
----------------------------------------------------------------

2023-08-07 03:55:42 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-07 03:56:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 35 seconds
Variants: generated 100, build-succeeded 22, build-failed 20, syntax-invalid 48, redundant 10
Fitness: max 1(1), min 0.957(1), ave 0.989
Test execution time: sum 14647 ms, max 887 ms, min 450 ms
----------------------------------------------------------------

2023-08-07 03:56:02 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-07 03:56:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 57 seconds
Variants: generated 100, build-succeeded 23, build-failed 20, syntax-invalid 49, redundant 8
Fitness: max 0.991(19), min 0.957(1), ave 0.987
Test execution time: sum 15597 ms, max 865 ms, min 551 ms
----------------------------------------------------------------

2023-08-07 03:56:24 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-07 03:56:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 11 seconds
Variants: generated 100, build-succeeded 14, build-failed 23, syntax-invalid 51, redundant 12
Fitness: max 0.991(12), min 0.957(1), ave 0.988
Test execution time: sum 9072 ms, max 747 ms, min 444 ms
----------------------------------------------------------------

2023-08-07 03:56:38 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-07 03:56:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 29 seconds
Variants: generated 100, build-succeeded 18, build-failed 19, syntax-invalid 47, redundant 16
Fitness: max 0.991(14), min 0.966(3), ave 0.987
Test execution time: sum 12665 ms, max 1168 ms, min 438 ms
----------------------------------------------------------------

2023-08-07 03:56:56 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-07 03:57:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 54 seconds
Variants: generated 100, build-succeeded 23, build-failed 18, syntax-invalid 38, redundant 21
Fitness: max 0.991(17), min 0.931(1), ave 0.985
Test execution time: sum 16288 ms, max 986 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 03:57:21 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-07 03:57:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 17 seconds
Variants: generated 100, build-succeeded 27, build-failed 21, syntax-invalid 35, redundant 17
Fitness: max 0.991(22), min 0.966(1), ave 0.989
Test execution time: sum 17767 ms, max 872 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 03:57:43 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-07 03:58:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 44 seconds
Variants: generated 100, build-succeeded 31, build-failed 23, syntax-invalid 38, redundant 8
Fitness: max 0.991(20), min 0.983(11), ave 0.988
Test execution time: sum 20800 ms, max 935 ms, min 457 ms
----------------------------------------------------------------

2023-08-07 03:58:11 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-07 03:58:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 4 seconds
Variants: generated 100, build-succeeded 20, build-failed 21, syntax-invalid 46, redundant 13
Fitness: max 0.991(17), min 0.931(1), ave 0.987
Test execution time: sum 13430 ms, max 914 ms, min 479 ms
----------------------------------------------------------------

2023-08-07 03:58:30 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-07 03:58:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 23 seconds
Variants: generated 100, build-succeeded 21, build-failed 25, syntax-invalid 41, redundant 13
Fitness: max 1(1), min 0.966(2), ave 0.989
Test execution time: sum 13603 ms, max 858 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 03:58:50 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-07 03:59:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 44 seconds
Variants: generated 100, build-succeeded 22, build-failed 25, syntax-invalid 38, redundant 15
Fitness: max 0.991(12), min 0.966(2), ave 0.985
Test execution time: sum 15097 ms, max 916 ms, min 480 ms
----------------------------------------------------------------

2023-08-07 03:59:10 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-07 03:59:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 1 seconds
Variants: generated 100, build-succeeded 17, build-failed 24, syntax-invalid 41, redundant 18
Fitness: max 0.991(16), min 0.983(1), ave 0.991
Test execution time: sum 11728 ms, max 894 ms, min 466 ms
----------------------------------------------------------------

2023-08-07 03:59:28 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-07 03:59:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 27 seconds
Variants: generated 100, build-succeeded 29, build-failed 21, syntax-invalid 34, redundant 16
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 19494 ms, max 941 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 03:59:54 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-07 04:00:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 50 seconds
Variants: generated 100, build-succeeded 21, build-failed 27, syntax-invalid 39, redundant 13
Fitness: max 1(1), min 0.966(1), ave 0.989
Test execution time: sum 16163 ms, max 1035 ms, min 546 ms
----------------------------------------------------------------

2023-08-07 04:00:17 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-07 04:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 14 seconds
Variants: generated 100, build-succeeded 27, build-failed 28, syntax-invalid 35, redundant 10
Fitness: max 1(2), min 0.983(2), ave 0.991
Test execution time: sum 17984 ms, max 871 ms, min 462 ms
----------------------------------------------------------------

2023-08-07 04:00:41 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-07 04:01:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 44 seconds
Variants: generated 100, build-succeeded 34, build-failed 26, syntax-invalid 32, redundant 8
Fitness: max 0.991(28), min 0.957(1), ave 0.988
Test execution time: sum 22647 ms, max 868 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 04:01:10 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-07 04:01:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 16 seconds
Variants: generated 100, build-succeeded 38, build-failed 19, syntax-invalid 32, redundant 11
Fitness: max 1(3), min 0.845(1), ave 0.986
Test execution time: sum 24835 ms, max 861 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 04:01:42 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-07 04:02:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 38 seconds
Variants: generated 100, build-succeeded 26, build-failed 28, syntax-invalid 33, redundant 13
Fitness: max 0.991(21), min 0.966(1), ave 0.989
Test execution time: sum 16224 ms, max 853 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 04:02:05 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-07 04:02:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 2 seconds
Variants: generated 100, build-succeeded 28, build-failed 24, syntax-invalid 35, redundant 13
Fitness: max 0.991(23), min 0.966(1), ave 0.989
Test execution time: sum 18794 ms, max 869 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 04:02:29 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-07 04:02:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 27 seconds
Variants: generated 100, build-succeeded 28, build-failed 19, syntax-invalid 40, redundant 13
Fitness: max 0.991(24), min 0.966(1), ave 0.99
Test execution time: sum 18811 ms, max 833 ms, min 466 ms
----------------------------------------------------------------

2023-08-07 04:02:54 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-07 04:03:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 45 seconds
Variants: generated 100, build-succeeded 19, build-failed 18, syntax-invalid 45, redundant 18
Fitness: max 1(3), min 0.983(2), ave 0.992
Test execution time: sum 12436 ms, max 928 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 04:03:11 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-07 04:03:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 6 seconds
Variants: generated 100, build-succeeded 23, build-failed 24, syntax-invalid 38, redundant 15
Fitness: max 0.991(19), min 0.966(1), ave 0.989
Test execution time: sum 15963 ms, max 925 ms, min 482 ms
----------------------------------------------------------------

2023-08-07 04:03:33 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-07 04:03:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 26 seconds
Variants: generated 100, build-succeeded 20, build-failed 25, syntax-invalid 42, redundant 13
Fitness: max 0.991(14), min 0.974(2), ave 0.988
Test execution time: sum 13606 ms, max 851 ms, min 502 ms
----------------------------------------------------------------

2023-08-07 04:03:53 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-07 04:04:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 47 seconds
Variants: generated 100, build-succeeded 25, build-failed 18, syntax-invalid 42, redundant 15
Fitness: max 0.991(21), min 0.966(2), ave 0.989
Test execution time: sum 15360 ms, max 859 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 04:04:14 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-07 04:04:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 3 seconds
Variants: generated 100, build-succeeded 18, build-failed 23, syntax-invalid 45, redundant 14
Fitness: max 0.991(16), min 0.983(2), ave 0.99
Test execution time: sum 11096 ms, max 941 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 04:04:30 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-07 04:04:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 19 seconds
Variants: generated 100, build-succeeded 19, build-failed 23, syntax-invalid 40, redundant 18
Fitness: max 0.991(14), min 0.957(1), ave 0.988
Test execution time: sum 11924 ms, max 930 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 04:04:46 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-07 04:05:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 40 seconds
Variants: generated 100, build-succeeded 24, build-failed 23, syntax-invalid 40, redundant 13
Fitness: max 0.991(18), min 0.966(2), ave 0.988
Test execution time: sum 15413 ms, max 810 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 04:05:07 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-07 04:05:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 4 seconds
Variants: generated 100, build-succeeded 26, build-failed 23, syntax-invalid 37, redundant 14
Fitness: max 0.991(20), min 0.845(1), ave 0.982
Test execution time: sum 17569 ms, max 885 ms, min 503 ms
----------------------------------------------------------------

2023-08-07 04:05:31 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-07 04:05:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 22 seconds
Variants: generated 100, build-succeeded 18, build-failed 26, syntax-invalid 47, redundant 9
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 12154 ms, max 831 ms, min 543 ms
----------------------------------------------------------------

2023-08-07 04:05:49 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-07 04:06:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 37 seconds
Variants: generated 100, build-succeeded 17, build-failed 28, syntax-invalid 45, redundant 10
Fitness: max 0.991(14), min 0.983(3), ave 0.99
Test execution time: sum 10764 ms, max 836 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 04:06:04 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-07 04:06:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 59 seconds
Variants: generated 100, build-succeeded 28, build-failed 18, syntax-invalid 39, redundant 15
Fitness: max 1(1), min 0.845(1), ave 0.984
Test execution time: sum 16769 ms, max 975 ms, min 402 ms
----------------------------------------------------------------

2023-08-07 04:06:26 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-07 04:06:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 23 seconds
Variants: generated 100, build-succeeded 29, build-failed 25, syntax-invalid 37, redundant 9
Fitness: max 0.991(23), min 0.845(1), ave 0.983
Test execution time: sum 18162 ms, max 835 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 04:06:50 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-07 04:07:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 43 seconds
Variants: generated 100, build-succeeded 23, build-failed 21, syntax-invalid 41, redundant 15
Fitness: max 0.991(19), min 0.966(3), ave 0.988
Test execution time: sum 14271 ms, max 822 ms, min 430 ms
----------------------------------------------------------------

2023-08-07 04:07:10 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-07 04:07:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 6 seconds
Variants: generated 100, build-succeeded 26, build-failed 30, syntax-invalid 34, redundant 10
Fitness: max 1(2), min 0.983(1), ave 0.992
Test execution time: sum 18003 ms, max 887 ms, min 485 ms
----------------------------------------------------------------

2023-08-07 04:07:33 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-07 04:07:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 30 seconds
Variants: generated 100, build-succeeded 27, build-failed 21, syntax-invalid 36, redundant 16
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 18008 ms, max 896 ms, min 473 ms
----------------------------------------------------------------

2023-08-07 04:07:57 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-07 04:08:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 53 seconds
Variants: generated 100, build-succeeded 24, build-failed 24, syntax-invalid 36, redundant 16
Fitness: max 0.991(17), min 0.957(2), ave 0.986
Test execution time: sum 16678 ms, max 896 ms, min 491 ms
----------------------------------------------------------------

2023-08-07 04:08:19 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-07 04:08:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 13 seconds
Variants: generated 100, build-succeeded 22, build-failed 21, syntax-invalid 41, redundant 16
Fitness: max 0.991(17), min 0.966(2), ave 0.988
Test execution time: sum 15158 ms, max 890 ms, min 452 ms
----------------------------------------------------------------

2023-08-07 04:08:39 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-07 04:09:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 33 seconds
Variants: generated 100, build-succeeded 23, build-failed 21, syntax-invalid 38, redundant 18
Fitness: max 1(1), min 0.836(1), ave 0.978
Test execution time: sum 15392 ms, max 831 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 04:09:00 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-07 04:09:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 51 seconds
Variants: generated 100, build-succeeded 17, build-failed 22, syntax-invalid 47, redundant 14
Fitness: max 0.991(13), min 0.974(1), ave 0.989
Test execution time: sum 11740 ms, max 906 ms, min 490 ms
----------------------------------------------------------------

2023-08-07 04:09:18 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-07 04:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 16 seconds
Variants: generated 100, build-succeeded 27, build-failed 23, syntax-invalid 40, redundant 10
Fitness: max 1(1), min 0.853(1), ave 0.983
Test execution time: sum 18587 ms, max 1051 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 04:09:43 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-07 04:10:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 33 seconds
Variants: generated 100, build-succeeded 17, build-failed 25, syntax-invalid 44, redundant 14
Fitness: max 0.991(10), min 0.922(1), ave 0.982
Test execution time: sum 10570 ms, max 861 ms, min 438 ms
----------------------------------------------------------------

2023-08-07 04:10:00 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-07 04:10:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 55 seconds
Variants: generated 100, build-succeeded 25, build-failed 25, syntax-invalid 37, redundant 13
Fitness: max 0.991(21), min 0.836(1), ave 0.983
Test execution time: sum 16189 ms, max 870 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 04:10:22 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-07 04:10:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 13 seconds
Variants: generated 100, build-succeeded 15, build-failed 37, syntax-invalid 42, redundant 6
Fitness: max 1(1), min 0.991(14), ave 0.992
Test execution time: sum 10527 ms, max 903 ms, min 542 ms
----------------------------------------------------------------

2023-08-07 04:10:39 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-07 04:11:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 34 seconds
Variants: generated 100, build-succeeded 22, build-failed 31, syntax-invalid 38, redundant 9
Fitness: max 0.991(19), min 0.931(1), ave 0.988
Test execution time: sum 15232 ms, max 837 ms, min 495 ms
----------------------------------------------------------------

2023-08-07 04:11:01 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-07 04:11:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 55 seconds
Variants: generated 100, build-succeeded 22, build-failed 18, syntax-invalid 44, redundant 16
Fitness: max 1(2), min 0.974(1), ave 0.991
Test execution time: sum 14913 ms, max 908 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 04:11:22 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-07 04:11:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 15 seconds
Variants: generated 100, build-succeeded 21, build-failed 28, syntax-invalid 40, redundant 11
Fitness: max 0.991(17), min 0.966(1), ave 0.989
Test execution time: sum 14058 ms, max 931 ms, min 466 ms
----------------------------------------------------------------

2023-08-07 04:11:42 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-07 04:12:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 39 seconds
Variants: generated 100, build-succeeded 24, build-failed 22, syntax-invalid 43, redundant 11
Fitness: max 0.991(21), min 0.983(3), ave 0.99
Test execution time: sum 16801 ms, max 835 ms, min 473 ms
----------------------------------------------------------------

2023-08-07 04:12:06 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-07 04:12:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 56 seconds
Variants: generated 100, build-succeeded 15, build-failed 31, syntax-invalid 46, redundant 8
Fitness: max 1(1), min 0.983(2), ave 0.991
Test execution time: sum 10263 ms, max 840 ms, min 521 ms
----------------------------------------------------------------

2023-08-07 04:12:23 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-07 04:12:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 17 seconds
Variants: generated 100, build-succeeded 17, build-failed 29, syntax-invalid 43, redundant 11
Fitness: max 1(1), min 0.836(1), ave 0.972
Test execution time: sum 12399 ms, max 907 ms, min 534 ms
----------------------------------------------------------------

2023-08-07 04:12:44 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-07 04:13:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 35 seconds
Variants: generated 100, build-succeeded 18, build-failed 28, syntax-invalid 39, redundant 15
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 12233 ms, max 831 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 04:13:02 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-07 04:13:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 54 seconds
Variants: generated 100, build-succeeded 19, build-failed 26, syntax-invalid 48, redundant 7
Fitness: max 1(2), min 0.957(1), ave 0.99
Test execution time: sum 12531 ms, max 817 ms, min 442 ms
----------------------------------------------------------------

2023-08-07 04:13:21 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-07 04:13:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 6 seconds
Variants: generated 100, build-succeeded 10, build-failed 32, syntax-invalid 47, redundant 11
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 6311 ms, max 740 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 04:13:33 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-07 04:13:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 17 seconds
Variants: generated 100, build-succeeded 10, build-failed 26, syntax-invalid 53, redundant 11
Fitness: max 0.991(9), min 0.983(1), ave 0.991
Test execution time: sum 6096 ms, max 764 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 04:13:44 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-07 04:13:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 27 seconds
Variants: generated 100, build-succeeded 8, build-failed 26, syntax-invalid 48, redundant 18
Fitness: max 0.991(6), min 0.974(1), ave 0.988
Test execution time: sum 5326 ms, max 860 ms, min 452 ms
----------------------------------------------------------------

2023-08-07 04:13:54 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-07 04:14:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 43 seconds
Variants: generated 100, build-succeeded 16, build-failed 31, syntax-invalid 43, redundant 10
Fitness: max 0.991(14), min 0.983(2), ave 0.99
Test execution time: sum 10383 ms, max 885 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 04:14:10 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-07 04:14:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 56 seconds
Variants: generated 100, build-succeeded 11, build-failed 28, syntax-invalid 44, redundant 17
Fitness: max 1(1), min 0.966(1), ave 0.987
Test execution time: sum 7461 ms, max 906 ms, min 548 ms
----------------------------------------------------------------

2023-08-07 04:14:23 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-07 04:14:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 14 seconds
Variants: generated 100, build-succeeded 16, build-failed 34, syntax-invalid 44, redundant 6
Fitness: max 1(1), min 0.966(1), ave 0.99
Test execution time: sum 11020 ms, max 881 ms, min 532 ms
----------------------------------------------------------------

2023-08-07 04:14:41 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-07 04:14:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 29 seconds
Variants: generated 100, build-succeeded 12, build-failed 31, syntax-invalid 44, redundant 13
Fitness: max 1(1), min 0.983(3), ave 0.99
Test execution time: sum 7743 ms, max 795 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 04:14:56 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-07 04:15:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 41 seconds
Variants: generated 100, build-succeeded 11, build-failed 25, syntax-invalid 46, redundant 18
Fitness: max 0.991(8), min 0.974(1), ave 0.988
Test execution time: sum 7413 ms, max 829 ms, min 500 ms
----------------------------------------------------------------

2023-08-07 04:15:08 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-07 04:15:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 54 seconds
Variants: generated 100, build-succeeded 11, build-failed 32, syntax-invalid 45, redundant 12
Fitness: max 0.991(10), min 0.983(1), ave 0.991
Test execution time: sum 7240 ms, max 898 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 04:15:21 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-07 04:15:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 5 seconds
Variants: generated 100, build-succeeded 7, build-failed 24, syntax-invalid 56, redundant 13
Fitness: max 1(1), min 0.991(6), ave 0.993
Test execution time: sum 4732 ms, max 861 ms, min 506 ms
----------------------------------------------------------------

2023-08-07 04:15:32 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-07 04:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 21 seconds
Variants: generated 100, build-succeeded 14, build-failed 28, syntax-invalid 47, redundant 11
Fitness: max 1(3), min 0.948(1), ave 0.988
Test execution time: sum 10858 ms, max 1045 ms, min 666 ms
----------------------------------------------------------------

2023-08-07 04:15:48 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-07 04:16:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 33 seconds
Variants: generated 100, build-succeeded 8, build-failed 34, syntax-invalid 49, redundant 9
Fitness: max 1(2), min 0.983(2), ave 0.991
Test execution time: sum 5557 ms, max 747 ms, min 657 ms
----------------------------------------------------------------

2023-08-07 04:16:00 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-07 04:16:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 44 seconds
Variants: generated 100, build-succeeded 8, build-failed 28, syntax-invalid 51, redundant 13
Fitness: max 0.991(7), min 0.983(1), ave 0.99
Test execution time: sum 5708 ms, max 908 ms, min 479 ms
----------------------------------------------------------------

2023-08-07 04:16:11 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-07 04:16:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 55 seconds
Variants: generated 100, build-succeeded 7, build-failed 33, syntax-invalid 50, redundant 10
Fitness: max 0.991(7), min 0.991(7), ave 0.991
Test execution time: sum 5083 ms, max 795 ms, min 618 ms
----------------------------------------------------------------

2023-08-07 04:16:22 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-07 04:16:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 6 seconds
Variants: generated 100, build-succeeded 6, build-failed 31, syntax-invalid 51, redundant 12
Fitness: max 0.991(6), min 0.991(6), ave 0.991
Test execution time: sum 4620 ms, max 834 ms, min 665 ms
----------------------------------------------------------------

2023-08-07 04:16:33 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-07 04:16:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 18 seconds
Variants: generated 100, build-succeeded 10, build-failed 25, syntax-invalid 45, redundant 20
Fitness: max 0.991(9), min 0.836(1), ave 0.976
Test execution time: sum 6357 ms, max 778 ms, min 485 ms
----------------------------------------------------------------

2023-08-07 04:16:45 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-07 04:16:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 32 seconds
Variants: generated 100, build-succeeded 10, build-failed 31, syntax-invalid 48, redundant 11
Fitness: max 1(1), min 0.957(1), ave 0.986
Test execution time: sum 6701 ms, max 736 ms, min 567 ms
----------------------------------------------------------------

2023-08-07 04:16:59 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-07 04:17:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 42 seconds
Variants: generated 100, build-succeeded 7, build-failed 28, syntax-invalid 51, redundant 14
Fitness: max 1(1), min 0.991(6), ave 0.993
Test execution time: sum 4739 ms, max 820 ms, min 477 ms
----------------------------------------------------------------

2023-08-07 04:17:09 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-07 04:17:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 55 seconds
Variants: generated 100, build-succeeded 9, build-failed 22, syntax-invalid 58, redundant 11
Fitness: max 0.991(3), min 0.966(2), ave 0.981
Test execution time: sum 6256 ms, max 848 ms, min 507 ms
----------------------------------------------------------------

2023-08-07 04:17:22 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-07 04:17:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 5 seconds
Variants: generated 100, build-succeeded 7, build-failed 32, syntax-invalid 52, redundant 9
Fitness: max 1(1), min 0.931(1), ave 0.983
Test execution time: sum 5099 ms, max 898 ms, min 532 ms
----------------------------------------------------------------

2023-08-07 04:17:32 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-07 04:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 20 seconds
Variants: generated 100, build-succeeded 12, build-failed 30, syntax-invalid 48, redundant 10
Fitness: max 1(2), min 0.948(1), ave 0.987
Test execution time: sum 8237 ms, max 863 ms, min 505 ms
----------------------------------------------------------------

2023-08-07 04:17:46 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-07 04:17:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 30 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 53, redundant 18
Fitness: max 0.991(4), min 0.966(1), ave 0.984
Test execution time: sum 4488 ms, max 894 ms, min 554 ms
----------------------------------------------------------------

2023-08-07 04:17:57 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-07 04:18:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 43 seconds
Variants: generated 100, build-succeeded 11, build-failed 28, syntax-invalid 49, redundant 12
Fitness: max 0.991(6), min 0.914(1), ave 0.978
Test execution time: sum 7006 ms, max 831 ms, min 416 ms
----------------------------------------------------------------

2023-08-07 04:18:10 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-07 04:18:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 56 seconds
Variants: generated 100, build-succeeded 12, build-failed 23, syntax-invalid 52, redundant 13
Fitness: max 0.991(9), min 0.914(1), ave 0.982
Test execution time: sum 8255 ms, max 1015 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 04:18:23 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-07 04:18:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 5 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 51, redundant 16
Fitness: max 0.991(5), min 0.983(1), ave 0.99
Test execution time: sum 3618 ms, max 759 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 04:18:32 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-07 04:18:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 18 seconds
Variants: generated 100, build-succeeded 9, build-failed 30, syntax-invalid 54, redundant 7
Fitness: max 1(1), min 0.983(2), ave 0.99
Test execution time: sum 6306 ms, max 865 ms, min 475 ms
----------------------------------------------------------------

2023-08-07 04:18:45 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-07 04:18:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 31 seconds
Variants: generated 100, build-succeeded 10, build-failed 32, syntax-invalid 54, redundant 4
Fitness: max 0.991(2), min 0.974(1), ave 0.984
Test execution time: sum 6604 ms, max 940 ms, min 415 ms
----------------------------------------------------------------

2023-08-07 04:18:58 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-07 04:19:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 43 seconds
Variants: generated 100, build-succeeded 11, build-failed 21, syntax-invalid 51, redundant 17
Fitness: max 0.991(5), min 0.974(2), ave 0.985
Test execution time: sum 6671 ms, max 833 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 04:19:09 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-07 04:19:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 56 seconds
Variants: generated 100, build-succeeded 13, build-failed 24, syntax-invalid 51, redundant 12
Fitness: max 1(1), min 0.957(1), ave 0.985
Test execution time: sum 8171 ms, max 752 ms, min 456 ms
----------------------------------------------------------------

2023-08-07 04:19:23 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-07 04:19:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 7 seconds
Variants: generated 100, build-succeeded 8, build-failed 27, syntax-invalid 51, redundant 14
Fitness: max 0.991(5), min 0.966(2), ave 0.984
Test execution time: sum 5239 ms, max 752 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 04:19:34 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-07 04:19:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 18 seconds
Variants: generated 100, build-succeeded 8, build-failed 26, syntax-invalid 53, redundant 13
Fitness: max 1(1), min 0.983(2), ave 0.99
Test execution time: sum 5313 ms, max 859 ms, min 455 ms
----------------------------------------------------------------

2023-08-07 04:19:45 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-07 04:19:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 26 seconds
Variants: generated 100, build-succeeded 4, build-failed 24, syntax-invalid 56, redundant 16
Fitness: max 0.991(1), min 0.966(2), ave 0.976
Test execution time: sum 2839 ms, max 859 ms, min 448 ms
----------------------------------------------------------------

2023-08-07 04:19:53 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-07 04:20:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 35 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 56, redundant 14
Fitness: max 0.991(5), min 0.991(5), ave 0.991
Test execution time: sum 3543 ms, max 802 ms, min 536 ms
----------------------------------------------------------------

2023-08-07 04:20:02 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-07 04:20:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 43 seconds
Variants: generated 100, build-succeeded 5, build-failed 23, syntax-invalid 54, redundant 18
Fitness: max 0.991(2), min 0.914(1), ave 0.971
Test execution time: sum 3075 ms, max 688 ms, min 490 ms
----------------------------------------------------------------

2023-08-07 04:20:10 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-07 04:20:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 52 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 52, redundant 18
Fitness: max 0.991(4), min 0.974(1), ave 0.988
Test execution time: sum 3401 ms, max 839 ms, min 480 ms
----------------------------------------------------------------

2023-08-07 04:20:19 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-07 04:20:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 6 seconds
Variants: generated 100, build-succeeded 13, build-failed 18, syntax-invalid 51, redundant 18
Fitness: max 1(1), min 0.845(1), ave 0.975
Test execution time: sum 8440 ms, max 840 ms, min 466 ms
----------------------------------------------------------------

2023-08-07 04:20:33 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-07 04:20:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 17 seconds
Variants: generated 100, build-succeeded 8, build-failed 23, syntax-invalid 59, redundant 10
Fitness: max 0.991(6), min 0.957(1), ave 0.986
Test execution time: sum 5587 ms, max 781 ms, min 584 ms
----------------------------------------------------------------

2023-08-07 04:20:44 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-07 04:20:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 27 seconds
Variants: generated 100, build-succeeded 7, build-failed 27, syntax-invalid 54, redundant 12
Fitness: max 0.991(3), min 0.983(4), ave 0.986
Test execution time: sum 4401 ms, max 919 ms, min 400 ms
----------------------------------------------------------------

2023-08-07 04:20:54 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-07 04:21:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 37 seconds
Variants: generated 100, build-succeeded 7, build-failed 18, syntax-invalid 58, redundant 17
Fitness: max 1(1), min 0.966(1), ave 0.986
Test execution time: sum 4396 ms, max 839 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 04:21:03 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-07 04:21:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 46 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 54, redundant 12
Fitness: max 1(1), min 0.914(1), ave 0.976
Test execution time: sum 3222 ms, max 799 ms, min 523 ms
----------------------------------------------------------------

2023-08-07 04:21:12 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-07 04:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 54 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 56, redundant 15
Fitness: max 0.991(5), min 0.845(1), ave 0.967
Test execution time: sum 3613 ms, max 790 ms, min 434 ms
----------------------------------------------------------------

2023-08-07 04:21:21 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-07 04:21:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 3 seconds
Variants: generated 100, build-succeeded 7, build-failed 21, syntax-invalid 55, redundant 17
Fitness: max 0.991(4), min 0.983(3), ave 0.988
Test execution time: sum 4192 ms, max 801 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 04:21:30 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-07 04:21:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 11 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 57, redundant 11
Fitness: max 1(1), min 0.931(1), ave 0.981
Test execution time: sum 2972 ms, max 821 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 04:21:38 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-07 04:21:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 25 seconds
Variants: generated 100, build-succeeded 8, build-failed 24, syntax-invalid 55, redundant 13
Fitness: max 1(1), min 0.922(1), ave 0.975
Test execution time: sum 6420 ms, max 1062 ms, min 589 ms
----------------------------------------------------------------

2023-08-07 04:21:52 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-07 04:22:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 35 seconds
Variants: generated 100, build-succeeded 7, build-failed 25, syntax-invalid 57, redundant 11
Fitness: max 0.991(4), min 0.966(2), ave 0.983
Test execution time: sum 4584 ms, max 891 ms, min 479 ms
----------------------------------------------------------------

2023-08-07 04:22:02 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-07 04:22:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 46 seconds
Variants: generated 100, build-succeeded 7, build-failed 28, syntax-invalid 51, redundant 14
Fitness: max 1(1), min 0.974(1), ave 0.989
Test execution time: sum 4925 ms, max 945 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 04:22:13 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-07 04:22:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 57 seconds
Variants: generated 100, build-succeeded 9, build-failed 22, syntax-invalid 55, redundant 14
Fitness: max 0.991(7), min 0.966(1), ave 0.988
Test execution time: sum 5349 ms, max 843 ms, min 412 ms
----------------------------------------------------------------

2023-08-07 04:22:24 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-07 04:22:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 6 seconds
Variants: generated 100, build-succeeded 6, build-failed 28, syntax-invalid 50, redundant 16
Fitness: max 1(2), min 0.974(1), ave 0.99
Test execution time: sum 3509 ms, max 743 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 04:22:33 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-07 04:22:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 15 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 53, redundant 15
Fitness: max 0.991(2), min 0.966(1), ave 0.981
Test execution time: sum 3360 ms, max 746 ms, min 514 ms
----------------------------------------------------------------

2023-08-07 04:22:42 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-07 04:22:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 27 seconds
Variants: generated 100, build-succeeded 11, build-failed 27, syntax-invalid 53, redundant 9
Fitness: max 1(2), min 0.966(1), ave 0.988
Test execution time: sum 6655 ms, max 782 ms, min 443 ms
----------------------------------------------------------------

2023-08-07 04:22:54 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-07 04:23:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 37 seconds
Variants: generated 100, build-succeeded 7, build-failed 25, syntax-invalid 56, redundant 12
Fitness: max 0.991(3), min 0.966(3), ave 0.979
Test execution time: sum 4081 ms, max 803 ms, min 432 ms
----------------------------------------------------------------

2023-08-07 04:23:04 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-07 04:23:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 48 seconds
Variants: generated 100, build-succeeded 6, build-failed 35, syntax-invalid 51, redundant 8
Fitness: max 0.991(2), min 0.931(1), ave 0.977
Test execution time: sum 4011 ms, max 797 ms, min 472 ms
----------------------------------------------------------------

2023-08-07 04:23:15 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-07 04:23:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 58 seconds
Variants: generated 100, build-succeeded 5, build-failed 28, syntax-invalid 50, redundant 17
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 3160 ms, max 795 ms, min 420 ms
----------------------------------------------------------------

2023-08-07 04:23:24 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-07 04:23:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 7 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 52, redundant 15
Fitness: max 0.991(7), min 0.991(7), ave 0.991
Test execution time: sum 4500 ms, max 882 ms, min 466 ms
----------------------------------------------------------------

2023-08-07 04:23:34 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-07 04:23:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 18 seconds
Variants: generated 100, build-succeeded 7, build-failed 25, syntax-invalid 56, redundant 12
Fitness: max 1(3), min 0.991(4), ave 0.995
Test execution time: sum 4519 ms, max 890 ms, min 485 ms
----------------------------------------------------------------

2023-08-07 04:23:45 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-07 04:23:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 29 seconds
Variants: generated 100, build-succeeded 8, build-failed 29, syntax-invalid 53, redundant 10
Fitness: max 0.991(5), min 0.931(1), ave 0.982
Test execution time: sum 4988 ms, max 869 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 04:23:56 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-07 04:24:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 42 seconds
Variants: generated 100, build-succeeded 9, build-failed 23, syntax-invalid 56, redundant 12
Fitness: max 1(1), min 0.957(1), ave 0.987
Test execution time: sum 5974 ms, max 797 ms, min 456 ms
----------------------------------------------------------------

2023-08-07 04:24:09 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-07 04:24:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 52 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 57, redundant 11
Fitness: max 0.991(2), min 0.931(1), ave 0.976
Test execution time: sum 3069 ms, max 745 ms, min 484 ms
----------------------------------------------------------------

2023-08-07 04:24:19 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-07 04:24:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 59 seconds
Variants: generated 100, build-succeeded 3, build-failed 23, syntax-invalid 58, redundant 16
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1668 ms, max 634 ms, min 504 ms
----------------------------------------------------------------

2023-08-07 04:24:26 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-07 04:24:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 9 seconds
Variants: generated 100, build-succeeded 6, build-failed 29, syntax-invalid 52, redundant 13
Fitness: max 1(1), min 0.966(2), ave 0.981
Test execution time: sum 3747 ms, max 766 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 04:24:36 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-07 04:24:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 16 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 55, redundant 16
Fitness: max 0.991(2), min 0.957(1), ave 0.976
Test execution time: sum 2032 ms, max 698 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 04:24:43 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-07 04:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 24 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 55, redundant 16
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 1844 ms, max 675 ms, min 532 ms
----------------------------------------------------------------

2023-08-07 04:24:50 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-07 04:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 32 seconds
Variants: generated 100, build-succeeded 4, build-failed 19, syntax-invalid 61, redundant 16
Fitness: max 0.991(3), min 0.983(1), ave 0.989
Test execution time: sum 2431 ms, max 812 ms, min 441 ms
----------------------------------------------------------------

2023-08-07 04:24:59 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-07 04:25:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 40 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 57, redundant 12
Fitness: max 0.991(2), min 0.845(1), ave 0.953
Test execution time: sum 2346 ms, max 794 ms, min 409 ms
----------------------------------------------------------------

2023-08-07 04:25:07 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-07 04:25:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 49 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 56, redundant 14
Fitness: max 0.991(4), min 0.905(1), ave 0.974
Test execution time: sum 3098 ms, max 788 ms, min 465 ms
----------------------------------------------------------------

2023-08-07 04:25:16 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-07 04:25:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 0 seconds
Variants: generated 100, build-succeeded 7, build-failed 22, syntax-invalid 57, redundant 14
Fitness: max 0.991(3), min 0.957(1), ave 0.98
Test execution time: sum 4300 ms, max 779 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 04:25:27 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-07 04:25:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 11 seconds
Variants: generated 100, build-succeeded 8, build-failed 22, syntax-invalid 62, redundant 8
Fitness: max 0.991(5), min 0.966(3), ave 0.982
Test execution time: sum 5057 ms, max 792 ms, min 477 ms
----------------------------------------------------------------

2023-08-07 04:25:38 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-07 04:25:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 19 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 54, redundant 15
Fitness: max 0.983(1), min 0.845(1), ave 0.94
Test execution time: sum 2154 ms, max 617 ms, min 444 ms
----------------------------------------------------------------

2023-08-07 04:25:46 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-07 04:25:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 28 seconds
Variants: generated 100, build-succeeded 4, build-failed 30, syntax-invalid 58, redundant 8
Fitness: max 0.991(3), min 0.931(1), ave 0.976
Test execution time: sum 2710 ms, max 867 ms, min 488 ms
----------------------------------------------------------------

2023-08-07 04:25:55 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-07 04:26:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 37 seconds
Variants: generated 100, build-succeeded 6, build-failed 21, syntax-invalid 55, redundant 18
Fitness: max 0.991(4), min 0.966(1), ave 0.986
Test execution time: sum 3864 ms, max 758 ms, min 482 ms
----------------------------------------------------------------

2023-08-07 04:26:04 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-07 04:26:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 45 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 56, redundant 14
Fitness: max 1(1), min 0.974(1), ave 0.99
Test execution time: sum 2771 ms, max 769 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 04:26:12 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-07 04:26:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 54 seconds
Variants: generated 100, build-succeeded 4, build-failed 22, syntax-invalid 53, redundant 21
Fitness: max 0.991(2), min 0.983(2), ave 0.987
Test execution time: sum 2718 ms, max 902 ms, min 468 ms
----------------------------------------------------------------

2023-08-07 04:26:21 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-07 04:26:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 2 seconds
Variants: generated 100, build-succeeded 4, build-failed 26, syntax-invalid 56, redundant 14
Fitness: max 0.991(3), min 0.957(1), ave 0.983
Test execution time: sum 2318 ms, max 825 ms, min 429 ms
----------------------------------------------------------------

2023-08-07 04:26:29 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-07 04:26:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 10 seconds
Variants: generated 100, build-succeeded 5, build-failed 18, syntax-invalid 63, redundant 14
Fitness: max 0.991(3), min 0.845(1), ave 0.96
Test execution time: sum 3204 ms, max 887 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 04:26:37 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-07 04:26:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 19 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 53, redundant 16
Fitness: max 0.991(3), min 0.983(1), ave 0.989
Test execution time: sum 2344 ms, max 759 ms, min 419 ms
----------------------------------------------------------------

2023-08-07 04:26:45 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-07 04:26:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 26 seconds
Variants: generated 100, build-succeeded 4, build-failed 23, syntax-invalid 56, redundant 17
Fitness: max 0.991(2), min 0.966(1), ave 0.983
Test execution time: sum 2426 ms, max 778 ms, min 449 ms
----------------------------------------------------------------

2023-08-07 04:26:53 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-07 04:27:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 34 seconds
Variants: generated 100, build-succeeded 4, build-failed 27, syntax-invalid 53, redundant 16
Fitness: max 1(2), min 0.991(2), ave 0.996
Test execution time: sum 2654 ms, max 755 ms, min 506 ms
----------------------------------------------------------------

2023-08-07 04:27:01 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-07 04:27:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 43 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 52, redundant 16
Fitness: max 0.991(4), min 0.966(1), ave 0.986
Test execution time: sum 3775 ms, max 754 ms, min 501 ms
----------------------------------------------------------------

2023-08-07 04:27:10 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-07 04:27:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 55 seconds
Variants: generated 100, build-succeeded 10, build-failed 24, syntax-invalid 54, redundant 12
Fitness: max 1(1), min 0.991(9), ave 0.992
Test execution time: sum 6105 ms, max 810 ms, min 435 ms
----------------------------------------------------------------

2023-08-07 04:27:22 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-07 04:27:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 6 seconds
Variants: generated 100, build-succeeded 7, build-failed 26, syntax-invalid 55, redundant 12
Fitness: max 1(2), min 0.983(1), ave 0.993
Test execution time: sum 4404 ms, max 832 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 04:27:33 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-07 04:27:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 14 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 52, redundant 19
Fitness: max 0.991(3), min 0.991(3), ave 0.991
Test execution time: sum 1849 ms, max 690 ms, min 486 ms
----------------------------------------------------------------

2023-08-07 04:27:41 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-07 04:27:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 21 seconds
Variants: generated 100, build-succeeded 3, build-failed 20, syntax-invalid 53, redundant 24
Fitness: max 0.991(2), min 0.983(1), ave 0.989
Test execution time: sum 1631 ms, max 629 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 04:27:48 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-07 04:27:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 30 seconds
Variants: generated 100, build-succeeded 3, build-failed 26, syntax-invalid 53, redundant 18
Fitness: max 1(2), min 0.991(1), ave 0.997
Test execution time: sum 1953 ms, max 1051 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 04:27:57 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-07 04:28:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 40 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 51, redundant 17
Fitness: max 0.991(4), min 0.966(2), ave 0.983
Test execution time: sum 4032 ms, max 764 ms, min 495 ms
----------------------------------------------------------------

2023-08-07 04:28:06 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-07 04:28:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 48 seconds
Variants: generated 100, build-succeeded 4, build-failed 29, syntax-invalid 56, redundant 11
Fitness: max 1(1), min 0.974(1), ave 0.989
Test execution time: sum 2725 ms, max 866 ms, min 453 ms
----------------------------------------------------------------

2023-08-07 04:28:15 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-07 04:28:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 1 seconds
Variants: generated 100, build-succeeded 10, build-failed 25, syntax-invalid 50, redundant 15
Fitness: max 0.991(6), min 0.957(1), ave 0.984
Test execution time: sum 5966 ms, max 784 ms, min 444 ms
----------------------------------------------------------------

2023-08-07 04:28:28 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-07 04:28:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 10 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 54, redundant 14
Fitness: max 0.991(5), min 0.991(5), ave 0.991
Test execution time: sum 3317 ms, max 887 ms, min 447 ms
----------------------------------------------------------------

2023-08-07 04:28:36 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-07 04:28:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 21 seconds
Variants: generated 100, build-succeeded 9, build-failed 17, syntax-invalid 56, redundant 18
Fitness: max 0.991(6), min 0.966(2), ave 0.985
Test execution time: sum 5822 ms, max 818 ms, min 425 ms
----------------------------------------------------------------

2023-08-07 04:28:48 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-07 04:28:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 31 seconds
Variants: generated 100, build-succeeded 5, build-failed 28, syntax-invalid 52, redundant 15
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 2748 ms, max 688 ms, min 433 ms
----------------------------------------------------------------

2023-08-07 04:28:58 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-07 04:29:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 39 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 52, redundant 19
Fitness: max 1(1), min 0.966(1), ave 0.985
Test execution time: sum 2446 ms, max 791 ms, min 427 ms
----------------------------------------------------------------

2023-08-07 04:29:06 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-07 04:29:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 49 seconds
Variants: generated 100, build-succeeded 6, build-failed 27, syntax-invalid 53, redundant 14
Fitness: max 1(1), min 0.862(1), ave 0.967
Test execution time: sum 3917 ms, max 780 ms, min 471 ms
----------------------------------------------------------------

2023-08-07 04:29:16 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-07 04:29:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 59 seconds
Variants: generated 100, build-succeeded 6, build-failed 18, syntax-invalid 57, redundant 19
Fitness: max 0.991(5), min 0.931(1), ave 0.981
Test execution time: sum 3596 ms, max 741 ms, min 439 ms
----------------------------------------------------------------

2023-08-07 04:29:26 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-07 04:29:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 11 seconds
Variants: generated 100, build-succeeded 9, build-failed 24, syntax-invalid 55, redundant 12
Fitness: max 1(2), min 0.931(1), ave 0.981
Test execution time: sum 5543 ms, max 790 ms, min 445 ms
----------------------------------------------------------------

2023-08-07 04:29:38 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-07 04:29:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 21 seconds
Variants: generated 100, build-succeeded 4, build-failed 22, syntax-invalid 55, redundant 19
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 2617 ms, max 729 ms, min 458 ms
----------------------------------------------------------------

2023-08-07 04:29:48 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-07 04:30:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 34 seconds
Variants: generated 100, build-succeeded 10, build-failed 24, syntax-invalid 52, redundant 14
Fitness: max 1(1), min 0.983(1), ave 0.991
Test execution time: sum 6647 ms, max 1264 ms, min 424 ms
----------------------------------------------------------------

2023-08-07 04:30:01 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-07 04:30:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 44 seconds
Variants: generated 100, build-succeeded 6, build-failed 26, syntax-invalid 53, redundant 15
Fitness: max 0.991(5), min 0.974(1), ave 0.989
Test execution time: sum 3578 ms, max 800 ms, min 437 ms
----------------------------------------------------------------

2023-08-07 04:30:11 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-07 04:30:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 54 seconds
Variants: generated 100, build-succeeded 4, build-failed 31, syntax-invalid 54, redundant 11
Fitness: max 0.991(2), min 0.974(2), ave 0.983
Test execution time: sum 2304 ms, max 770 ms, min 423 ms
----------------------------------------------------------------

2023-08-07 04:30:21 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-07 04:30:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 4 seconds
Variants: generated 100, build-succeeded 5, build-failed 23, syntax-invalid 54, redundant 18
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 3643 ms, max 809 ms, min 654 ms
----------------------------------------------------------------

2023-08-07 04:30:31 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-07 04:30:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 14 seconds
Variants: generated 100, build-succeeded 6, build-failed 23, syntax-invalid 57, redundant 14
Fitness: max 0.991(2), min 0.845(1), ave 0.963
Test execution time: sum 3423 ms, max 837 ms, min 421 ms
----------------------------------------------------------------

2023-08-07 04:30:41 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-07 04:30:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 23 seconds
Variants: generated 100, build-succeeded 4, build-failed 28, syntax-invalid 53, redundant 15
Fitness: max 0.991(4), min 0.991(4), ave 0.991
Test execution time: sum 2472 ms, max 726 ms, min 467 ms
----------------------------------------------------------------

2023-08-07 04:30:50 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-07 04:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 33 seconds
Variants: generated 100, build-succeeded 5, build-failed 25, syntax-invalid 55, redundant 15
Fitness: max 1(1), min 0.991(4), ave 0.993
Test execution time: sum 3287 ms, max 1009 ms, min 450 ms
----------------------------------------------------------------

2023-08-07 04:31:00 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-07 04:31:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 46 seconds
Variants: generated 100, build-succeeded 8, build-failed 28, syntax-invalid 51, redundant 13
Fitness: max 0.991(6), min 0.966(2), ave 0.985
Test execution time: sum 5219 ms, max 952 ms, min 469 ms
----------------------------------------------------------------

2023-08-07 04:31:13 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-07 04:31:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 55 seconds
Variants: generated 100, build-succeeded 4, build-failed 25, syntax-invalid 53, redundant 18
Fitness: max 0.991(3), min 0.845(1), ave 0.955
Test execution time: sum 2397 ms, max 810 ms, min 457 ms
----------------------------------------------------------------

2023-08-07 04:31:22 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-07 04:31:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 6 seconds
Variants: generated 100, build-succeeded 6, build-failed 31, syntax-invalid 52, redundant 11
Fitness: max 1(1), min 0.983(3), ave 0.989
Test execution time: sum 4264 ms, max 860 ms, min 508 ms
----------------------------------------------------------------

2023-08-07 04:31:33 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-07 04:31:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 15 seconds
Variants: generated 100, build-succeeded 4, build-failed 30, syntax-invalid 51, redundant 15
Fitness: max 0.991(1), min 0.888(1), ave 0.942
Test execution time: sum 2615 ms, max 832 ms, min 465 ms
----------------------------------------------------------------

2023-08-07 04:31:42 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-07 04:31:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 25 seconds
Variants: generated 100, build-succeeded 4, build-failed 24, syntax-invalid 55, redundant 17
Fitness: max 0.991(3), min 0.983(1), ave 0.989
Test execution time: sum 2719 ms, max 816 ms, min 444 ms
----------------------------------------------------------------

2023-08-07 04:31:51 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-07 04:32:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 35 seconds
Variants: generated 100, build-succeeded 7, build-failed 29, syntax-invalid 52, redundant 12
Fitness: max 0.991(6), min 0.983(1), ave 0.99
Test execution time: sum 4275 ms, max 830 ms, min 440 ms
----------------------------------------------------------------

2023-08-07 04:32:02 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-07 04:32:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 44 seconds
Variants: generated 100, build-succeeded 2, build-failed 29, syntax-invalid 55, redundant 14
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1487 ms, max 802 ms, min 685 ms
----------------------------------------------------------------

2023-08-07 04:32:11 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-07 04:32:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 54 seconds
Variants: generated 100, build-succeeded 6, build-failed 32, syntax-invalid 50, redundant 12
Fitness: max 0.991(5), min 0.983(1), ave 0.99
Test execution time: sum 3356 ms, max 748 ms, min 422 ms
----------------------------------------------------------------

2023-08-07 04:32:21 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-07 04:32:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 3 seconds
Variants: generated 100, build-succeeded 3, build-failed 27, syntax-invalid 55, redundant 15
Fitness: max 0.991(1), min 0.845(1), ave 0.934
Test execution time: sum 2033 ms, max 824 ms, min 431 ms
----------------------------------------------------------------

2023-08-07 04:32:30 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-07 04:32:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 13 seconds
Variants: generated 100, build-succeeded 5, build-failed 27, syntax-invalid 51, redundant 17
Fitness: max 0.991(4), min 0.983(1), ave 0.99
Test execution time: sum 3213 ms, max 767 ms, min 484 ms
----------------------------------------------------------------

2023-08-07 04:32:40 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-07 04:32:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 25 seconds
Variants: generated 100, build-succeeded 7, build-failed 28, syntax-invalid 51, redundant 14
Fitness: max 1(1), min 0.991(6), ave 0.993
Test execution time: sum 4630 ms, max 798 ms, min 436 ms
----------------------------------------------------------------

2023-08-07 04:32:52 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-07 04:33:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 37 seconds
Variants: generated 100, build-succeeded 8, build-failed 30, syntax-invalid 50, redundant 12
Fitness: max 1(1), min 0.966(1), ave 0.988
Test execution time: sum 5201 ms, max 887 ms, min 419 ms
----------------------------------------------------------------

2023-08-07 04:33:04 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-07 04:33:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 50 seconds
Variants: generated 100, build-succeeded 9, build-failed 20, syntax-invalid 52, redundant 19
Fitness: max 0.991(8), min 0.836(1), ave 0.974
Test execution time: sum 5932 ms, max 828 ms, min 446 ms
----------------------------------------------------------------

2023-08-07 04:33:17 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-07 04:33:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 58 seconds
Variants: generated 100, build-succeeded 2, build-failed 33, syntax-invalid 52, redundant 13
Fitness: max 0.991(2), min 0.991(2), ave 0.991
Test execution time: sum 1405 ms, max 781 ms, min 624 ms
----------------------------------------------------------------

2023-08-07 04:33:25 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-07 04:33:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 9 seconds
Variants: generated 100, build-succeeded 5, build-failed 29, syntax-invalid 54, redundant 12
Fitness: max 0.991(5), min 0.991(5), ave 0.991
Test execution time: sum 3395 ms, max 894 ms, min 459 ms
----------------------------------------------------------------

2023-08-07 04:33:35 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-07 04:33:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 20 seconds
Variants: generated 100, build-succeeded 6, build-failed 29, syntax-invalid 53, redundant 12
Fitness: max 0.991(5), min 0.983(1), ave 0.99
Test execution time: sum 3784 ms, max 847 ms, min 494 ms
----------------------------------------------------------------

2023-08-07 04:33:46 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-07 04:34:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 33 seconds
Variants: generated 100, build-succeeded 8, build-failed 27, syntax-invalid 52, redundant 13
Fitness: max 1(1), min 0.931(2), ave 0.977
Test execution time: sum 4896 ms, max 762 ms, min 450 ms
----------------------------------------------------------------

2023-08-07 04:34:00 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-07 04:34:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 44 seconds
Variants: generated 43, build-succeeded 8, build-failed 20, syntax-invalid 1, redundant 14
Fitness: max 1(2), min 0.991(6), ave 0.994
Test execution time: sum 4939 ms, max 862 ms, min 419 ms
----------------------------------------------------------------

2023-08-07 04:34:11 [main] [INFO]  KGenProgMain - GA stopped
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v54)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v54)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v54)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v54)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v54)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v54)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v162)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v162)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v162)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v162)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v162)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v162)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v599)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v599)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v599)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v599)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v599)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +290,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v599)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v714)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v714)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v714)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v714)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v733)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2132)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2132)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2132)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2132)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2132)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2132)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        int sign = 0;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v2629)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3101)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v3405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || Double.isNaN(divisor)) {
+            double imaginary2 = 2.0 * imaginary;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4234)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4550)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4550)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4550)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4550)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4550)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4550)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:19 [main] [INFO]  PatchLogExporter - patch (v4640)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4706)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4710)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        int sign = 0;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v4830)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +292,13 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        int sign = 0;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5102)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5104)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5104)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5104)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5104)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5104)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5104)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v5501)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            return createComplex(-real, -imaginary);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
+        double real2 = 2.0 * real;
+		MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            return createComplex(-real, -imaginary);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +293,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6814)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6823)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6823)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6823)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6823)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || Double.isNaN(divisor)) {
+            double expReal = FastMath.exp(real);
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v6823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7002)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7023)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7023)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7023)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7023)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7023)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +292,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7023)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7043)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +291,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:20 [main] [INFO]  PatchLogExporter - patch (v7401)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7437)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7437)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7437)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7437)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v7439)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8243)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +291,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8725)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v8830)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9145)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            return createComplex(0.0, 0.0);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +272,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +293,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v9829)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:21 [main] [INFO]  PatchLogExporter - patch (v10141)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10237)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +270,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10340)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +291,8 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN || divisor.isNaN) {
+            double q = imaginary / real;
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (divisor == 0d) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            double q = imaginary / real;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10447)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10588)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v10926)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11044)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11131)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11464)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +292,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11511)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double q = imaginary / real;
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +294,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +290,10 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11528)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11619)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
@@ -156,7 +155,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v11648)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double q = imaginary / real;
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +290,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isInfinite()) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:22 [main] [INFO]  PatchLogExporter - patch (v12113)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +292,10 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,10 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            StringBuffer ret = null;
+			double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +274,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +295,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12443)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (divisor.isZero) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +288,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,12 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,10 +292,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v12529)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13048)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13048)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13048)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13048)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13048)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,15 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13048)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
-        }
-        if (Double.isInfinite(divisor)) {
+        if (divisor == 0d)
+			return NaN;
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13323)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v13546)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14021)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14021)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14021)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14021)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,13 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +294,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14402)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14402)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14402)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14402)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14701)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2911,7 +2911,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v14847)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15008)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15212)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1177,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -1455,6 +1455,7 @@
         double d = -(c-a-lnm[0]);
         a = c;
         b = b + d;
+		b = b + d;
 
         c = a + lnza;
         d = -(c - a - lnza);
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15422)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,15 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			MathUtils.checkNotNull(divisor);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -156,7 +156,7 @@
             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
                                                         locale);
             sb.append(fmt.format(args));
-            if (++count < len) {
+            if (i < len) {
                 // Add a separator if there are other messages.
                 sb.append(separator);
             }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +286,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1176,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2858,8 +2858,6 @@
         double ya = xa + temp - temp;
         double yb = xb + xa - ya;
         xa = ya;
-        xb += yb;
-
         //if (idx > 8 || idx == 0)
         if (idx == 0) {
             /* If the slope of the arctan is gentle enough (< 0.45), this approximation will suffice */
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15901)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,10 +294,10 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:23 [main] [INFO]  PatchLogExporter - patch (v15945)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,10 +294,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v15947)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,12 +288,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1178,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -2880,7 +2880,6 @@
             zb += xb * TANGENT_TABLE_B[idx];
             ya = epsA / za;
 
-            temp = ya * HEX_40000000;
             final double yaa = (ya + temp) - temp;
             final double yab = ya - yaa;
 
@@ -2911,7 +2910,6 @@
     yb = yb * epsA2 * epsA;
          */
 
-        yb = 0.07490822288864472;
         yb = yb * epsA2 + -0.09088450866185192;
         yb = yb * epsA2 + 0.11111095942313305;
         yb = yb * epsA2 + -0.1428571423679182;
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v16419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v17511)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18115)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18139)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18307)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18406)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18431)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18705)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -1291,26 +1291,9 @@
         /* Extract the exponent */
         int exp = (int)(bits >> 52)-1023;
 
-        if ((bits & 0x7ff0000000000000L) == 0) {
-            // Subnormal!
-            if (x == 0) {
-                // Zero
-                if (hiPrec != null) {
-                    hiPrec[0] = Double.NEGATIVE_INFINITY;
-                }
+        if ((bits & 0x7ff0000000000000L) == 0)
 
-                return Double.NEGATIVE_INFINITY;
-            }
 
-            /* Normalize the subnormal number. */
-            bits <<= 1;
-            while ( (bits & 0x0010000000000000L) == 0) {
-                exp--;
-                bits <<= 1;
-            }
-        }
-
-
         if (exp == -1 || exp == 0) {
             if (x < 1.01 && x > 0.99 && hiPrec == null) {
                 /* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18747)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +289,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v18927)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,10 +294,11 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double real2 = 2.0 * real;
+			StringBuffer ret = null;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1182,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19319)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -1291,26 +1291,9 @@
         /* Extract the exponent */
         int exp = (int)(bits >> 52)-1023;
 
-        if ((bits & 0x7ff0000000000000L) == 0) {
-            // Subnormal!
-            if (x == 0) {
-                // Zero
-                if (hiPrec != null) {
-                    hiPrec[0] = Double.NEGATIVE_INFINITY;
-                }
+        if ((bits & 0x7ff0000000000000L) == 0)
 
-                return Double.NEGATIVE_INFINITY;
-            }
 
-            /* Normalize the subnormal number. */
-            bits <<= 1;
-            while ( (bits & 0x0010000000000000L) == 0) {
-                exp--;
-                bits <<= 1;
-            }
-        }
-
-
         if (exp == -1 || exp == 0) {
             if (x < 1.01 && x > 0.99 && hiPrec == null) {
                 /* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight
@@ -1454,8 +1437,6 @@
         double c = a+lnm[0];
         double d = -(c-a-lnm[0]);
         a = c;
-        b = b + d;
-
         c = a + lnza;
         d = -(c - a - lnza);
         a = c;
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
-        }
-        if (Double.isInfinite(divisor)) {
+        if (divisor == 0d)
+			return NaN;
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19511)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19729)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +289,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1179,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19735)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v19949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v20844)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			final List<Complex> result=new ArrayList<Complex>();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,13 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1180,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -251,13 +251,11 @@
     public Complex divide(Complex divisor)
         throws NullArgumentException {
         MathUtils.checkNotNull(divisor);
-        if (isNaN || divisor.isNaN) {
+        if (imaginary == 0.0) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +271,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +288,15 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double q = imaginary / real;
+			MathUtils.checkNotNull(divisor);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -1291,26 +1291,9 @@
         /* Extract the exponent */
         int exp = (int)(bits >> 52)-1023;
 
-        if ((bits & 0x7ff0000000000000L) == 0) {
-            // Subnormal!
-            if (x == 0) {
-                // Zero
-                if (hiPrec != null) {
-                    hiPrec[0] = Double.NEGATIVE_INFINITY;
-                }
+        if ((bits & 0x7ff0000000000000L) == 0)
 
-                return Double.NEGATIVE_INFINITY;
-            }
 
-            /* Normalize the subnormal number. */
-            bits <<= 1;
-            while ( (bits & 0x0010000000000000L) == 0) {
-                exp--;
-                bits <<= 1;
-            }
-        }
-
-
         if (exp == -1 || exp == 0) {
             if (x < 1.01 && x > 0.99 && hiPrec == null) {
                 /* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight
@@ -1454,8 +1437,6 @@
         double c = a+lnm[0];
         double d = -(c-a-lnm[0]);
         a = c;
-        b = b + d;
-
         c = a + lnza;
         d = -(c - a - lnza);
         a = c;
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v21743)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22222)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double expReal = FastMath.exp(real);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -273,7 +273,8 @@
             return createComplex((real * q + imaginary) / denominator,
                 (imaginary * q - real) / denominator);
         } else {
-            double q = d / c;
+            double imaginary2 = 2.0 * imaginary;
+			double q = d / c;
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -289,14 +290,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double expReal = FastMath.exp(real);
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -1180,6 +1181,6 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);
     }
 }
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.util.FastMath
+++ org.apache.commons.math.util.FastMath
@@ -770,6 +770,7 @@
             }
 
             intVal++;
+			double result;
 
             intPartA = EXP_INT_TABLE_A[750-intVal];
             intPartB = EXP_INT_TABLE_B[750-intVal];
2023-08-07 04:34:24 [main] [INFO]  PatchLogExporter - patch (v22333)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
+++ org.apache.commons.math.stat.correlation.StorelessBivariateCovariance
@@ -73,4 +73,3 @@
     }
 
 }
-
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.special.Erf
+++ org.apache.commons.math.special.Erf
@@ -127,4 +127,3 @@
                 erf(x2) - erf(x1);
     }
 }
-
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.exception.util.ArgUtils
+++ org.apache.commons.math.exception.util.ArgUtils
@@ -41,15 +41,6 @@
     public static Object[] flatten(Object[] array) {
         final List<Object> list = new ArrayList<Object>();
         if (array != null) {
-            for (Object o : array) {
-                if (o instanceof Object[]) {
-                    for (Object oR : flatten((Object[]) o)) {
-                        list.add(oR);
-                    }
-                } else {
-                    list.add(o);
-                }
-            }
         }
         return list.toArray();
     }
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -286,4 +286,3 @@
         return test(values, begin, length, allowEmpty);
     }
 }
-
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.exception.util.ExceptionContext
+++ org.apache.commons.math.exception.util.ExceptionContext
@@ -63,7 +63,6 @@
      */
     public void addMessage(Localizable pattern,
                            Object ... arguments) {
-        msgPatterns.add(pattern);
         msgArguments.add(ArgUtils.flatten(arguments));
     }
 
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.optimization.direct.CMAESOptimizer
+++ org.apache.commons.math.optimization.direct.CMAESOptimizer
@@ -1394,4 +1394,3 @@
         return new Array2DRowRealMatrix(d, false);
     }
 }
-
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,14 +287,14 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
2023-08-07 04:34:25 [main] [INFO]  PatchLogExporter - patch (v22343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-07 04:34:25 [main] [INFO]  KGenProgMain - Summary
Reached generation = 225
Generated variants = 22343
Syntax valid variants = 12407
Build succeeded variants = 3156
Time elapsed = 54 minutes 58 seconds
Exit status = SUCCESS
